<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[markzhai's home]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.zhaiyifan.cn/"/>
  <updated>2016-07-21T08:36:24.000Z</updated>
  <id>http://blog.zhaiyifan.cn/</id>
  
  <author>
    <name><![CDATA[Mark Zhai]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Blog计划2016]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/12/31/Blog-Plan-2016/"/>
    <id>http://blog.zhaiyifan.cn/2016/12/31/Blog-Plan-2016/</id>
    <published>2016-12-31T15:59:00.000Z</published>
    <updated>2016-07-21T08:36:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="从零开始系列">从零开始系列</h1><p>系列标题取得有问题，其实是面向进阶的Android开发的，相对初学者来说很多地方说的可能不够清楚。<br>后期会考虑一下完善一下，尽可能说的更清楚。</p>
<p>4月做完BlockCanary分享后尽快把demo先完善了，然后和blog做到同步更新。</p>
<p>目前想到的后面的几篇</p>
<ul>
<li><del>Retrofit</del></li>
<li><del>Realm</del></li>
<li><del>基于Retrofit和Realm的Data层设计</del></li>
<li><del>Data Binding</del></li>
<li>前端用后台接口设计与撕逼</li>
<li>基于异常的优雅错误处理架构</li>
<li>RxJava</li>
<li>模块化的重用</li>
<li>基于Navigator的全局scheme式跳转设计</li>
<li>Hybrid App</li>
<li>上线前优化，打包</li>
<li>Crash处理、分析</li>
<li>BlockCanary线上优化实践</li>
</ul>
<h1 id="Android逆向分析">Android逆向分析</h1><ul>
<li>Android可执行文件之谜 - DEX与ODEX, OAT与ELF</li>
<li>修改apktool</li>
<li>native逆向</li>
<li>重打包</li>
<li>Google Camera反编译看看Photo Sphere怎么做的</li>
<li>静态分析</li>
<li>动态调试</li>
</ul>
<h1 id="JavaScript">JavaScript</h1><ul>
<li>Vue</li>
<li>React.js</li>
<li>Redux</li>
</ul>
<h1 id="React_Native">React Native</h1><ul>
<li>在已有android项目添加RN的方法</li>
<li>简单的例子 - 点赞页面</li>
<li>和native的交互module</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="从零开始系列">从零开始系列</h1><p>系列标题取得有问题，其实是面向进阶的Android开发的，相对初学者来说很多地方说的可能不够清楚。<br>后期会考虑一下完善一下，尽可能说的更清楚。</p>
<p>4月做完BlockCanary分享后尽快把demo先完善]]>
    </summary>
    
      <category term="Blog Plan" scheme="http://blog.zhaiyifan.cn/tags/Blog-Plan/"/>
    
      <category term="闲言闲语" scheme="http://blog.zhaiyifan.cn/categories/%E9%97%B2%E8%A8%80%E9%97%B2%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native 0.31 Bundle 预加载优化]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/08/20/react-native-0-31-preload-optimization/"/>
    <id>http://blog.zhaiyifan.cn/2016/08/20/react-native-0-31-preload-optimization/</id>
    <published>2016-08-20T04:41:12.000Z</published>
    <updated>2016-08-22T04:34:33.000Z</updated>
    <content type="html"><![CDATA[<p>使用 React Native 开发混合应用的过程中，我们在打完 bundle 进 release 包后，会发现第一次进入页面（React 的 Activity）会有一个短暂的白屏过程（在真机上近 <strong>1秒</strong>，在模拟器上比较快，在 <strong>200毫秒</strong> 左右），而且在完全退出后再进入，仍然会有这个白屏。</p>
<p>仔细查看加载过程（其实猜猜都能知道）后可以发现，这个过程就是在加载我们的 js bundle，通常即便是一个小的 RN 应用（混合应用中的子业务），也会动辄到 1MB 的大小，除非是完整的 RN 应用，可以把这个当做是启动速度，否则这样的加载速度都是对用户体验的很大伤害。</p>
<p>于是我们决定进行 Bundle 预加载的优化。</p>
<p>项目源码上传在：<a href="https://github.com/markzhai/react-native-preloader" target="_blank" rel="external">markzhai/react-native-preloader</a>，稍后会上传到 maven，版本号会和 rn 保持一致。</p>
<h1 id="耗时操作">耗时操作</h1><p>见 <code>ReactActivity</code> 的 <code>onCreate</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (getUseDeveloperSupport() &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">    <span class="comment">// Get permission to show redbox in dev builds.</span></span><br><span class="line">    <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">      Intent serviceIntent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</span><br><span class="line">      startActivity(serviceIntent);</span><br><span class="line">      FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);</span><br><span class="line">      Toast.makeText(<span class="keyword">this</span>, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mReactRootView = createRootView();</span><br><span class="line">  mReactRootView.startReactApplication(</span><br><span class="line">    getReactNativeHost().getReactInstanceManager(),</span><br><span class="line">    getMainComponentName(),</span><br><span class="line">    getLaunchOptions());</span><br><span class="line">  setContentView(mReactRootView);</span><br><span class="line">  mDoubleTapReloadRecognizer = <span class="keyword">new</span> DoubleTapReloadRecognizer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打点后可以发现耗时的其实是</p>
<ul>
<li>createRootView();</li>
<li>startReactApplication();</li>
</ul>
<p>这两个操作，所以考虑只需要提前创建 <code>ReactRootView</code> 进行 render，之后直接挂载该 view 上去即可。</p>
<h1 id="预加载">预加载</h1><p>创建预加载类 <code>ReactPreLoader</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * React Native Bundle Pre-loader.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> markzhai on 16/8/20</span><br><span class="line"> * <span class="doctag">@version</span> 1.3.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactPreLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ReactPreLoader"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, ReactRootView&gt; CACHE_VIEW_MAP =</span><br><span class="line">            <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Get &#123;<span class="doctag">@link</span> ReactRootView&#125; with corresponding &#123;<span class="doctag">@link</span> ReactInfo&#125;.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReactRootView <span class="title">getRootView</span><span class="params">(ReactInfo reactInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CACHE_VIEW_MAP.get(reactInfo.getMainComponentName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Pre-load &#123;<span class="doctag">@link</span> ReactRootView&#125; to local &#123;<span class="doctag">@link</span> Map&#125;, you may want to</span><br><span class="line">     * load it in previous activity.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Activity activity, ReactInfo reactInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CACHE_VIEW_MAP.get(reactInfo.getMainComponentName()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ReactRootView rootView = <span class="keyword">new</span> ReactRootView(activity);</span><br><span class="line">        rootView.startReactApplication(</span><br><span class="line">                ((ReactApplication) activity.getApplication()).getReactNativeHost().getReactInstanceManager(),</span><br><span class="line">                reactInfo.getMainComponentName(),</span><br><span class="line">                reactInfo.getLaunchOptions());</span><br><span class="line">        CACHE_VIEW_MAP.put(reactInfo.getMainComponentName(), rootView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Remove &#123;<span class="doctag">@link</span> ReactRootView&#125; from parent.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">(ReactInfo reactInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ReactRootView rootView = getRootView(reactInfo);</span><br><span class="line">            ViewGroup parent = (ViewGroup) rootView.getParent();</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                parent.removeView(rootView);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            Logger.e(TAG, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 init 操作中，我们通过 ReactInfo 缓存把 view 缓存在本地的 <code>ArrayMap</code>。</p>
<p>值得注意的是 <code>onDestroy</code>，在 ReactActivity 销毁后，我们需要把 view 从 parent 上卸载下来。</p>
<h1 id="使用预加载的_view">使用预加载的 view</h1><p>使用预加载的 View，就需要侵入 activity 的创建过程，我们无法再使用 RN 库提供的 <code>ReactActivity</code>，只能建立自己的，以下列出修改的方法，其他方法照抄 <code>ReactActivity</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Base Activity for React Native applications.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> markzhai on 16/7/28</span><br><span class="line"> * <span class="doctag">@version</span> 1.3.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MrReactActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span>, <span class="title">PermissionAwareActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getUseDeveloperSupport() &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">            <span class="comment">// Get permission to show redbox in dev builds.</span></span><br><span class="line">            <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                Intent serviceIntent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</span><br><span class="line">                startActivity(serviceIntent);</span><br><span class="line">                FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mReactRootView = ReactPreLoader.getRootView(getReactInfo());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Logger.i(TAG, <span class="string">"use pre-load view"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.i(TAG, <span class="string">"createRootView"</span>);</span><br><span class="line">            mReactRootView = createRootView();</span><br><span class="line">            <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mReactRootView.startReactApplication(</span><br><span class="line">                        getReactNativeHost().getReactInstanceManager(),</span><br><span class="line">                        getMainComponentName(),</span><br><span class="line">                        getLaunchOptions());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setContentView(mReactRootView);</span><br><span class="line"></span><br><span class="line">        mDoubleTapReloadRecognizer = <span class="keyword">new</span> DoubleTapReloadRecognizer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mReactRootView.unmountReactApplication();</span><br><span class="line">            mReactRootView = <span class="keyword">null</span>;</span><br><span class="line">            ReactPreLoader.onDestroy(getReactInfo());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        getReactNativeHost().clear();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ReactInfo <span class="title">getReactInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用">使用</h1><p>在进入该 RN activity 的上一个 activity 调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactPreLoader.init(<span class="keyword">this</span>, ReactCardActivity.reactInfo);</span><br></pre></td></tr></table></figure></p>
<p>ReactCardActivity 继承我们自己的 ReactActivity：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactCardActivity</span> <span class="keyword">extends</span> <span class="title">MrReactActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ReactInfo reactInfo = <span class="keyword">new</span> ReactInfo(<span class="string">"card"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMainComponentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reactInfo.getMainComponentName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReactInfo <span class="title">getReactInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reactInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>优化后可以达到瞬间加载。</p>
<h1 id="已知的坑">已知的坑</h1><p>由于进行了预加载，目前已知的问题是 <code>Modal</code> 无法显示 —— 因为 <code>Modal</code> 在 Android 的实现使用了 <code>Dialog</code>，而该 View 将创建 <code>ReactRootView</code> 的 context 作为参数传给了 <code>Dialog</code>，而不是实际运行时所在的 <code>Activity</code> context。查看源码可以验证（com.facebook.react.views.modal）。</p>
<p><code>TimePickerAndroid</code> 这类 picker 则没有问题。见 <a href="https://github.com/facebook/react-native/issues/9496" target="_blank" rel="external">issue 9496</a></p>
<p>作为规避方案，目前使用 <code>MutableContextWrapper</code> 进行 context 替换。见 GitHub 上的具体实现（感谢评论里的 Lovecraft 提供的方案）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用 React Native 开发混合应用的过程中，我们在打完 bundle 进 release 包后，会发现第一次进入页面（React 的 Activity）会有一个短暂的白屏过程（在真机上近 <strong>1秒</strong>，在模拟器上比较快，在 <strong]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Optimization" scheme="http://blog.zhaiyifan.cn/tags/Optimization/"/>
    
      <category term="React Native" scheme="http://blog.zhaiyifan.cn/tags/React-Native/"/>
    
      <category term="优化" scheme="http://blog.zhaiyifan.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="React Native" scheme="http://blog.zhaiyifan.cn/categories/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目10 - React Native & Redux]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/08/04/android-new-project-from-0-p10/"/>
    <id>http://blog.zhaiyifan.cn/2016/08/04/android-new-project-from-0-p10/</id>
    <published>2016-08-04T14:03:13.000Z</published>
    <updated>2016-08-19T03:00:56.000Z</updated>
    <content type="html"><![CDATA[<p>本篇来讲讲 React Native 和 Redux，和其他一上来就啪啪啪丢上来一堆翻译的东西不同，本文会从简单的例子入手，让大家能快速地明白 React Native 是什么，Redux 和常见的 MVC、MVP 等有什么区别，怎么去组织一个 Redux 架构的 React Native 项目。</p>
<p>为避免大家还没入门就放弃，预计下一篇才会从我们项目中的实践出发，讲讲更复杂的应用场景。</p>
<h1 id="什么是React_Native">什么是React Native</h1><p><img src="http://blog.zhaiyifan.cn/images/react-native-1-reactnative.png" alt="React Native"></p>
<p>React Native 使你能够基于 JavaScript 和 React 在原生平台上构建应用，提倡的是 “learn once, write anywhere”，复用代码，提高开发效率。</p>
<p>项目由 Facebook 开源驱动，在过去的近一年中更新很活跃。文档建议直接看官网的 <a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a>，中文站有点坑。</p>
<p>支持系统：Android 4.1 (API 16) 以及 &gt;= iOS 7.0。</p>
<p>关于 React，可以参见之前为掘金翻译计划翻译的 <a href="http://blog.zhaiyifan.cn/2016/04/22/trans-react-newbies-tutorial/">React.js 新手村教程</a>，简单来说 React 将应用分为一个个动态可复用的组件 —— View的渲染（JSX）、数据如何绑定到显示、状态的变更（State）、属性（Props）都包含在组件内部。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-reactjs.png" alt="React.js"></p>
<p>整个应用由一个个组件搭积木而成（组件式开发），而每个组件则由状态驱动而变更。</p>
<p>React Native 正像它的名字，将 React 带到了原生世界，和 H5 不同的是，我们不再使用 CSS 和 HTML，而只有 js 为伴。我们也不再有那些 <code>div</code>, <code>input</code> 这些标签，而是由 <code>View</code>, <code>TextInput</code> 等等取代，更符合原生开发者们的习惯。布局上，幸而有强大的 <code>Flexbox</code> 支持，如果开发者们之前有使用或者看到过 Google 在 GitHub 发布的 Android 版 <code>FlexboxLayout</code>，相信对它会很熟悉。原生开发中的页面栈，也由 <code>Navigator</code> 进行了实现（在 Android 上还有 <code>BackAndroid</code> 的返回键支持）。</p>
<p>与 WebView 不同，React Native 运行的界面，最终会被解释映射为原生的 View，可以直接使用布局边界或者 Hierarchy Viewer 看出层级（js 文件会打包为一个bundle，位于assets下面，RN引擎会加载并进行解释映射）。</p>
<p>好处</p>
<ul>
<li>体验 web 开发的便捷，不再需要编译，重新加载一下 js 就行了</li>
<li>可以直接使用 Chrome 或者 Nuclide 调试</li>
<li>Android / iOS 两端可以共享很大一部分代码（RN 还在进行 Windows, MacOS, Node-webkit 等平台的支持）</li>
<li>热更新，JS bundle 下发一下新的就行了（当然也有一定局限性，如果是 hybrid，则 native 的 RN module 部分不能更新）</li>
</ul>
<p>坏处</p>
<ul>
<li>前端开发不会原生做不了 React Native（除非你能真只用自带的那些东西），而且理解那些 RN 提供的组件也会很头晕（需要同时了解 Android 和 iOS）。</li>
<li>原生开发需要一定成本的学习实践才能掌握 React Native。毕竟 ES6 不像过去的 JS 那么傻瓜式了。</li>
<li>React Native 目前仍然处于快速迭代开发的阶段，你永远也不知道下个版本自己升级需要修改多少原来的代码。</li>
<li>React Native 的资料较少，尤其是国内的，更尤其是 hybrid 开发的（GitHub 上的开源项目大多是纯 RN 的）。</li>
</ul>
<h1 id="什么是Redux">什么是Redux</h1><p><img src="https://camo.githubusercontent.com/f28b5bc7822f1b7bb28a96d8d09e7d79169248fc/687474703a2f2f692e696d6775722e636f6d2f4a65567164514d2e706e67" alt="Redux.js"></p>
<p><a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 本身和 React 并没有特别紧密的联系，而是 Facebook 提出的 Flux 架构的一种优秀实现，可以搭配其他任何框架一起使用。在 React 上使用，需要搭配 react-redux（如此一来 Redux 可以不局限于 React，而让社区发展出更多的 redux-* 中间件）。</p>
<p>Redux 在 React 的基础上（state 和 props），增加了 <a href="http://cn.redux.js.org//docs/basics/Store.html" target="_blank" rel="external">store</a>、<a href="http://cn.redux.js.org//docs/basics/Actions.html" target="_blank" rel="external">action</a>、<a href="http://cn.redux.js.org//docs/basics/Reducers.html" target="_blank" rel="external">reducer</a> 的概念，规范了全局一个 state，从而只需要根据这个 state 就能回朔出整个应用的状态。组件通过 dispatch 将 action 传到 store，reducer 根据原来的 state 以及 action，返回新的 state，组件根据新的 state 渲染界面。</p>
<p>Redux 是一个可预测的状态容器，即只需要有状态树，就能还原出“事发现场”。</p>
<h1 id="从例子看项目">从例子看项目</h1><p>为了避免说一大堆概念，大家一头雾水，似懂非懂，这里拿一个例子来讲讲 React Native 和 Redux 结合后的效果，尽量避免代码的出现，而以图和文字代替。</p>
<p>Counter！没错，就是 Counter，不是 TODO，TODO已经被黑的不成样了。</p>
<p>项目源码位于：<a href="https://github.com/alinz/example-react-native-redux" target="_blank" rel="external">example-react-native-redux</a>。包含了 <code>Counter</code> 和 <code>Counters</code> 两个子项目。前者是单个的计数器，后者则在前者的基础上增加了可以加减计数器个数的功能，相对更复杂一些，不过引入了一些不错的实践可以参考。</p>
<h2 id="运行效果">运行效果</h2><p>先看看最后的效果，方便对应后面的解说。<br>第一个 Counter 项目很简单，就是一个文本框加上两个按钮，一个加1，一个减1。<br>第二个 Counters 项目在前者的基础上（使用了 Counter 组件），可以增加任意个计数器，还添加了带延迟的加1功能，来模拟耗时操作。</p>
<h2 id="Counter">Counter</h2><p>先看看Counter，我们从物理架构和动作流两个角度来进行观察。</p>
<p>目录下，有以下文件：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-files.png" alt="Counter List Files"></p>
<p>index.android.js 和 index.ios.js 分别是 android 和 iOS 的 rn 入口，通常内容是相同的。<br>android 为 Android 的工程目录，下面有我们熟悉的 build.gralde。<br>ios 为 iOS 的工程目录，包含了 xcode 的项目。<br>app 就是 rn 的目录，包含了 Android 和 iOS 项目共享的 js 源码。<br>node_modules 是 node 通过解析 package.json 下载的依赖。</p>
<h3 id="物理结构">物理结构</h3><p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-structure.png" alt="Counter物理结构"></p>
<p>CounterApp.js 则是整个应用的实际入口。</p>
<h3 id="动作流">动作流</h3><p>且不谈那些具体的 bind 和 createStore 操作，我们来看看当发生交互的时候，整个动作的分发，拿点击加号为例：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-flow.png" alt="Counter活动图"></p>
<p>onPress 事件触发了后续的一系列活动，而 Counter Component 的 action function 则由外部通过 props 传入（在这里，是 CounterApp 的 render 函数，如下）。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-counterapp.png" alt="counterApp.js"></p>
<p>再看看 store 的创建，在 App.js 入口：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-app.png" alt="app.js"></p>
<p>而 Component 也不是直接调用 action 的 function，而是通过 bindActionCreators 注入到组件props中（这里是通过 react-redux 进行的，不是 redux 自身的东西，可以理解为 react 和 redux 之间的胶水）：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-action-bind.png" alt="action bind"></p>
<p>通常我们会在智能组件的末尾使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(CardDetail);</span><br></pre></td></tr></table></figure>
<p>这样来把 state 以及 action 注入。</p>
<h2 id="Counters">Counters</h2><p>接着我们来看看更为复杂的 Counters 项目，顶层目录结构类似，不再赘述。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-demo.gif" alt="demo"></p>
<p>看完上面的 demo 动图后，相信大家对下面的解说会更容易理解。</p>
<h3 id="物理结构-1">物理结构</h3><p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-structure.png" alt="Counters物理结构"></p>
<p>我们来详细讲一下 modules 下的 app 目录中的文件组织。</p>
<p>actions.js 和刚才一样，定义了一个个的 action，略有不同的是由于这次有异步的操作，所以涉及到了 dispatch 函数，关于 dispatch 可以查看<a href="http://cn.redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="external">官方文档</a>。</p>
<p>constants.js 定义了所有 action 的 type，以及 App 的名字。</p>
<p>reducers.js 一样根据 action（payload 和 type）以及原来的 state 返回新的 state，另外，这里还进行了 initial state 即初始状态的定义（我们也可以把它放到单独的文件中）。</p>
<p>App.js 定义了页面的布局（渲染和 action），导出了 connect 生成的 container。我们简单看一下 render 部分是怎么做的。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-app-render.png" alt="Counters render"></p>
<p>怎么样，JSX 是不是挺容易理解的？</p>
<h3 id="动作流-1">动作流</h3><p>Counter 本身的动作流上面我们已经举例过了，本工程中增减计数类似，唯一的区别是 action 不只有 type，还带了 payload（id）来标示不同的计数器。</p>
<p>所以这里我们拿增加计数器的点击事件来做例子。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-add-counter.png" alt="Add Counter"></p>
<p>看上去是不是跟上面的差不多？剩下的那个 incrementWithDelay 其实也差不多，只不过返回的是一个function，在 setTimeOut 回调中才进行 dispatch（thunk middleware 会帮我们进行处理）。</p>
<h2 id="总结">总结</h2><p>上面我们通过物理结构和活动图大致了解了 React Native 上的 Redux 架构 app 是如何工作的。具体的细节，建议大家还是去查看 GitHub 上的源代码，通过上面的讲解后，应该不难理解。</p>
<h1 id="技术栈">技术栈</h1><p>我们目前实践的React Nataive技术栈：</p>
<ul>
<li>immutable.js</li>
<li>react</li>
<li>redux</li>
<li>react-redux</li>
<li>redux-thunk</li>
<li>redux-logger</li>
<li>redux-mock-store</li>
<li>react-native-router-flux</li>
<li>react-native-simple-store</li>
<li>regenerator</li>
<li>undefined</li>
<li>jest</li>
</ul>
<h1 id="更多阅读">更多阅读</h1><ul>
<li>React<ul>
<li><a href="https://daveceddia.com/react-es5-createclass-vs-es6-classes/" target="_blank" rel="external">React: ES5 (createClass) or ES6 (class)?</a></li>
</ul>
</li>
</ul>
<ul>
<li>Redux<ul>
<li><a href="http://redux.js.org/" target="_blank" rel="external">Redux.js</a></li>
<li><a href="https://egghead.io/courses/getting-started-with-redux" target="_blank" rel="external">Get Started with Redux</a></li>
<li><a href="http://div.io/topic/1309" target="_blank" rel="external">深入到源码：解读 redux 的设计思路与用法</a></li>
<li><a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="external">redux-thunk (Redux的thunk中间件)</a></li>
</ul>
</li>
</ul>
<ul>
<li>React Native<ul>
<li><a href="https://facebook.github.io/react-native/docs/" target="_blank" rel="external">Facebook React Native Docs</a></li>
<li><a href="https://reactnatve.wordpress.com/2016/05/20/mapping-uicomponent-ios-android-react-native/" target="_blank" rel="external">Mapping UIComponent (iOS, Android, React Native)</a></li>
</ul>
</li>
</ul>
<ul>
<li>JavaScript<ul>
<li><a href="http://redux.js.org/docs/advanced/Middleware.html" target="_blank" rel="external">中间件Middleware</a></li>
<li><a href="https://babeljs.io/docs/learn-es2015/" target="_blank" rel="external">ES6</a></li>
</ul>
</li>
</ul>
<ul>
<li>项目<ul>
<li><a href="https://github.com/fbsamples/f8app" target="_blank" rel="external">https://github.com/fbsamples/f8app</a></li>
<li><a href="http://f8-app.liaohuqiu.net/" target="_blank" rel="external">http://f8-app.liaohuqiu.net/</a></li>
<li><a href="https://github.com/bartonhammond/snowflake" target="_blank" rel="external">https://github.com/bartonhammond/snowflake</a></li>
<li><a href="https://github.com/jondot/awesome-react-native" target="_blank" rel="external">https://github.com/jondot/awesome-react-native</a></li>
<li><a href="https://rnplay.org/apps/picks" target="_blank" rel="external">https://rnplay.org/apps/picks</a></li>
</ul>
</li>
</ul>
<ul>
<li>工具<ul>
<li><a href="https://nuclide.io/" target="_blank" rel="external">https://nuclide.io/</a></li>
<li><a href="https://github.com/infinitered/ignite" target="_blank" rel="external">https://github.com/infinitered/ignite</a></li>
</ul>
</li>
</ul>
<ul>
<li>八卦<ul>
<li><a href="https://www.zhihu.com/question/37636296" target="_blank" rel="external">如何看待阿里无线前端发布的Weex?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21677103" target="_blank" rel="external">weex&amp;ReactNative对比</a>，大头鬼对两者的对比，下面还有阿里P8的评论，评论很精彩，记得一页页看过去哦，哈哈。</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇来讲讲 React Native 和 Redux，和其他一上来就啪啪啪丢上来一堆翻译的东西不同，本文会从简单的例子入手，让大家能快速地明白 React Native 是什么，Redux 和常见的 MVC、MVP 等有什么区别，怎么去组织一个 Redux 架构的 Reac]]>
    </summary>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="React Native" scheme="http://blog.zhaiyifan.cn/tags/React-Native/"/>
    
      <category term="Redux" scheme="http://blog.zhaiyifan.cn/tags/Redux/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目9 - 前端用后台接口设计]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/07/23/android-new-project-from-0-p9/"/>
    <id>http://blog.zhaiyifan.cn/2016/07/23/android-new-project-from-0-p9/</id>
    <published>2016-07-23T08:39:19.000Z</published>
    <updated>2016-07-27T07:58:45.000Z</updated>
    <content type="html"><![CDATA[<p>这回来讲讲后台接口的设计。</p>
<p>可能有同学会觉得后台的接口和我们大前端开发有什么关系？试想一下，在碰到一些不合理的接口设计的时候，你们开发是否觉得很别扭——需要为了坑爹的接口写很多脏代码引坑？甚至，这么开发出来的页面，体验也会很差？我们不是说硬无理要求后端接口按照前端业务去封装，而是说为了项目更好地发展，为了用户能有更棒的体验，应该有讨论商量的空间。一些差劲的设计，应该被拒绝。</p>
<p>本文使用前端来指代 Android、iOS 以及 Web。</p>
<p>本文不是教大家撕逼的（赶紧撇清关系）。</p>
<h1 id="全局">全局</h1><p>全局指所有接口统一的规范。</p>
<h2 id="请求头">请求头</h2><p>应该使用http header来放置通用性的参数，比如：</p>
<ul>
<li>APPID（Android/iOS/H5）</li>
<li>APPVER（版本号）</li>
<li>APP-BUILD-NUM（内部小版本号）</li>
<li>TOKEN</li>
<li>NETWORK（网络环境）</li>
<li>LANGUAGE（语言）</li>
<li>等等</li>
</ul>
<p>前端使用 <code>POST</code> 键值对方式提交给后端，可以使用 <code>RawJSON</code> 格式。<br><code>Content-Type</code> 设为 <code>application/x-www-form-urlencoded</code> 或者 <code>application/json</code>。</p>
<h2 id="全局响应格式">全局响应格式</h2><p>响应格式应该统一，方便前端做统一的处理，尤其是数据字段，应该统一放在一个map里面。</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>类型</th>
<th>详细描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>status_no</td>
<td>INT</td>
<td>状态码</td>
</tr>
<tr>
<td>status_msg</td>
<td>STRING</td>
<td>状态信息</td>
</tr>
<tr>
<td>data</td>
<td>MAP</td>
<td>响应内容</td>
</tr>
<tr>
<td>time</td>
<td>INT</td>
<td>响应时间戳</td>
</tr>
</tbody>
</table>
<h2 id="状态码">状态码</h2><p>全局应该定义统一的状态码（status_code），而不应该每个接口单独去定义。</p>
<p>具体规则可以自行定义，比如0为正确，负数为错误。</p>
<p>常见的错误状态码有</p>
<ul>
<li>普通异常</li>
<li>token不合法，需要重新登录</li>
<li>重复登录</li>
<li>需要完善个人信息</li>
<li>第三方账号登陆，需要绑定官方账号</li>
<li>请求头不合法（版本号，APPID等）</li>
<li>数据解密错误</li>
</ul>
<p>可以根据错误类型划分使用的区域段，如登陆系列使用 -1000 到 -1999 区域。</p>
<p>如此定义后，前端可以进行全局的统一处理，如重复登陆则踢出用户。</p>
<h2 id="错误信息">错误信息</h2><p>除了特殊的错误信息——如重复登录、token不合法这些状态码对应的，以及无网、没数据这些，对于通用的异常，应该由后台返回错误信息。</p>
<h2 id="统一data字段">统一data字段</h2><p>data 字段应该统一放在一个 map 内，里面存放具体的响应信息。</p>
<h2 id="Scheme">Scheme</h2><p>全局定义统一的 scheme（Deeplink），方便前端进行跳转。</p>
<p>前端只需要定义自己唯一的 Deeplink 并进行注册即可（scheme 和 host）。</p>
<p>具体使用 REST 风格（如 markzhai://article/XXX），还是普通的 urlencode (如 markzhai://article/?id=XXX&amp;redirect_url=XXX）可以根据自身需求定义。</p>
<p>使用 REST 风格的一个顾虑是可能 scheme 本身并不是基于资源的，而是基于类型、行为等，所以 urlencode 可能更通用，但相应地基于 Deeplink 的资源索引会希望你是无状态的 REST 风格。</p>
<h1 id="回传_or_状态码">回传 or 状态码</h1><p>应该使用回传还是状态码呢？比如点赞消息，是应该回传一个 status_code，0则表示点赞成功，还是应该回传现在的赞状态呢？</p>
<p>其实这两者对于后台的性能来说，是几乎没有影响的，因为取得的只是修改的字段的最后结果。但是对前端来说，差别就有了——需要维护状态。</p>
<p>举一个例子：<br>A 和 B 是两个用户，B 关注了 A，A 没有关注 B。<br>A 看 B 的主页的时候，显示关系是 <em>未关注</em>，此时 A 点击了关注，如果没有回传信息，那么我们只能把关系刷新为 <em>已关注</em>，而没有足够的信息去刷新为 <em>互相关注</em>。否则就需要前端去做恶心的逻辑（后端一开始用户关系就需要传 B 关注了 A），根据原来的关系去做切换，还要在失败的时候刷回原来的状态。</p>
<p>一些有丰富经验的后端会在这种接口使用回传，因为他们知道区别。</p>
<h1 id="模块vs页面">模块vs页面</h1><p>在后台的接口设计上，又分为了按页面以及按模块。</p>
<p>按页面的接口<em>尽可能</em>让前端一个页面只请求一次，一次返回所需要的全部信息；按模块的接口在后端定义自己的业务模块如用户、Feed、标签、搜索等，并尽量避免模块间的耦合。</p>
<p>从后端角度来说，按模块当然是更好的（只需要划分地够细就好），到时候需求有什么变更，让前端自己去改变接口的组合就好，自己高枕无忧。但从前端的角度来说，接口的组合涉及到异步之间的关系，尽管RxJava这样的响应式编程框架让异步简单了很多，但仍然希望可以避免，更严重的是，多次接口请求会让前端的体验变差，并行接口的影响稍小，而一些有前置后置关系的接口则麻烦比较大，一个接着一个请求，会让用户等很久。即便是并行接口，有时候页面的渲染仍然需要所有接口数据返回后才可以进行。</p>
<p>但如果让后端按照页面去套，这样在后端其实一样有性能的损耗，需要一个页面接口去单独调用各个模块的接口，然后进行组合。</p>
<p>究竟如何选择呢？笔者认为在服务器性能足够的前提下，后端应该尽量减少页面请求次数，尤其是有依赖关系的串行请求。另一方面，在一些影响不那么大的页面，则可以由前端自行进行接口组合（比如上面是用户主页的用户展示，下面是该用户的 feed 列表）。</p>
<p>另外，如果你们有一个好的设计师，那么他应该会贯彻一个地方只应该以一样东西为主体，而不应该去把乱七八糟的东西拼凑在一起。</p>
<h1 id="分页信息">分页信息</h1><p>现代的前端交互上，已经很少会有页码显示了，所以很多后端的列表页接口中，就没有带上了分页的信息，而改让客户端去维护请求的页码。</p>
<p>那么，分页信息在接口中，真的就没有存在的必要了吗？其实未必。</p>
<h2 id="为什么需要分页信息">为什么需要分页信息</h2><p>页面大小（pageSize）可能改变（无论是前端自己的配置亦或是后台修改），如果仅由客户端维护页码，那么下次请求下一页就会出错，除非客户端带上自己上次的页面大小。</p>
<p>如果客户端不知道当前页码和总页数，就无法在请求完判断底部应该显示<em>上拉加载更多</em>还是<em>没数据</em>了，导致必须再请求一次，根据是否返回 list 以及数据是否为空去进行判断。</p>
<p>另外，由后端返回页码也避免了客户端修改页码出错的可能。</p>
<p>但对后端来说，这些信息的获取却意味着更大的计算和I/O资源损耗。</p>
<h2 id="折中办法">折中办法</h2><p>折中地，可以让后端返回一个 <code>has_more</code> 字段，这样可以避免最后一次不必要的请求（尤其是数据都不够显示满一页的情况下），体验会好很多。尽管这样仍然无法避免页面大小改变的问题。</p>
<h1 id="配置">配置</h1><p>一些后台喜欢让让前端写限制逻辑，比如搜索的关键字限制，各种过滤逻辑。</p>
<p>咱们先不提让前端写死这些逻辑的灵活性问题（客户端和网页不同，不能那么方便地发版本，即便是网页，改代码发版本就不用测试了吗？出了问题你背？）。前端的输入真的可以信任吗？且不谈代码可能写的不够严谨导致输入跳过了检查，用户还能root、越狱，甚至可以反编译客户端或者直接模拟请求。</p>
<p>所以良好的配置检查应该有两种</p>
<ul>
<li>后端下发配置字段，前端根据字段去做对应检查。好处是减少后台压力，坏处是无法保证安全性。</li>
<li>后端收到请求自行检查过滤，如果出错则返回错误信息给前端显示。</li>
</ul>
<p>毋庸置疑，后者更好。</p>
<p>另外，再说说灵活性。今天可能限制3个字，明天产品需求可能就是4个字，现在产品/运营说不会改，到时候难道就真的一定不会改吗？</p>
<h1 id="空字段">空字段</h1><p>一些空字段，如果没有，服务端应该返回一个空的默认字段 比如 String 用””，int 用 0，Object 用 {}，Array 用 []，这样减小前端校验某些校验漏了出现错误的情况。</p>
<pre><code><span class="comment">---- 由三帅泥阿布补充</span>
</code></pre><p>我个人认为这样本身对流量损耗不大，且确实避免了很多可能的异常，是个很好的意见。当然了，正如后端不应该相信前端的输入一样，前端也不能相信后端数据的完备性，仍然还是需要悲剧地去校验。</p>
<h1 id="教训">教训</h1><ul>
<li><p>不要相信什么以后重构，接口现在这么说，以后他会告诉你，没法兼容老版本所以只能这样了（甚至搞出两套规则让你同时兼容）。</p>
</li>
<li><p>不是说后端就是老大。大家的目标都是为了项目能做好，而现在通常前端的压力比后端更大（前端写得头昏脑花，后端网上东逛西逛），所以在不会很大影响性能的前提下，应该满足前端的合理需求。体验为先。（硬气一点，老大应该挺你，甚至亲自去撕逼，大不了找CTO）</p>
</li>
<li><p>接口的频繁修改要向上反馈，测试数据不满足要求也要及时提出。咱们不做背锅侠。</p>
</li>
<li><p>灵活，灵活。做各种需求的时候，想一想，这儿会不会改变？就算现在不会变，以后就不会变吗？比如抽屉里的入口，是不是要做成可配置的？多问问，实现上尽量灵活。</p>
</li>
</ul>
<h1 id="总结">总结</h1><p>本篇讲了很多通用的后端接口设计问题。帮助大家在面对一些不合理的接口设计时，能进行友善的讨论（撕逼），让项目能做得更好。欢迎各位在评论里或者通过邮件（zhaiyifan56@gmail.com）补充其他点，我会标注出来源。</p>
<hr>
<p>欢迎加入QQ群：568863373。</p>
<p>欢迎关注我们的公众号：<code>魔都三帅</code>，欢迎大家来投稿~只需要是未在微信平台上发布过的技术相关类文章都可以哦（不局限于任何语言和平台）。</p>
<p><img src="http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg" alt="公众号"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这回来讲讲后台接口的设计。</p>
<p>可能有同学会觉得后台的接口和我们大前端开发有什么关系？试想一下，在碰到一些不合理的接口设计的时候，你们开发是否觉得很别扭——需要为了坑爹的接口写很多脏代码引坑？甚至，这么开发出来的页面，体验也会很差？我们不是说硬无理要求后端接口按照]]>
    </summary>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="接口设计" scheme="http://blog.zhaiyifan.cn/tags/%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Data Binding Component详解 - 换肤什么的只是它的一个小应用！]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/07/21/data-binding-component/"/>
    <id>http://blog.zhaiyifan.cn/2016/07/21/data-binding-component/</id>
    <published>2016-07-21T08:40:10.000Z</published>
    <updated>2016-07-25T02:15:00.000Z</updated>
    <content type="html"><![CDATA[<p>上一篇<a href="http://blog.zhaiyifan.cn/2016/07/06/android-new-project-from-0-p8/">从零开始的Android新项目8 - Data Binding高级篇</a>中，我们提到了使用Component来进行注入，以方便进行测试的功能，有一些朋友说写的不够清楚，还有些疑惑，所以本篇就来详细说说Component。</p>
<p>作为例子，我们的实现目标是使用Data Binding Component，让应用全局的TextView的文本都能随时变成test，还能进行全局换肤。</p>
<p>代码位于<a href="https://github.com/markzhai/DataBindingSample" target="_blank" rel="external">DataBindingSample</a>里面的component包下。</p>
<h1 id="DataBindingComponent接口">DataBindingComponent接口</h1><p>在<code>build/intermediates/classes</code>下面，可以找到<code>DataBindingComponent</code>类，包名为<code>android.databinding</code>，全局只会有一个该类——此接口在编译时生成，包含了所有用到的实例BindingAdapters的getter方法。</p>
<p>当一个BindingAdapter是一个实例方法（instance method），一个实现该方法的类的实例必须被实例化。这个生成的接口会包含每个声明BindingAdapter的类/接口的get方法。命名冲突会简单地加一个数字前缀到get方法前来解决。</p>
<p>如果使用Dagger 2，开发者可以继承这个接口，并把继承的接口注解为Component。</p>
<p>对应的接口有：</p>
<ul>
<li><a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#setDefaultComponent(android.databinding.DataBindingComponent" target="_blank" rel="external">setDefaultComponent(DataBindingComponent)</a>)</li>
<li><a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#inflate(android.view.LayoutInflater, int, android.view.ViewGroup, boolean, android.databinding.DataBindingComponent" target="_blank" rel="external">inflate(LayoutInflater, int, ViewGroup, boolean, DataBindingComponent)</a>), inflate一个binding layout并返回新创建的binding</li>
<li><a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#bind(android.view.View, android.databinding.DataBindingComponent" target="_blank" rel="external">bind(View, DataBindingComponent)</a>), 根据给定的layout root返回binding，如果没有则创建</li>
</ul>
<p>第一个接口全局起作用，后两个接口仅对该语句inflate的布局起作用。</p>
<h1 id="创建Component">创建Component</h1><h2 id="声明抽象adapter">声明抽象adapter</h2><p>如果不需要实现多个Component，可以直接跳过这一步。</p>
<p>我们声明一个抽象的adapter，在其中写上抽象方法来设置我们想要做data binding的属性，这里我们直接干掉了TextView的android命名空间下的text和textColor两个属性。</p>
<p>这里的<code>@BindingAdapter</code>注解会让data binding在component中生成我们这个adapter的get方法（必须是非静态的）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BindingAdapter</span>(<span class="string">"android:text"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BindingAdapter</span>(<span class="string">"android:textColor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(TextView view, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现adapter">实现adapter</h2><p>我们继承<code>MyBindingAdapter</code>分别实现两个adapter:</p>
<p><code>ProductionBindingAdapter.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionBindingAdapter</span> <span class="keyword">extends</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        TextViewBindingAdapter.setText(view, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(TextView view, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        view.setTextColor(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>TestBindingAdapter.java:</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBindingAdapter</span> <span class="keyword">extends</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        view.setText(value + <span class="string">" test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(TextView view, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == view.getContext()</span><br><span class="line">                .getResources()</span><br><span class="line">                .getColor(R.color.textColorDay)) &#123;</span><br><span class="line">            view.setTextColor(view.getContext()</span><br><span class="line">                    .getResources()</span><br><span class="line">                    .getColor(R.color.textColorNight));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>前者使用的是原来的设置，后者则分别给text加上了” test”后缀，并做了color的转换，实现了字体颜色的“换肤”功能。</p>
<h2 id="实现component">实现component</h2><p>在写了上面的代码后，再看看<code>DataBindingComponent</code>，会发现里面多了一个接口方法，遂实现之:</p>
<p>生产环境Component:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionComponent</span> <span class="keyword">implements</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyBindingAdapter mAdapter = <span class="keyword">new</span> ProductionBindingAdapter();</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试环境Component:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComponent</span> <span class="keyword">implements</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyBindingAdapter mAdapter = <span class="keyword">new</span> TestBindingAdapter();</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="使用">使用</h1><h2 id="layout">layout</h2><p>原先的text和textColor属性并没有通过data binding设置，我们要给它们套上<code>@{}</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"50dp"</span></span><br><span class="line">    <span class="attribute">android:onClick</span>=<span class="value">"@&#123;presenter.onClickSimpleDemo&#125;"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"@&#123;@string/demo_simple&#125;"</span></span><br><span class="line">    <span class="attribute">android:textColor</span>=<span class="value">"@&#123;@color/textColorDay&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注入component">注入component</h2><p>注入Component很简单，我们做全局的注入只需要调用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (DemoApplication.isTest) &#123;</span><br><span class="line">    DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> ProductionComponent());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> TestComponent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="重新创建activity">重新创建activity</h2><p>由于点击事件在<code>MainActivity</code>创建后才触发，所以这个activity上并不会起作用，我们需要重新创建它:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickInjectDemo</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DemoApplication.isTest) &#123;</span><br><span class="line">        DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> ProductionComponent());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> TestComponent());</span><br><span class="line">    &#125;</span><br><span class="line">    DemoApplication.isTest = !DemoApplication.isTest;</span><br><span class="line">    recreate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>设置后<code>recreate()</code>即可。可以看demo工程的效果，点击最后的按钮后，字体颜色发生变化，textview的text后面都加上了test字符串。</p>
<h1 id="静态adapter方法">静态adapter方法</h1><p>那么静态的BindingAdapter方法怎么去和Component做关联呢？很简单，只需要作为方法的第一个参数就可以了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:src"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(TestComponent component,</span><br><span class="line">                             ImageView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结">结</h1><p>本篇我们实践了Data Binding中比较高级的特性：Component。</p>
<p>其使用场景很多，如：</p>
<ul>
<li>换肤</li>
<li>打点</li>
<li>替换原生属性</li>
<li>等等</li>
</ul>
<p>欢迎大家发挥自己的想象力，补充更多的使用场景。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一篇<a href="http://blog.zhaiyifan.cn/2016/07/06/android-new-project-from-0-p8/">从零开始的Android新项目8 - Data Binding高级篇</a>中，我们提到了使用Component来]]>
    </summary>
    
      <category term="Data Binding" scheme="http://blog.zhaiyifan.cn/tags/Data-Binding/"/>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目8 - Data Binding高级篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/07/06/android-new-project-from-0-p8/"/>
    <id>http://blog.zhaiyifan.cn/2016/07/06/android-new-project-from-0-p8/</id>
    <published>2016-07-06T02:59:39.000Z</published>
    <updated>2016-07-21T08:55:34.000Z</updated>
    <content type="html"><![CDATA[<p>承接<a href="http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/">上篇</a>，本篇继续讲解一些Data Binding更加进阶的内容，包括：列表绑定、自定义属性、双向绑定、表达式链、Lambda表达式、动画、Component注入（测试）等。</p>
<p>Demo源码库：<a href="https://github.com/markzhai/DataBindingSample" target="_blank" rel="external">DataBindingSample</a>。</p>
<h1 id="列表绑定">列表绑定</h1><p>App中经常用到列表展示，Data Binding在列表中一样可以扮演重要的作用，直接绑定数据和事件到每一个列表的item。</p>
<h2 id="RecyclerView">RecyclerView</h2><p>过去我们往往会使用ListView、GridView、或者GitHub上一些自定义的View来做瀑布流。自从RecyclerView出现后，我们有了新选择，只需要使用LayoutManager就可以。RecyclerView内置的垃圾回收，ViewHolder、ItemDecoration装饰器机制都让我们可以毫不犹豫地替换掉原来的ListView和GridView。</p>
<p>所以本篇仅拿RecyclerView做例子。</p>
<h2 id="Generic_Binding">Generic Binding</h2><p>我们只需要定义一个基类ViewHolder，就可以方便地使用上Data Binding:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingViewHolder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">ViewDataBinding</span>&gt; <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> T mBinding;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BindingViewHolder</span><span class="params">(T binding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(binding.getRoot());</span><br><span class="line">        mBinding = binding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Adapter可以直接使用该ViewHolder，或者再继承该ViewHolder，T使用具体Item的Binding类（以便直接访问内部的View）。至于Listener，可以在<code>onBindViewHolder</code>中进行绑定，做法类似于普通View，不做赘述。</p>
<p>由于同一个adapter未必只有一种ViewHolder，可能有好几种View type，所以在<code>onBindViewHolder</code>中，我们只能获取基类的ViewHolder类型，也就是<code>BindingViewHolder</code>，所以无法去做具体的set操作，如setEmployee。这时候就可以使用<code>setVariable</code>接口，然后通过BR来指定variable的name。</p>
<p>又比如我们可能有多重view type对应的xml，可以将对应的variable name全都写为item，这样可以避免强制转换Binding类去做set操作。类似地，监听器也能都统一取名为listener或者presenter。</p>
<h2 id="开源方案及其局限性">开源方案及其局限性</h2><p><a href="https://github.com/evant/binding-collection-adapter" target="_blank" rel="external">evant / binding-collection-adapter</a><br><a href="https://github.com/radzio/android-data-binding-recyclerview" target="_blank" rel="external">radzio / android-data-binding-recyclerview</a></p>
<p>均提供了简化的RV data binding方案。</p>
<p>前者可以直接在layout的RV上，设置对应的items和itemView进去，也支持多种view type，还能直接设定对应的LayoutManager。</p>
<p>后者类似地，提供了xml中直接绑定RV的items和itemView的功能。</p>
<p>相比来说前者的功能更强大一些。但这些开源库对应地都丧失了灵活性，ViewModel需要遵循规范，事件的绑定也比较死板，不如自己继承Adapter来得强大。唯一的好处也就是可以少写点代码了。</p>
<h1 id="自定义属性">自定义属性</h1><p>默认的android命名空间下，我们会发现并不是所有的属性都能直接通过data binding进行设置，比如margin，padding，还有自定义View的各种属性。</p>
<p>遇到这些属性，我们就需要自己去定义它们的绑定方法。</p>
<h2 id="Setter">Setter</h2><p>就像Data Binding会自动去查找get方法一下，在遇到属性绑定的时候，它也会去自动寻找对应的set方法。</p>
<p>拿DrawerLayout举一个例子:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v4.widget.DrawerLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">“wrap_content”</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">“wrap_content”</span></span><br><span class="line">    <span class="attribute">app:scrimColor</span>=<span class="value">“@&#123;@color</span>/<span class="attribute">scrimColor</span>&#125;”/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如此，通过使用app命名空间，data binding就会去根据属性名字找对应的set方法，scrimColor -&gt; setScrimColor:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScrimColor</span><span class="params">(@ColorInt <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">    mScrimColor = color;</span><br><span class="line">    invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果找不到的话，就会在编译期报错。</p>
<p>利用这种特性，对一些第三方的自定义View，我们就可以继承它，来加上我们的set函数，以对其使用data binding。</p>
<p>比如Fresco的<code>SimpleDraweeView</code>，我们想要直接在xml指定url，就可以加上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    view.setImageURI(TextUtils.isEmpty(url) ? <span class="keyword">null</span> : Uri.parse(url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这般，就能直接在xml中去绑定图片的url。这样是不是会比较麻烦呢，而且有一些系统的View，难道还要继承它们然后用自己实现的类？其实不然，我们还有其他方法可以做到自定义属性绑定。</p>
<h2 id="BindingMethods">BindingMethods</h2><p>如果View本身就支持这种属性的set，只是xml中的属性名字和java代码中的方法名不相同呢？难道就为了这个，我们还得去继承View，使代码产生冗余？</p>
<p>当然没有这么笨，这时候我们可以使用BindingMethods注释。</p>
<p>android:tint是给ImageView加上着色的属性，可以在不换图的前提下改变图标的颜色。如果我们直接对android:tint使用data binding，由于会去查找setTint方法，而该方法不存在，则会编译出错。而实际对应的方法，应该是<code>setImageTintList</code>。</p>
<p>这时候我们就可以使用BindingMethod指定属性的绑定方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingMethods</span>(&#123;</span><br><span class="line">       <span class="annotation">@BindingMethod</span>(type = “android.widget.ImageView”,</span><br><span class="line">                      attribute = “android:tint”,</span><br><span class="line">                      method = “setImageTintList”),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>我们也可以称BindingMethod为Setter重命名。</p>
<h2 id="BindingAdapter">BindingAdapter</h2><p>如果没有对应的set方法，或者方法签名不同怎么办？BindingAdapter注释可以帮我们来做这个。</p>
<p>比如View的android:paddingLeft属性，是没有对应的直接进行设置的方法的，只有setPadding(left, top, right, bottom)，而我们又不可能为了使用Data Binding去继承修改这种基础的View（即便修改了，还有一堆继承它的View呢）。又比如那些margin，需要修改必须拿到LayoutParams，这些都无法通过简单的set方法去做。</p>
<p>这时候我们可以使用BindingAdapter定义一个静态方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:paddingLeft"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPaddingLeft</span><span class="params">(View view, <span class="keyword">int</span> padding)</span> </span>&#123;</span><br><span class="line">    view.setPadding(padding,</span><br><span class="line">                    view.getPaddingTop(),</span><br><span class="line">                    view.getPaddingRight(),</span><br><span class="line">                    view.getPaddingBottom());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事实上这个Adapter已经由Data Binding实现好了，可以在android.databinding.adapters.ViewBindingAdapter看到有很多定义好的适配器，还有BindingMethod。如果需要自己再写点什么，仿照这些来写就好了。</p>
<p>我们还可以进行多属性绑定，比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(&#123;<span class="string">"bind:imageUrl"</span>, <span class="string">"bind:error"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(ImageView view, String url, Drawable error)</span> </span>&#123;</span><br><span class="line">   Picasso.with(view.getContext()).load(url).error(error).into(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>来使用Picasso读取图片到ImageView。</p>
<h2 id="BindingConversion">BindingConversion</h2><p>有时候我们想在xml中绑定的属性，未必是最后的set方法需要的，比如我们想用color（int），但是view需要Drawable，比如我们想用String，而view需要的是Url。这时候我们就可以使用<code>BindingConversion</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span></span><br><span class="line">    <span class="attribute">android:background</span>=<span class="value">“@&#123;isError</span> ? @<span class="attribute">color</span>/<span class="attribute">red</span> <span class="attribute">:</span> @<span class="attribute">color</span>/<span class="attribute">white</span>&#125;”</span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">“wrap_content”</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">“wrap_content”</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingConversion</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorDrawable <span class="title">convertColorToDrawable</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ColorDrawable(color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="双向绑定">双向绑定</h1><h2 id="自定义Listener">自定义Listener</h2><p>过去，我们需要自己定义Listener来做双向绑定:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:text</span>=<span class="value">“@&#123;user.name&#125;”</span></span><br><span class="line">    <span class="attribute">android:afterTextChanged</span>=<span class="value">“@&#123;callback.change&#125;”</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String text = s.toString();</span><br><span class="line">    <span class="keyword">if</span> (!text.equals(name.get()) &#123;</span><br><span class="line">        name.set(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要自己绑定afterTextChanged方法，然后检测text是否有改变，有改变则去修改observable。</p>
<h2 id="新方式_-_@=">新方式 - @=</h2><p>现在可以直接使用@=（而不是@）来进行双向绑定了，使用起来十分简单</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:inputType</span>=<span class="value">"textNoSuggestions"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"@=&#123;model.name&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，我们对这个EditText的输入，就会自动set到对应model的name字段上。</p>
<h2 id="原理">原理</h2><h3 id="InverseBindingListener">InverseBindingListener</h3><p><code>InverseBindingListener</code>是事件发生时触发的监听器:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InverseBindingListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onChange</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有双向绑定，最后都是通过这个接口来observable改变的，各种监听，比如TextWatcher、OnCheckedChange，都是间接通过这个接口来通知的，以上面的EditText为例子，最后生成的InverseBindingListener:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> android.databinding.InverseBindingListener mboundView1androidTe = <span class="keyword">new</span> android.databinding.InverseBindingListener() &#123;</span><br><span class="line">     <span class="annotation">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// Inverse of model.name</span></span><br><span class="line">         <span class="comment">//         is model.setName((java.lang.String) callbackArg_0)</span></span><br><span class="line">         java.lang.String callbackArg_0 = android.databinding.adapters.TextViewBindingAdapter.getTextString(mboundView1);</span><br><span class="line">         <span class="comment">// localize variables for thread safety</span></span><br><span class="line">         <span class="comment">// model != null</span></span><br><span class="line">         <span class="keyword">boolean</span> modelObjectnull = <span class="keyword">false</span>;</span><br><span class="line">         <span class="comment">// model</span></span><br><span class="line">         com.github.markzhai.sample.FormModel model = mModel;</span><br><span class="line">         <span class="comment">// model.name</span></span><br><span class="line">         java.lang.String nameModel = <span class="keyword">null</span>;</span><br><span class="line">         modelObjectnull = (model) != (<span class="keyword">null</span>);</span><br><span class="line">         <span class="keyword">if</span> (modelObjectnull) &#123;</span><br><span class="line">             model.setName((java.lang.String) (callbackArg_0));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="InverseBindingMethod_&amp;_InverseBindingAdapter">InverseBindingMethod &amp; InverseBindingAdapter</h3><p>上面的生成代码中，我们可以看到代码通过<code>TextViewBindingAdapter.getTextString(mboundView1)</code>去获得EditText中的字符串，查看源码可以看到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@InverseBindingAdapter</span>(attribute = <span class="string">"android:text"</span>, event = <span class="string">"android:textAttrChanged"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTextString</span><span class="params">(TextView view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view.getText().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原来跟上面的BindingMethod和BindingAdapter做set操作类似，双向绑定通过注解进行get操作。</p>
<p>完整的逻辑又是:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:text"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, CharSequence text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> CharSequence oldText = view.getText();</span><br><span class="line">    <span class="keyword">if</span> (text == oldText || (text == <span class="keyword">null</span> &amp;&amp; oldText.length() == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spanned) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.equals(oldText)) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// No change in the spans, so don't set anything.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!haveContentsChanged(text, oldText)) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// No content changes, so don't set anything.</span></span><br><span class="line">    &#125;</span><br><span class="line">    view.setText(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@InverseBindingAdapter</span>(attribute = <span class="string">"android:text"</span>, event = <span class="string">"android:textAttrChanged"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTextString</span><span class="params">(TextView view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view.getText().toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@BindingAdapter</span>(value = &#123;<span class="string">"android:beforeTextChanged"</span>, <span class="string">"android:onTextChanged"</span>,</span><br><span class="line">        <span class="string">"android:afterTextChanged"</span>, <span class="string">"android:textAttrChanged"</span>&#125;, requireAll = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTextWatcher</span><span class="params">(TextView view, <span class="keyword">final</span> BeforeTextChanged before,</span><br><span class="line">        <span class="keyword">final</span> OnTextChanged on, <span class="keyword">final</span> AfterTextChanged after,</span><br><span class="line">        <span class="keyword">final</span> InverseBindingListener textAttrChanged)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> TextWatcher newValue;</span><br><span class="line">    <span class="keyword">if</span> (before == <span class="keyword">null</span> &amp;&amp; after == <span class="keyword">null</span> &amp;&amp; on == <span class="keyword">null</span> &amp;&amp; textAttrChanged == <span class="keyword">null</span>) &#123;</span><br><span class="line">        newValue = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newValue = <span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (before != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    before.beforeTextChanged(s, start, count, after);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (on != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    on.onTextChanged(s, start, before, count);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (textAttrChanged != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    textAttrChanged.onChange();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (after != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    after.afterTextChanged(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> TextWatcher oldValue = ListenerUtil.trackListener(view, newValue, R.id.textWatcher);</span><br><span class="line">    <span class="keyword">if</span> (oldValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.removeTextChangedListener(oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.addTextChangedListener(newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们也可以使用InverseBindingMethod做到一样的效果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@InverseBindingMethods</span>(&#123;</span><br><span class="line">    <span class="annotation">@InverseBindingMethod</span>(</span><br><span class="line">    type=android.widget.TextView.class,</span><br><span class="line">    attribute=“android:text”,</span><br><span class="line">    method=“getText”,                   <span class="comment">// 默认会根据attribute name获取get</span></span><br><span class="line">    event=“android:textAttrChanged”)&#125;)  <span class="comment">// 默认根据attribute增加AttrChanged</span></span><br></pre></td></tr></table></figure></p>
<p>data binding通过<code>textAttrChanged</code>的event找到<code>setTextWatcher</code>方法，而<code>setTextWatcher</code>通知<code>InverseBindingListener</code>的<code>onChange</code>方法，onChange方法则使用找到的get和set方法去进行检查和更新。</p>
<h2 id="解决死循环">解决死循环</h2><p>如果仔细想想双向绑定的逻辑，用户输入导致实例事件发生，更新了实例的属性，实例的属性改变又会触发这个View的notify，从而变成了一个不断互相触发刷新的死循环。</p>
<p>为了解决死循环，我们需要做一个简单的检查，在上面的setText方法我们可以看到，如果两次的text没有改变，则会直接return，这样就杜绝了无限循环调用的可能。在自己做自定义双向绑定的时候，需要注意这点。</p>
<p>目前双向绑定仅支持如text，checked，year，month，hour，rating，progress等绑定。</p>
<h2 id="属性改变监听">属性改变监听</h2><p>如果除了更新Observable，我们还想做一些其他事情怎么办？比如根据输入内容更新标志位？<br>我们可以直接使用observable上的addOnPropertyChangedCallback方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mModel.addOnPropertyChangedCallback(<span class="keyword">new</span> Observable.OnPropertyChangedCallback() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPropertyChanged</span><span class="params">(Observable observable, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == BR.name) &#123;</span><br><span class="line">            Toast.makeText(TwoWayActivity.<span class="keyword">this</span>, <span class="string">"name changed"</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == BR.password) &#123;</span><br><span class="line">            Toast.makeText(TwoWayActivity.<span class="keyword">this</span>, <span class="string">"password changed"</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="表达式链">表达式链</h1><h2 id="重复的表达式">重复的表达式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;user.isAdult</span> ? <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;user.isAdult</span> ? <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">CheckBox</span> <span class="attribute">android:visibility</span>=<span class="value">"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以简化为:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:id</span>=<span class="value">“@+id</span>/<span class="attribute">avatar</span>”</span><br><span class="line"> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;user.isAdult</span> ? <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;avatar.visibility&#125;”</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">CheckBox</span> <span class="attribute">android:visibility</span>=<span class="value">"@&#123;avatar.visibility&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="隐式更新">隐式更新</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">CheckBox</span> <span class="attribute">android:id</span>=<span class="value">”@+id</span>/<span class="attribute">seeAds</span>“/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;seeAds.checked</span> ?</span><br><span class="line">  <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样CheckBox的状态变更后ImageView会自动改变visibility。</p>
<h1 id="Lambda表达式">Lambda表达式</h1><p>除了直接使用方法引用，在Presenter中写和OnClickListener一样参数的方法，我们还能使用Lambda表达式:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:onClick=“@&#123;(view)-&gt;presenter.save(view, item)&#125;”</span><br><span class="line">android:onClick=“@&#123;()-&gt;presenter.save(item)&#125;”</span><br><span class="line">android:onFocusChange=“@&#123;(v, fcs)-&gt;presenter.refresh(item)&#125;”</span><br></pre></td></tr></table></figure>
<p>我们还可以在lambda表达式引用view id（像上面表达式链那样），以及context。</p>
<h1 id="动画">动画</h1><h2 id="transition">transition</h2><p>使用data binding后，我们还能自动去做transition动画:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">binding.addOnRebindCallback(<span class="keyword">new</span> OnRebindCallback() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreBind</span><span class="params">(ViewDataBinding binding)</span> </span>&#123;</span><br><span class="line">        ViewGroup sceneRoot = (ViewGroup) binding.getRoot();</span><br><span class="line">        TransitionManager.beginDelayedTransition(sceneRoot);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这样，当我们的view发生改变，比如visibility变化的时候，就能看到一些transition动画。</p>
<h1 id="Component注入">Component注入</h1><p>如果我们想要利用data binding做一些测试功能怎么办？比如打点，记录一下东西:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@BindingAdapter</span>(“android:text”)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isTesting) &#123;</span><br><span class="line">            doTesting(view, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TextViewBindingAdapter.setText(view, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但如此一来，我们就要给所有的方法都写上if/else，维护起来很困难，也影响美感。</p>
<p>那么我们就可以使用component:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBindingAdapter</span> <span class="keyword">extends</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        doTesting(view, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComponent</span> <span class="keyword">implements</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyBindingAdapter mAdapter = <span class="keyword">new</span> TestBindingAdapter();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态的adapter怎么办呢，我们只需要把component作为第一个参数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(“android:src”)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(TestComponent component, ImageView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后通过<code>DataBindingUtil.setDefaultComponent(new TestComponent());</code>就能让data binding使用该Component提供的adapter方法。</p>
<h1 id="学习和使用建议">学习和使用建议</h1><h2 id="学习建议">学习建议</h2><ul>
<li>尽量在项目中进行尝试，只有在不断碰到业务的需求时，才会在真正的场景下使用并发现Data Binding的强大之处。</li>
<li>摸索xml和java的界限，不要以为Data Binding是万能的，而想尽办法把逻辑写在xml中，如果你的同事没法一眼看出这个表达式是做什么的，那可能它就应该放在Java代码中，以ViewModel的形式去承担部分逻辑。</li>
<li>Lambda表达式/测试时注入等Data Binding的高级功能也可以自己多试试，尤其是注入，相当强大。</li>
</ul>
<h2 id="使用建议">使用建议</h2><ul>
<li>对新项目，不要犹豫，直接上。</li>
<li>对于老的项目，可以替换ButterKnife这种库，从findViewById开始改造，逐渐替换老代码。</li>
<li>callback绑定只做事件传递，NO业务逻辑，比如转账</li>
<li>保持表达式简单（不要做过于复杂的字符串、函数调用操作）</li>
</ul>
<p>对于老项目，可以进行以下的逐步替换:</p>
<h3 id="Level_1_-_No_more_findViewById">Level 1 - No more findViewById</h3><p>逐步替换findViewById，取而代之地，使用binding.name, binding.age直接访问View。</p>
<h3 id="Level_2_-_SetVariable">Level 2 - SetVariable</h3><p>引入variable，把手动在代码对View进行set替换为xml直接引用variable。</p>
<h3 id="Level_3_-_Callback">Level 3 - Callback</h3><p>使用Presenter/Handler类来做事件的绑定。</p>
<h3 id="Level_4_-_Observable">Level 4 - Observable</h3><p>创建ViewModel类来进行即时的属性更新触发UI刷新。</p>
<h3 id="Level_5_-_双向绑定">Level 5 - 双向绑定</h3><p>运用双向绑定来简化表单的逻辑，将form data变成ObservableField。这样我们还可以在xml做一些酷炫的事情，比如button仅在所有field非空才为enabled（而过去要做到这个得加上好几个EditText的OnTextChange监听）。</p>
<h1 id="总结">总结</h1><p>本文上下两篇介绍了大部分data binding现存的特性及部分的实现原理，大家如果纯看而不实践的话，可能会觉得有些头大，建议还是通过项目进行一下实践，才能真正体会到data binding的强大之处。欢迎加入我们的QQ群（568863373）进行讨论，你也可以加我的微信（shin_87224330）一起学习。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>承接<a href="http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/">上篇</a>，本篇继续讲解一些Data Binding更加进阶的内容，包括：列表绑定、自定义属性、双向绑定、表达式链]]>
    </summary>
    
      <category term="Data Binding" scheme="http://blog.zhaiyifan.cn/tags/Data-Binding/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目7 - Data Binding入门篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/"/>
    <id>http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/</id>
    <published>2016-06-15T16:19:00.000Z</published>
    <updated>2016-07-08T08:04:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="引">引</h1><p>Data Binding自从去年的Google I/O发布到至今，也有近一年的时间了。这一年来，从Beta到如今比较完善的版本，从Android Studio 1.3到如今2.1.2的支持，可以说Data Binding已经是一个可用度较高，也能带来实际生产力提升的技术了。</p>
<p>然而事实上，真正使用到Data Binding的公司、项目仍然是比较少的。可能是出于稳定性考虑，亦或是对Data Binding技术本身不够熟悉，又或许对新技术没什么追求。</p>
<p>我司在新的产品中就全面使用了Data Binding技术，无论是我，还是新来直接面对Data Binding上手的工程师也好，都对其爱不释手，用惯了后简直停不下来。</p>
<p>希望在看完本文的介绍后，会有更多的朋友产生兴趣，来使用Data Binding，参与它的讨论。</p>
<p>Demo源码库：<a href="https://github.com/markzhai/DataBindingSample" target="_blank" rel="external">DataBindingSample</a></p>
<h2 id="什么是Data_Binding">什么是Data Binding</h2><p>Data Binding，顾名思义，数据绑定，是Google对MVVM在Android上的一种实现，可以直接绑定数据到xml中，并实现自动刷新。现在最新的版本还支持双向绑定，尽管使用场景不是那么多。</p>
<p>Data Binding可以提升开发效率（节省很多以往需要手写的java代码），性能高（甚至超越手写代码），功能强（强大的表达式支持）。</p>
<h2 id="用途">用途</h2><ul>
<li>去掉Activities &amp; Fragments内的大部分UI代码（setOnClickListener, setText, findViewById, etc.)</li>
<li>XML变成UI的唯一真实来源</li>
<li>减少定义view id的主要用途（数据绑定直接发生在xml）</li>
</ul>
<h2 id="开源方案">开源方案</h2><ul>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a>, Jake大神的知名库了，可以少些很多findViewById，setOnClickListener，取而代之地用annotation去生成代码。</li>
<li><a href="http://androidannotations.org/" target="_blank" rel="external">Android Annotations</a>，同样通过annotation，大量的annotation，侵入性较强，需要遵循其规范写一些代码，像是@AfterViews注释中才能对View进行操作。</li>
<li><a href="http://robobinding.github.io/RoboBinding" target="_blank" rel="external">RoboBinding</a>，和Data Binding最相似的一个方案，同样很多事情放在xml去做了，使用了aspectJ去做生成。</li>
</ul>
<p>除了这些比较有名的，还有很多各不相同的方案，但自从data binding发布后，可以说它们都再也没有用武之地了，因为无论从性能、功能，还是ide的支持上，data binding都更好。</p>
<h2 id="优势">优势</h2><ul>
<li>UI代码放到了xml中，布局和数据更紧密</li>
<li>性能超过手写代码</li>
<li>保证执行在主线程</li>
</ul>
<h2 id="劣势">劣势</h2><ul>
<li>IDE支持还不那么完善（提示、表达式）</li>
<li>报错信息不那么直接</li>
<li>重构支持不好（xml中进行重构，java代码不会自动修改）</li>
</ul>
<h1 id="使用">使用</h1><p>使用起来实在很简单，在app模块的build.gradle中加上几行代码就行了。</p>
<h2 id="Gradle">Gradle</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    …</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="layout_tag">layout tag</h2><p>把一个普通的layout变成data binding layout也只要几行的修改:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layout</span>&gt;</span></span><br><span class="line">	// 原来的layout</span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在xml的最外层套上layout标签即可，修改后就可以看到生成了该布局对应的*Binding类。</p>
<h2 id="Binding生成规则">Binding生成规则</h2><p>默认生成规则：xml通过文件名生成，使用下划线分割大小写。<br>比如activity_demo.xml，则会生成ActivityDemoBinding，item_search_hotel则会生成ItemSearchHotelBinding。</p>
<p>view的生成规则类似，只是由于是类变量，首字母不是大写，比如有一个TextView的id是first_name，则会生成名为firstName的TextView。</p>
<p>我们也可以自定义生成的class名字，只需要：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span> <span class="attribute">class</span>=<span class="value">“ContactItem”</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样生成的类就会变成<code>ContactItem</code>。</p>
<h1 id="基础用法">基础用法</h1><h2 id="生成Binding实例">生成Binding实例</h2><p>所有Binding实例的生成都可以通过<code>DataBindingUtil</code>进行，方法名与该view的原inflate方法一致，如activity仍然为setContentView，只是增加了参数因为需要获得activity。</p>
<h2 id="去除findViewById">去除findViewById</h2><p>使用了Data Binding后，我们再也不需要findViewById，因为一切有id的view，都已经在Binding类中被初始化完成了，只需要直接通过binding实例访问即可。</p>
<h2 id="变量绑定">变量绑定</h2><p>使用data标签，我们就可以在xml中申明变量，在其中使用该变量的field，并通过binding实例set进来。</p>
<p>如:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span></span><br><span class="line">        <span class="attribute">name</span>=<span class="value">"employee"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"com.github.markzhai.databindingsample.Employee"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:gravity</span>=<span class="value">"center_horizontal"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">    <span class="attribute">tools:context</span>=<span class="value">".DemoActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"@&#123;employee.lastName&#125;"</span></span><br><span class="line">        <span class="attribute">android:layout_marginLeft</span>=<span class="value">"5dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们就可以在java代码中使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">binding.setEmployee(employee);</span><br><span class="line"><span class="comment">// 或者直接通过setVariable</span></span><br><span class="line">binding.setVariable(BR.employee, employee);</span><br></pre></td></tr></table></figure></p>
<h2 id="事件绑定">事件绑定</h2><p>严格意义上来说，事件绑定也是一种变量绑定。我们可以在xml中直接绑定</p>
<ul>
<li>android:onClick</li>
<li>android:onLongClick</li>
<li>android:onTextChanged</li>
<li>…</li>
</ul>
<h3 id="方法引用">方法引用</h3><p>通常会在java代码中定义一个名为Handler或者Presenter的类，然后set进来，方法签名需和对应listener方法一致。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layout</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attribute">xmlns:bind</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.view.View"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">variable</span></span><br><span class="line">            <span class="attribute">name</span>=<span class="value">"employee"</span></span><br><span class="line">            <span class="attribute">type</span>=<span class="value">"com.github.markzhai.databindingsample.Employee"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">variable</span></span><br><span class="line">            <span class="attribute">name</span>=<span class="value">"presenter"</span></span><br><span class="line">            <span class="attribute">type</span>=<span class="value">"com.github.markzhai.databindingsample.DemoActivity.Presenter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:gravity</span>=<span class="value">"center_horizontal"</span></span><br><span class="line">        <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">        <span class="attribute">tools:context</span>=<span class="value">".DemoActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:hint</span>=<span class="value">"输入 First Name"</span></span><br><span class="line">            <span class="attribute">android:onTextChanged</span>=<span class="value">"@&#123;presenter::onTextChanged&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:onClick</span>=<span class="value">"@&#123;presenter.onClick&#125;"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"@&#123;employee.firstName&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Java代码中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    binding.setPresenter(<span class="keyword">new</span> Presenter());</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Presenter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        employee.setFirstName(s.toString());</span><br><span class="line">        employee.setFired(!employee.isFired.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(DemoActivity.<span class="keyword">this</span>, <span class="string">"点到了"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="监听器绑定（lambda）">监听器绑定（lambda）</h3><p>可以不遵循默认的方法签名：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_margin</span>=<span class="value">"5dp"</span></span><br><span class="line">    <span class="attribute">android:visibility</span>=<span class="value">"@&#123;employee.isFired ? View.GONE : View.VISIBLE&#125;"</span></span><br><span class="line">    <span class="attribute">android:onClick</span>=<span class="value">"@&#123;() -&gt; presenter.onClickListenerBinding(employee)&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Presenter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickListenerBinding</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(DemoActivity.<span class="keyword">this</span>, employee.getLastName(),</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Data_Binding原理">Data Binding原理</h1><h2 id="狭义原理">狭义原理</h2><p>狭义上，我们可以直接通过调用的接口以及生成的一些类，来观察其工作原理。</p>
<p>作为切入口，我们来看看DataBindingUtil的接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">setContentView</span><span class="params">(Activity activity, <span class="keyword">int</span> layoutId,</span><br><span class="line">        DataBindingComponent bindingComponent)</span> </span>&#123;</span><br><span class="line">    activity.setContentView(layoutId);</span><br><span class="line">    View decorView = activity.getWindow().getDecorView();</span><br><span class="line">    ViewGroup contentView = (ViewGroup) decorView.findViewById(android.R.id.content);</span><br><span class="line">    <span class="keyword">return</span> bindToAddedViews(bindingComponent, contentView, <span class="number">0</span>, layoutId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">bindToAddedViews</span><span class="params">(DataBindingComponent component,</span><br><span class="line">        ViewGroup parent, <span class="keyword">int</span> startChildren, <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> endChildren = parent.getChildCount();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childrenAdded = endChildren - startChildren;</span><br><span class="line">    <span class="keyword">if</span> (childrenAdded == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> View childView = parent.getChildAt(endChildren - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> bind(component, childView, layoutId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> View[] children = <span class="keyword">new</span> View[childrenAdded];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenAdded; i++) &#123;</span><br><span class="line">            children[i] = parent.getChildAt(i + startChildren);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bind(component, children, layoutId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，然后会跑到具体Binding类中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ItemFeedRecommendUserBinding</span><span class="params">(android.databinding.DataBindingComponent bindingComponent, View root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(bindingComponent, root, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">final</span> Object[] bindings = mapBindings(bindingComponent, root, <span class="number">5</span>, sIncludes, sViewsWithIds);</span><br><span class="line">    <span class="keyword">this</span>.mboundView0 = (android.widget.LinearLayout) bindings[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.mboundView0.setTag(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.recommendUserFirst = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">this</span>.recommendUserFourth = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">this</span>.recommendUserSecond = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">this</span>.recommendUserThird = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">3</span>];</span><br><span class="line">    setRootTag(root);</span><br><span class="line">    <span class="comment">// listeners</span></span><br><span class="line">    invalidateAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到所有view是一次完成的初始化，比起一个个进行findViewById，显然这样一次性会更快。</p>
<p>除了view的初始化，在<code>executeBindings</code>中，会通过<code>mDirtyFlags</code>去判断各个field是否需要更新，而其置位则通过各个set函数去更新。</p>
<h2 id="流程原理">流程原理</h2><p><img src="/images/android-new-project-from-0-db-1.png" alt="data binding"></p>
<p>处理layout文件 -&gt; 变为没有data binding的layout文件<br>解析表达式 -&gt; 确保表达式语法正确<br>解析依赖 -&gt; user.isAdmin, isAdmin是field还是method…<br>Setter -&gt; 如visibility</p>
<h2 id="性能">性能</h2><ul>
<li>0反射</li>
<li>findViewById需要遍历整个viewgroup，而现在只需要做一次就可以初始化所有需要的view</li>
<li>使用位标记来检验更新（dirtyFlags）</li>
<li>数据改变在下一次批量更新才会触发操作</li>
<li>表达式缓存，同一次刷新中不会重复计算</li>
</ul>
<h1 id="进阶用法">进阶用法</h1><h2 id="表达式">表达式</h2><ul>
<li>算术 + - / * %</li>
<li>字符串合并 +</li>
<li>逻辑 &amp;&amp; ||</li>
<li>二元 &amp; | ^</li>
<li>一元 + - ! ~</li>
<li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>
<li>比较 == &gt; &lt; &gt;= &lt;=</li>
<li>Instanceof</li>
<li>Grouping ()</li>
<li>文字 - character, String, numeric, null</li>
<li>Cast</li>
<li>方法调用</li>
<li>Field 访问</li>
<li>Array 访问 []</li>
<li>三元 ?:</li>
</ul>
<p>尚且不支持this, super, new, 以及显示的泛型调用。</p>
<p>值得一提的是还有空合并运算符，如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=“@&#123;user.displayName ?? user.lastName&#125;”</span><br></pre></td></tr></table></figure></p>
<p>会取第一个非空值作为结果。</p>
<p>这里举一个常见的例子，某个view的margin是其左侧ImageView的margin加上该ImageView的宽度，以往我们可能需要再定义一个dimension来放这两个值的合，现在只需要<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:marginLeft="@&#123;@dimen/margin + @dimen/avatar_size&#125;"</span><br></pre></td></tr></table></figure></p>
<p>就搞定了。</p>
<p>我们甚至还可以直接组合字符串，如:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;@string/nameFormat(firstName, lastName)&#125;"</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"nameFormat"</span>&gt;</span>%s, %s<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="避免空指针">避免空指针</h2><p>data binding会自动帮助我们进行空指针的避免，比如说@{employee.firstName}，如果employee是null的话，employee.firstName则会被赋默认值（null）。int的话，则是0。</p>
<p>需要注意的是数组的越界，毕竟这儿是xml而不是java，没地方让你去判断size的。</p>
<h2 id="include">include</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">“@layout</span>/<span class="attribute">name</span>” <span class="attribute">bind:user</span>=<span class="value">"@&#123;user&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于include的布局，使用方法类似，不过需要在里面绑定两次，外面include该布局的layout使用<code>bind:user</code>给set进去。</p>
<p>这里需要注意的一点是，被include的布局必须顶层是一个ViewGroup，目前Data Binding的实现，如果该布局顶层是一个View，而不是ViewGroup的话，binding的下标会冲突（被覆盖），从而产生一些预料外的结果。</p>
<h2 id="ViewStubs">ViewStubs</h2><p>ViewStub比较特殊，在被实际inflate前是不可见的，所以使用了特殊的方案，用了final的<code>ViewStubProxy</code>来代表它，并监听了<code>ViewStub.OnInflateListener</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> OnInflateListener mProxyListener = <span class="keyword">new</span> OnInflateListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInflate</span><span class="params">(ViewStub stub, View inflated)</span> </span>&#123;</span><br><span class="line">        mRoot = inflated;</span><br><span class="line">        mViewDataBinding = DataBindingUtil.bind(mContainingBinding.mBindingComponent,</span><br><span class="line">                inflated, stub.getLayoutResource());</span><br><span class="line">        mViewStub = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mOnInflateListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mOnInflateListener.onInflate(stub, inflated);</span><br><span class="line">            mOnInflateListener = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mContainingBinding.invalidateAll();</span><br><span class="line">        mContainingBinding.forceExecuteBindings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在onInflate的时候才会进行真正的初始化。</p>
<h2 id="Observable">Observable</h2><p>一个纯净的Java ViewModel类被更新后，并不会让UI去更新。而数据绑定后，我们当然会希望数据变更后UI会即时刷新，Observable就是为此而生的概念。</p>
<h3 id="BaseObservable">BaseObservable</h3><p>类继承BaseObservable:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String firstName;</span><br><span class="line">   <span class="keyword">private</span> String lastName;</span><br><span class="line">   <span class="annotation">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="annotation">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">       notifyPropertyChanged(BR.firstName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">       notifyPropertyChanged(BR.lastName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BaseObservable提供了一系列notify函数（其实就是notifyChange和notifyPropertyChanged），前者会刷新所有的值域，后者则只更新对应BR的flag，该BR的生成通过注释@Bindable生成，在上面的实例代码中，我们可以看到两个get方法被注释上了，所以我们可以通过BR访问到它们并进行特定属性改变的notify。</p>
<h3 id="Observable_Fields">Observable Fields</h3><p>如果所有要绑定的都需要创建Observable类，那也太麻烦了。所以Data Binding还提供了一系列Observable，包括 ObservableBoolean, ObservableByte, ObservableChar, ObservableShort, ObservableInt, ObservableLong, ObservableFloat, ObservableDouble, 和ObservableParcelable。我们还能通过ObservableField泛型来申明其他类型，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; firstName =</span><br><span class="line">       <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; lastName =</span><br><span class="line">       <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableInt age = <span class="keyword">new</span> ObservableInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在xml中，使用方法和普通的String，int一样，只是会自动刷新，但在java中访问则会相对麻烦：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.firstName.set(<span class="string">"Google"</span>);</span><br><span class="line"><span class="keyword">int</span> age = user.age.get();</span><br></pre></td></tr></table></figure></p>
<p>相对来说，每次要get/set还是挺麻烦，私以为还不如直接去继承BaseObservable。</p>
<h3 id="Observable_Collections">Observable Collections</h3><p>有一些应用使用更动态的结构来保存数据，这时候我们会希望使用Map来存储数据结构。Observable提供了<code>ObservableArrayMap</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayMap&lt;String, Object&gt; user = <span class="keyword">new</span> ObservableArrayMap&lt;&gt;();</span><br><span class="line">user.put(<span class="string">"firstName"</span>, <span class="string">"Google"</span>);</span><br><span class="line">user.put(<span class="string">"lastName"</span>, <span class="string">"Inc."</span>);</span><br><span class="line">user.put(<span class="string">"age"</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure></p>
<p>而在xml中，我们可以直接通过下标key访问它们：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.databinding.ObservableMap"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"ObservableMap&amp;lt;String, Object&gt;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;user["lastName"]&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;String.valueOf(1 + (Integer)user["age"])&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当我们不想定义key的时候，可以使用<code>ObservableArrayList</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayList&lt;Object&gt; user = <span class="keyword">new</span> ObservableArrayList&lt;&gt;();</span><br><span class="line">user.add(<span class="string">"Google"</span>);</span><br><span class="line">user.add(<span class="string">"Inc."</span>);</span><br><span class="line">user.add(<span class="number">17</span>);</span><br></pre></td></tr></table></figure>
<p>layout中直接通过数字下标进行访问。</p>
<h2 id="动态变量">动态变量</h2><p>有时候，我们并不知道具体生成的binding类是什么。比如在RecyclerView中，可能有多种ViewHolder，而我们拿到的holder只是一个基类（这个基类具体怎么写下篇中会提到），这时候，我们可以在这些item的layout中都定义名字同样的variable，比如item，然后直接调用<code>setVariable</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BindingHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> T item = mItems.get(position);</span><br><span class="line">   holder.getBinding().setVariable(BR.item, item);</span><br><span class="line">   holder.getBinding().executePendingBindings();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>executePendingBindings会强制立即刷新绑定的改变。</p>
<h1 id="参考资料">参考资料</h1><p><a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="external">https://developer.android.com/topic/libraries/data-binding/index.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="引">引</h1><p>Data Binding自从去年的Google I/O发布到至今，也有近一年的时间了。这一年来，从Beta到如今比较完善的版本，从Android Studio 1.3到如今2.1.2的支持，可以说Data Binding已经是一个可用度较高]]>
    </summary>
    
      <category term="Data Binding" scheme="http://blog.zhaiyifan.cn/tags/Data-Binding/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目6 - Repository层(下) Realm、缓存、异常处理]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/05/15/android-new-project-from-0-p6/"/>
    <id>http://blog.zhaiyifan.cn/2016/05/15/android-new-project-from-0-p6/</id>
    <published>2016-05-15T07:32:55.000Z</published>
    <updated>2016-05-19T02:35:42.000Z</updated>
    <content type="html"><![CDATA[<p>承接上篇 <a href="http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/">从零开始的Android新项目5 - Repository层(上) Retrofit、Repository组装</a>，本文继续介绍Realm、缓存，以及统一的异常处理设计。</p>
<h1 id="Realm">Realm</h1><p><a href="https://realm.io/" target="_blank" rel="external">Realm</a>在移动端数据库中也算是比较有名的一款了，以其跨平台和惊人的速度而闻名。啊，对了，还有文档多。</p>
<p>这里要黑的就是文档问题，Realm虽然乍一看文档很多，但是老实说，写的挺乱的。不过总体来说，实践和应用中感觉还不错，性能好，也比较方便，比起不稳定的DBFlow和麻烦至极的GreenDao来好了太多了，唯一的美中不足就是so比较大，会增大包的体积1MB。</p>
<h2 id="引入">引入</h2><p>从Realm 0.90开始，用法与之前有了改变：</p>
<p>在root的build.gralde中:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"io.realm:realm-gradle-plugin:0.90.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在对应需要应用到Realm的，比如data module的build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'realm-android'</span></span><br></pre></td></tr></table></figure></p>
<p>即可使用Realm。</p>
<h2 id="使用">使用</h2><p>使用起来也很方便，比如我们想要缓存用户的信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPo</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String headerUrl;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就对应了一个表，其主键为id，另外有3列name, headerUrl, 以及updateTime。</p>
<p>如果想要查询，只需要：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserPo user = getRealm().where(UserPo.class)</span><br><span class="line">        .equalTo(<span class="string">"id"</span>, userId)</span><br><span class="line">        .findFirst();</span><br></pre></td></tr></table></figure>
<p>如果要写入一条记录：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> UserPo();</span><br><span class="line">user.setName(userInfoEntity.getNickName());</span><br><span class="line">user.setId(userInfoEntity.getUserId());</span><br><span class="line">user.setHeaderUrl(userInfoEntity.getHeaderImageUrl());</span><br><span class="line">user.setUpdateTime(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">getRealm().beginTransaction();</span><br><span class="line">getRealm().copyToRealmOrUpdate(user);</span><br><span class="line">getRealm().commitTransaction();</span><br></pre></td></tr></table></figure></p>
<p>就是这么简单。</p>
<p>如果想要直接和Retrofit一起应用，去进行串行化，可以参考该<a href="https://gist.github.com/cmelchior/ddac8efd018123a1e53a" target="_blank" rel="external">Gist</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合 Realm, Retrofit 和 RxJava (使用了Retrolambda以简化符号)的例子。</span></span><br><span class="line"><span class="comment">// 读取所有Person，然后与从GitHub获取的最新状态merge到一起</span></span><br><span class="line">Realm realm = Realm.getDefaultInstance();</span><br><span class="line">GitHubService api = retrofit.create(GitHubService.class);</span><br><span class="line">realm.where(Person.class).isNotNull(<span class="string">"username"</span>).findAllAsync().asObservable()</span><br><span class="line">    .filter(persons.isLoaded)</span><br><span class="line">    .flatMap(persons -&gt; Observable.from(persons))</span><br><span class="line">    .flatMap(person -&gt; api.user(person.getGithubUserName())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(user -&gt; showUser(user));</span><br></pre></td></tr></table></figure>
<p>更多详情可以去<a href="https://realm.io/docs/java/latest/" target="_blank" rel="external">官网</a>看，migration/relationship等等支持应有尽有，我只能说，文档实在太长太长了。</p>
<h1 id="内存">内存</h1><p>内存，也就是直接使用变量存储在对应repository中，如果非空则优先直接返回内存中的变量。</p>
<h2 id="LruCache">LruCache</h2><p>LruCache限定了最大的entry数量，近期最少使用算法保证了淘汰机制的合理性。使用场景如用户信息缓存，会淘汰那些最近没有访问过的用户的信息缓存。使用可参考Google官网：<a href="https://developer.android.com/reference/android/util/LruCache.html" target="_blank" rel="external">LruCache</a>。</p>
<h2 id="变量存储">变量存储</h2><p>变量存储很简单，直接在Repository实现类中直接变量存储上一次的返回结果，在下一次请求的时候优先使用内存缓存。使用场景如请求后直接刷新本地的变量，下次调用repository方法使用啊concat先返回内存里的变量，然后再使用网络数据进行刷新。</p>
<h1 id="统一异常处理">统一异常处理</h1><p>作为Repository层，本身不会，也不应该去处理任何异常和错误（比如请求的错误码），一切都将作为Exception异常抛给上层去做统一处理，而RxJava的onError机制也帮助我们能优雅地去做这件事。</p>
<h2 id="Observable-error">Observable.error</h2><p>类似在上一篇中提到的方法，我们可以使用Observable.error返回异常，供上层根据该异常做对应处理。无论是网络异常，数据库异常，亦或是服务器response异常等等，都可以进行分类创建对应的Exception类，抛给上层。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">extractData</span><span class="params">(Observable&lt;MrResponse&gt; observable, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> observable.flatMap(response -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> NetworkConnectionException());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.getStatusCode() == ResponseException.STATUS_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.just(mGson.fromJson(mGson.toJson(response.data), clazz));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.e(TAG, response.data);</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> ResponseException(response));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Subscriber-onError">Subscriber.onError</h2><p>我们使用Subscriber的基类来处理通用错误，其他所有Subscriber继承它:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MrSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">DefaultSubscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onError(e);</span><br><span class="line">       <span class="keyword">if</span> (!handleCommonResponseError((Exception) e)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.getMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">               Logger.w(TAG, e.getMessage());</span><br><span class="line">           &#125;</span><br><span class="line">           showErrorMessage(<span class="keyword">new</span> DefaultErrorBundle((Exception) e));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showErrorMessage</span><span class="params">(ErrorBundle errorBundle)</span> </span>&#123;</span><br><span class="line">    String errorMessage = ErrorMessageFactory.create(<span class="keyword">this</span>, errorBundle.getException());</span><br><span class="line">    showErrorMessage(errorMessage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showErrorMessage</span><span class="params">(String errorMessage)</span> </span>&#123;</span><br><span class="line">    ToastUtils.show(<span class="keyword">this</span>, errorMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>DefaultErrorBundle</code>是exception的wrapper，管理了其错误。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorBundle</span> <span class="keyword">implements</span> <span class="title">ErrorBundle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ERROR_MSG = <span class="string">"Unknown error"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Exception exception;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultErrorBundle</span><span class="params">(Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exception = exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exception <span class="title">getException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (exception != <span class="keyword">null</span>) ? <span class="keyword">this</span>.exception.getMessage() : DEFAULT_ERROR_MSG;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ErrorMessageFactory</code>是错误消息工厂，根据exception创建对应的错误消息提示，让用户不至于碰到错误莫名其妙。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Factory used to create error messages from an Exception as a condition.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorMessageFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ErrorMessageFactory"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ErrorMessageFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates a String representing an error message.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> context   Context needed to retrieve string resources.</span><br><span class="line">     * <span class="doctag">@param</span> exception An exception used as a condition to retrieve the correct error message.</span><br><span class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125; an error message.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">create</span><span class="params">(Context context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(exception.getMessage())) &#123;</span><br><span class="line">            Logger.e(TAG, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String message = context.getString(R.string.exception_message_generic);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> NetworkConnectionException) &#123;</span><br><span class="line">            message = context.getString(R.string.exception_message_no_connection);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> NotFoundException) &#123;</span><br><span class="line">            message = context.getString(R.string.exception_message_not_found);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ResponseException) &#123;</span><br><span class="line">            message = exception.getMessage();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> HttpException) &#123;</span><br><span class="line">            message = exception.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="handleCommonResponseError">handleCommonResponseError</h3><p>通常，服务器会返回错误信息，我们需要根据一些code进行对应处理，MrSubscriber的onError就调用了<code>handleCommonResponseError</code>来处理这些通用错误：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">handleCommonResponseError</span><span class="params">(Exception exception)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ResponseException) &#123;</span><br><span class="line">        ResponseException responseException = (ResponseException) exception;</span><br><span class="line">        <span class="keyword">switch</span> (responseException.getStatusCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> ResponseException.ERROR_CODE_NEED_LOGIN:</span><br><span class="line">                handled = <span class="keyword">true</span>;</span><br><span class="line">                getUserSystem().setVuser(<span class="string">""</span>);</span><br><span class="line">                getNavigator().navigateToLoginPage(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ResponseException.ERROR_CODE_NEED_PERFECT_PROFILE:</span><br><span class="line">                handled = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (responseException.getVuser() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    getUserSystem().setVuser(responseException.getVuser().getVuser());</span><br><span class="line">                &#125;</span><br><span class="line">                getNavigator().navigateToPerfectProfile(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ResponseException.ERROR_CODE_NEED_THIRD_PARTY_BIND:</span><br><span class="line">                handled = <span class="keyword">true</span>;</span><br><span class="line">                getNavigator().navigateToThirdPartyBind(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Log_&amp;_上报">Log &amp; 上报</h3><p>出错了当然要上报啦，bugly、友盟，本地写文件打zip包上传，Logger做的就是写文件log了，这些常见的app都会去做，这里就不赘述了。</p>
<h1 id="总结和下集预告">总结和下集预告</h1><p>本系列两篇文章描述了Android项目中，Repository层的设计与实现，也可以理解它为data或者model层。一个好的Repository层和上层相对独立，内聚完成业务逻辑的数据部分，即便内部有修改，比如添加了缓存，对外仍然保持一致。而好的异常处理设计一方面让代码中不会充斥着杂七杂八的 try &amp; catch，另一方，恰当的错误展示也让用户知道究竟出了什么错，不至于莫名其妙。</p>
<p>下一次不知是何时相见，希望能为大家带来我们项目中使用React Native进行混合开发的苦与甜。</p>
<p><strong>另外，打个小广告，本司的新产品Crew已经在各大Android应用市场上线，专注于职场垂直社交。一搜和兴趣相投的人聊天。iOS版本正在审核中。</strong></p>
<p><em>2个字找到志趣相投的职场伙伴，秒搜陌生人同类，智能自动破冰。多关键字叠加，高效率锁定职场同僚。精准匹配兴趣对象，超轻聊天，更能一键组建群聊，加入一群人的狂欢。</em></p>
<p>demo没空写了，反正我也没混淆，直接反编译来黑我吧。哈哈。有bug或者功能上的意见建议欢迎直接反馈给我。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>承接上篇 <a href="http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/">从零开始的Android新项目5 - Repository层(上) Retrofit、Repository组装]]>
    </summary>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Realm" scheme="http://blog.zhaiyifan.cn/tags/Realm/"/>
    
      <category term="Repository" scheme="http://blog.zhaiyifan.cn/tags/Repository/"/>
    
      <category term="异常处理" scheme="http://blog.zhaiyifan.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目5 - Repository层(上) Retrofit、Repository组装]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/</id>
    <published>2016-04-30T03:14:49.000Z</published>
    <updated>2016-07-06T09:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>如期而至的Repository篇，内部实现则由Realm、Retrofit，以及内存级LruCache组成。<br>Repository，顾名思义，即仓库，向上层屏蔽了数据来源和内部实现细节，不需要了解货物来源，只需要拿走就行了。</p>
<p>由于篇幅问题，将分为上下两篇，本篇主要介绍Retrofit的应用和Repository层组装，下篇会讲解本地缓存（包括Realm和内存缓存）以及基于异常的设计。</p>
<h1 id="Why_Repository">Why Repository</h1><p>首先，为什么我们需要Repository层呢？一言以蔽之，屏蔽细节。</p>
<p>上层（activity/fragment/presenter）不需要知道数据的细节（或者说 - 数据源），来自于网络、数据库，亦或是内存等等。如此，一来上层可以不用关心细节，二来底层可以根据需求修改，不会影响上层，两者的分离用可以帮助协同开发。</p>
<p>举些例子：</p>
<ul>
<li>当现在是无网状态，我希望列表能直接显示上一次的数据，而不会是空页面。</li>
<li>除非好友的用户数据过期（比如超过一天），否则希望直接使用本地缓存中的，但如果缓存没有，或者过期，则需要拉取并更新。</li>
<li>点赞后，即便请求还没发送或者没有收到response，仍然希望显示点赞后的状态。<br>等等。</li>
</ul>
<p>如果这些需求，我们都要实现在View或者Presenter中，就会导致充斥大量数据逻辑，目的不单一，难以维护。而Repository层就是来封装这些逻辑的。</p>
<h1 id="Overview">Overview</h1><p>如图，业务层只能看到repository接口。</p>
<p><img src="http://blog.zhaiyifan.cn/images/android-new-project-from-0-repository-1.png" alt="Repository Overview"></p>
<h1 id="Retrofit">Retrofit</h1><p><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a>是Android界网红公司<a href="https://squareup.com/" target="_blank" rel="external">Square</a>所开发维护的一个HTTP网络库，目前最新版本是2.0.2（截止2016年4月30日）。其内部使用了自家的<a href="https://github.com/square/okhttp" target="_blank" rel="external">OkHttp</a>。</p>
<p>关于Retrofit的实现机制啊简介的，网上已经很多了，这里我就不啰嗦了，官方文档见<a href="http://square.github.io/retrofit/" target="_blank" rel="external">项目主页</a>。这里主要讲讲实际项目中的应用实践。</p>
<h2 id="import">import</h2><p>root build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> retrofitVersion = <span class="string">"2.0.2"</span></span><br><span class="line"><span class="keyword">def</span> okHttpVersion = <span class="string">'3.2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>.ext &#123;</span><br><span class="line">    libRetrofit = <span class="string">"com.squareup.retrofit2:retrofit:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitConverterGson = <span class="string">"com.squareup.retrofit2:converter-gson:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitAdapterRxJava = <span class="string">"com.squareup.retrofit2:adapter-rxjava:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libOkHttpLoggingInterceptor = <span class="string">"com.squareup.okhttp3:logging-interceptor:$&#123;okHttpVersion&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>repository module的build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofit</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofitConverterGson</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofitAdapterRxJava</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libOkHttpLoggingInterceptor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="OkHttpClient">OkHttpClient</h2><p>自底向上地，我们需要一个OkHttpClient来设置给Retrofit，这里作为实例，放出一段包含大部分你可能会用到的功能的Client创建代码，可以根据需要进行调整。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> OkHttpClient <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// log用拦截器</span></span><br><span class="line">    HttpLoggingInterceptor logging = <span class="keyword">new</span> HttpLoggingInterceptor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开发模式记录整个body，否则只记录基本信息如返回200，http协议版本等</span></span><br><span class="line">    <span class="keyword">if</span> (IS_DEV) &#123;</span><br><span class="line">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logging.setLevel(HttpLoggingInterceptor.Level.BASIC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果使用到HTTPS，我们需要创建SSLSocketFactory，并设置到client</span></span><br><span class="line">    SSLSocketFactory sslSocketFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里直接创建一个不做证书串验证的TrustManager</span></span><br><span class="line">        <span class="keyword">final</span> TrustManager[] trustAllCerts = <span class="keyword">new</span> TrustManager[]&#123;</span><br><span class="line">                <span class="keyword">new</span> X509TrustManager() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span><br><span class="line">                            <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span><br><span class="line">                            <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[]&#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Install the all-trusting trust manager</span></span><br><span class="line">        <span class="keyword">final</span> SSLContext sslContext = SSLContext.getInstance(<span class="string">"SSL"</span>);</span><br><span class="line">        sslContext.init(<span class="keyword">null</span>, trustAllCerts, <span class="keyword">new</span> java.security.SecureRandom());</span><br><span class="line">        <span class="comment">// Create an ssl socket factory with our all-trusting manager</span></span><br><span class="line">        sslSocketFactory = sslContext.getSocketFactory();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Logger.e(TAG, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">            <span class="comment">// HeadInterceptor实现了Interceptor，用来往Request Header添加一些业务相关数据，如APP版本，token信息</span></span><br><span class="line">            .addInterceptor(<span class="keyword">new</span> HeadInterceptor())</span><br><span class="line">            .addInterceptor(logging)</span><br><span class="line">            <span class="comment">// 连接超时时间设置</span></span><br><span class="line">            .connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            <span class="comment">// 读取超时时间设置</span></span><br><span class="line">            .readTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            .sslSocketFactory(sslSocketFactory)</span><br><span class="line">            <span class="comment">// 信任所有主机名</span></span><br><span class="line">            .hostnameVerifier((hostname, session) -&gt; <span class="keyword">true</span>)</span><br><span class="line">            <span class="comment">// 这里我们使用host name作为cookie保存的key</span></span><br><span class="line">            .cookieJar(<span class="keyword">new</span> CookieJar() &#123;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;HttpUrl, List&lt;Cookie&gt;&gt; cookieStore = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveFromResponse</span><span class="params">(HttpUrl url, List&lt;Cookie&gt; cookies)</span> </span>&#123;</span><br><span class="line">                    cookieStore.put(HttpUrl.parse(url.host()), cookies);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;Cookie&gt; <span class="title">loadForRequest</span><span class="params">(HttpUrl url)</span> </span>&#123;</span><br><span class="line">                    List&lt;Cookie&gt; cookies = cookieStore.get(HttpUrl.parse(url.host()));</span><br><span class="line">                    <span class="keyword">return</span> cookies != <span class="keyword">null</span> ? cookies : <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上包含了大部分你可能需要的特性，可以自由进行组合。</p>
<h2 id="RxJava异步请求">RxJava异步请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MrService <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (MrService.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mInstance = <span class="keyword">new</span> MrService();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MrService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MrService</span><span class="params">(<span class="keyword">boolean</span> useRxJava)</span> </span>&#123;</span><br><span class="line">    Retrofit.Builder builder = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">            .baseUrl(IS_DEV ? API_DEV_URL : API_PRODUCT_URL)</span><br><span class="line">            .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">            .client(getClient());</span><br><span class="line">    <span class="keyword">if</span> (useRxJava) &#123;</span><br><span class="line">        builder.addCallAdapterFactory(RxJavaCallAdapterFactory.create());</span><br><span class="line">    &#125;</span><br><span class="line">    mRetrofit = builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应API请求类如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SystemApi</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"user/feedback"</span>)</span><br><span class="line">    <span class="function">Observable&lt;MrResponse&gt; <span class="title">feedback</span><span class="params">(@Field(<span class="string">"content"</span>)</span> String content,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"model_name"</span>)</span> String modelName,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"system_version"</span>)</span> String systemVersion,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"img_keys"</span>)</span> List&lt;String&gt; imageKeyList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="同步请求">同步请求</h2><p>有时候我们需要做同步请求，比如提供结果给一些第三方库，它们可能需要直接返回对应数据（像我最近碰到的融云….），而我们只需要拉数据同步返回，对其所在线程和调用事件均一脸懵逼。</p>
<p>这时候就需要创建一个同步的retrofit客户端，其实就是不要去使用RxJava的adapter啦。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MrService <span class="title">getSynchronousInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mSyncInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (MrService.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSyncInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mSyncInstance = <span class="keyword">new</span> MrService(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSyncInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应地，我们需要定义请求类，这里我们需要使用Call&lt;&gt;去包一下最终解析对象的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RongCloudApi</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"im/getGroupInfo"</span>)</span><br><span class="line">    <span class="function">Call&lt;MrResponse&gt; <span class="title">getGroupInfoSynchronous</span><span class="params">(@Field(<span class="string">"group_id"</span>)</span> String groupId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"user/nameCardLite"</span>)</span><br><span class="line">    <span class="function">Call&lt;MrResponse&gt; <span class="title">getNameCardLiteSynchronous</span><span class="params">(@Field(<span class="string">"uid"</span>)</span> String userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="数据格式解析">数据格式解析</h2><p>数据的解析当然是必不可少的一环了，常用格式对应的序列化库以retrofit官网为例:</p>
<ul>
<li>Gson: com.squareup.retrofit2:converter-gson</li>
<li>Jackson: com.squareup.retrofit2:converter-jackson</li>
<li>Moshi: com.squareup.retrofit2:converter-moshi</li>
<li>Protobuf: com.squareup.retrofit2:converter-protobuf</li>
<li>Wire: com.squareup.retrofit2:converter-wire</li>
<li>Simple XML: com.squareup.retrofit2:converter-simplexml</li>
<li>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars</li>
</ul>
<p>部分高大上公司可能自己使用内部的二进制格式，自己实现ConverterFactory去解析就行了。</p>
<p>这里以最常用的json为例，使用GsonConverterFactory，良好的数据结构通常都会带有状态码和对应信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line"><span class="keyword">private</span> String statusMessage;</span><br></pre></td></tr></table></figure>
<p>根据statusCode可以快速判断是否出现错误，通常0或者某个正数为正确，负数则根据和服务器的协定做不同处理。<br>这里对Gson的bean，推荐使用插件GsonFormat，生成起来很方便。</p>
<p>至于具体的数据，则有两种方案，一是使用data作为key把具体数据套起来，内部则使用K/V进行存储，保证不存在不规范的直接丢一个array在data里面的情形。</p>
<h3 id="二次的组合解析">二次的组合解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line">    <span class="keyword">private</span> String statusMessage;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"time"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"data"</span>)</span><br><span class="line">    <span class="keyword">public</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二次组合的解析通过将创建一个通用的Response Bean来做泛解析，如果statusCode表明接口请求成功，则继续解析data:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">extractData</span><span class="params">(Observable&lt;MrResponse&gt; observable, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> observable.flatMap(response -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> NetworkConnectionException());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.getStatusCode() == ResponseException.STATUS_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.just(mGson.fromJson(mGson.toJson(response.data), clazz));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.e(TAG, response.data);</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> ResponseException(response));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用则如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;AlbumApiResult&gt; <span class="title">listPhoto</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RepositoryUtils.extractData(mAlbumApi.listPhoto(uid), AlbumApiResult.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有接口都可以通过<code>RepositoryUtils.extractData()</code>进行泛型调用。</p>
<p>如此一来，如果response为空，我们仅在statusCode正确时才会去解析具体的数据，否则抛出对应的异常（基于异常的数据层设计在下面会具体讲）。</p>
<h3 id="单次的继承处理">单次的继承处理</h3><p>上一种处理方式尽管看起来很优雅，但是存在一个问题，就是会重复解析，当statusCode正确时，会对data的object再次进行json处理。如果确实是error，比如statusCode为-1、-2这种，确实节省了开销，因为gson会去反射构造对应类的adapter，解析所有字段，创建对应的BoundField。</p>
<p>但考虑到大部分情况下还是正确的response居多，所以也可以使用继承的结构，我们创建<code>BaseResponse</code>存放通用字段，其他所有Gson Bean则继承该<code>BaseResponse</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line">    <span class="keyword">private</span> String statusMessage;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"time"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteResponse</span> <span class="keyword">extends</span> <span class="title">BaseResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"other_fields"</span>)</span><br><span class="line">    <span class="keyword">private</span> String otherFields;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的判断和error抛出可以参照上小节的，这里就不赘述了。</p>
<h1 id="Repository层组装实现">Repository层组装实现</h1><p>组装即根据组合各个数据源，如此又分为直接在实现方法中组合结果，亦或是通过DataStoreFactory进行封装。根据复杂度和个人喜好而定，毕竟使用后者需要新增好多类，相对来说有一点重。</p>
<h2 id="基于接口的设计实现">基于接口的设计实现</h2><p>拿一个最简单的repository，七牛Repository来作例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QiniuRepository</span> </span>&#123;</span><br><span class="line">    <span class="function">Observable&lt;QiniuToken&gt; <span class="title">getQiniuUploadToken</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuDataRepository</span> <span class="keyword">implements</span> <span class="title">QiniuRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="keyword">protected</span> QiniuApi mQiniuApi;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QiniuDataRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;QiniuToken&gt; <span class="title">getQiniuUploadToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RepositoryUtils.extractData(mQiniuApi.getQiniuUploadToken(), QiniuToken.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DataStoreFactory">DataStoreFactory</h2><p>使用DataStoreFactory封装数据来源：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDataStoreFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserCache mUserCache;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="keyword">protected</span> UserApi mUserApi;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDataStoreFactory</span><span class="params">(Context context, UserCache userCache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context == <span class="keyword">null</span> || userCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Constructor parameters cannot be null!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mContext = context.getApplicationContext();</span><br><span class="line">        mUserCache = userCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create &#123;<span class="doctag">@link</span> UserDataStore&#125; from a user id.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDataStore <span class="title">create</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserDataStore userDataStore;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mUserCache.isExpired() &amp;&amp; mUserCache.isCached(userId)) &#123;</span><br><span class="line">            userDataStore = <span class="keyword">new</span> DiskUserDataStore(mUserCache);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userDataStore = createCloudDataStore();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDataStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create &#123;<span class="doctag">@link</span> UserDataStore&#125; to retrieve data from the Cloud.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDataStore <span class="title">createCloudDataStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CloudUserDataStore(mUserApi, mUserCache);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>老实说这样的话，一来要写很多方法和接口，二来通过Factory判断创建哪种DataStore还是挺麻烦的，比如用户主页数据我们可以判断，但登陆登出这些，就需要直接指定<code>createCloudDataStore()</code>了，所以个人认为意义不大。</p>
<h2 id="在实现方法中组合">在实现方法中组合</h2><p>如下是使用DBFlow和网络Api进行组合的一个list获取接口。</p>
<p>我们使用RxJava的concat组合2个Observable，前者从cache(数据库)获取数据，后者从网络Api获取数据，通常数据库当然会更快。我们还保留了一个参数isForceRefresh来保证在某些情况下可以强制从网络获取数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; getHome(<span class="keyword">final</span> <span class="keyword">boolean</span> isForceRefresh) &#123;</span><br><span class="line">    <span class="keyword">final</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; fromCache = Observable.create(</span><br><span class="line">            <span class="keyword">new</span> Observable.OnSubscribe&lt;List&lt;OperationPosition&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> List&lt;OperationPosition&gt;&gt; subscriber)</span> </span>&#123;</span><br><span class="line">                    List&lt;OperationPosition&gt; dbCache = <span class="keyword">new</span> Select().from(OperationPosition.class).queryList();</span><br><span class="line">                    <span class="keyword">if</span> (dbCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        subscriber.onNext(dbCache);</span><br><span class="line">                    &#125;</span><br><span class="line">                    subscriber.onCompleted();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .map(<span class="keyword">new</span> Func1&lt;List&lt;OperationPosition&gt;, List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;OperationPositionWrapper&gt; <span class="title">call</span><span class="params">(List&lt;OperationPosition&gt; operationPositions)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> OperationPositionMapper.wrap(operationPositions);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .filter(<span class="keyword">new</span> Func1&lt;List&lt;OperationPositionWrapper&gt;, Boolean&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(List&lt;OperationPositionWrapper&gt; operationPositionWrappers)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ListUtils.isNotEmpty(operationPositionWrappers);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; fromNetwork = RepositoryUtils.observableWithApi(<span class="keyword">new</span> GetOperationPositionsForYouleHomeApi())</span><br><span class="line">            .map(<span class="keyword">new</span> Func1&lt;List&lt;OperationPositionPO&gt;, List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;OperationPositionWrapper&gt; <span class="title">call</span><span class="params">(List&lt;OperationPositionPO&gt; operationPositionList)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> OperationPositionMapper.transform(operationPositionList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .doOnNext(<span class="keyword">new</span> Action1&lt;List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;OperationPositionWrapper&gt; operationPositionWrappers)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (ListUtils.isNotEmpty(operationPositionWrappers)) &#123;</span><br><span class="line">                        <span class="keyword">new</span> Delete().from(OperationPosition.class).queryClose();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (OperationPositionWrapper wrapper : operationPositionWrappers) &#123;</span><br><span class="line">                        wrapper.getOperationPosition().save();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isForceRefresh) &#123;</span><br><span class="line">        <span class="keyword">return</span> fromNetwork;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.concat(fromCache, fromNetwork);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1><p>本篇为Repository层的上篇，主要介绍了组合及Retrofit的应用。下篇将会讲述数据库，内存Cache，以及统一的异常处理设计。</p>
<p><strong>另外，打个小广告，本司的新产品Crew已经在各大Android应用市场上线，专注于职场垂直社交。一搜和兴趣相投的人聊天。iOS版本正在审核中。</strong></p>
<p><em>2个字找到志趣相投的职场伙伴，秒搜陌生人同类，智能自动破冰。多关键字叠加，高效率锁定职场同僚。精准匹配兴趣对象，超轻聊天，更能一键组建群聊，加入一群人的狂欢。</em></p>
<p>demo没空写了，反正我也没混淆，直接反编译来黑我吧。哈哈。有bug或者功能上的意见建议欢迎直接反馈给我。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如期而至的Repository篇，内部实现则由Realm、Retrofit，以及内存级LruCache组成。<br>Repository，顾名思义，即仓库，向上层屏蔽了数据来源和内部实现细节，不需要了解货物来源，只需要拿走就行了。</p>
<p>由于篇幅问题，将分为上下两篇]]>
    </summary>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Repository" scheme="http://blog.zhaiyifan.cn/tags/Repository/"/>
    
      <category term="Retrofit" scheme="http://blog.zhaiyifan.cn/tags/Retrofit/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机从业者的技术成长学习之路]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/28/about-learning/</id>
    <published>2016-04-28T07:25:06.000Z</published>
    <updated>2016-05-02T02:33:01.000Z</updated>
    <content type="html"><![CDATA[<p>最近因为在学习一些新的东西，所以Android的东西没有怎么更新。趁着有些闲工夫，简单说说技术上的学习，也算是自己对这几年工作来的一个小结和经验吧。</p>
<p>希望这篇东西可以给那些在校的，亦或是才踏入工作没多久的程序员同伴们一些帮助。毕竟我自己也曾经止步不前，不知所措迷茫过。</p>
<h1 id="英语">英语</h1><p>老实说，没有比英语性价比更高的，需要学习的东西了。靠着别人的翻译，或者机翻，终究不是办法的。笔者自己日语英语姑且算是熟练掌握的地步，但在初期直接看那些全英文的书籍，仍然会觉得头痛（谢谢HKUST虐我），但坚持下来就会发现其实计算机的英语还是有一个范围的，多看看熟悉起来，就会觉得并没有什么难，甚至比起很多翻译来说更容易看懂。</p>
<p>混迹GitHub就会发现国内的很多开发者英语上欠缺还是很大的，尤其是一些description和readme直接就上中文的。即便你英语渣，机翻也行啊。毕竟是计算机社区，英语才是通用语言。用中文去一些国外开发者的仓库里提issue或者回复也是一种很粗鲁的行为。</p>
<p>如果让我说一种对技术帮助做大的语言，那必然就是英语。有了英语，才能真正地独立学习。</p>
<h1 id="Google">Google</h1><p>问小白问题之前，你Google过吗？如果让我看到一个开发动不动去搜百度，那我估计会武断地认定他很菜。其实Google是我们最好的老师，只要能正确把握问题的关键字，几乎没有找不到的答案，大部分会在StackOverflow上，其他散落在GitHub、博客等等地方。</p>
<p>如果你要找的知识实在冷门，比如react native的一些深入用法，android上的视频so阉割这种，那恐怕只能找找做这块的朋友或者自己研究了，国内有一些好心的开发者或许会分享在自己的博客。</p>
<p>至于科学上网，这个话题相关的技术太多了，请自行找方法，VPN也好，SS也好，都很简单，相对的投入和产出对程序员来说性价比是很高的。实在不想花钱的去用AWS的免费云服务器搭SS也行。</p>
<h1 id="实践">实践</h1><p>看是没有用的。比如看一篇关于Hybrid App原理的文章，或许它写得很好，但其实就算看完了，让我自己去写一个，或者讲讲怎么去做一个我们应用的版本，Android/iOS端通用的方案，最后也是支支吾吾说的不知所以。最后还是要去实践做一些Hybrid页面才能真正掌握，能说清楚这里面的原理和应用场景。</p>
<p>纸上谈兵终觉浅。</p>
<h1 id="警惕体力劳动">警惕体力劳动</h1><p>当你的工作成为一种体力劳动，而自己无法从中获得新的体验和知识的时候，需要警惕究竟发生了什么。</p>
<h2 id="想得太少">想得太少</h2><p>对做的内容停留在完成的阶段，而不对更好的方案，实现细节去思考更多，比如用了某个API，会不会去仔细看看其究竟是怎么做的。或许你知道Handler，Looper，那你知不知道主线程的一切，四大组件的生命周期，各种View的触摸事件都是消息驱动，在mainLooper里面进行处理的呢？</p>
<h2 id="工作内容重复">工作内容重复</h2><p>当Focus在一块上太久之后，难免会碰到这种瓶颈，这时候可以看看是不是能换一块做，比如做做缓存、Hybrid、启动优化、视频等等。可以做的领域很多，实在发现兴趣不在此，换着做后台或者前端也行。倘若因为个人原因，比如公司不让换或者可能工资会低很多，挤一挤时间在side project里面搞搞也可以，只是有没有心的问题罢了。</p>
<p>我面试过一些做Android 5-6年的程序员，但大部分真的连一些优秀的2-3年经验的开发者都远远不如，问设计不懂设计，问流行的开源项目回答就是“好像听说过”。我不希望我认识的开发者以后变成这样的人。但你若是总是重复劳动，难免像这样1年的工作经验重复了5年。</p>
<p>在额外学习的时候，更多关注的应该是不同的地方，而不是说这个学Python，下个月去学Go，想想语言的差异性在哪里，自己试试看做一些项目，培养全栈工程师的底子。还在念大学的时候，我学了C、C++、Java、Python、Ruby、PHP、HTML、Perl、SQL/Redis/HBase等等等等，但对每个的理解都不够深刻，现在想来那时候是做错了的。</p>
<p>你应该有自己的专长，但也要能从全局的角度思考问题，一个不懂前端的后端老大会导致前端过重不灵活，反正只要自己这儿的模块清晰就好，一个不懂前端的前端老大也会让下面的人不要抱怨，做出来就好。</p>
<h2 id="公司问题">公司问题</h2><p>发生在一些项目经理逼得特别紧，老大又比较无能的地方。项目经理为了向上面交待，对工程师说“这个进度能不能再压一下呀”，或者干脆直接不听工程师的意见强行缩短工期，导致没有时间去深入学习。老大明知这种情况，却睁一只眼闭一只眼。这种公司，还是离开为妙。</p>
<p>一个合格的leader，或者说mentor应该做些什么？至少从我的角度来看，尽管对公司他需要对项目负责，但对团队内的开发者，他更应该做的是观察和指导，看清楚那些团队毒瘤，营造团队氛围，而不是一味Push催进度和表现自己。</p>
<h1 id="记录和总结">记录和总结</h1><p>写博客是为了什么？</p>
<p>至少对我来说，写下的东西更多是对自己的一个总结和交待。如果我能写下来，至少能证明我有信心自己确实是这么去理解的，没有去坑人。另外，姑且也算是一种成长的足迹吧，偶尔自己还会去看看笔记。</p>
<p>分享也是目的之一，希望大家能互相进步，这样才能促进发展。</p>
<p>写博客也好，写一些笔记也好，点点滴滴也是对自己的一种整理。</p>
<h1 id="问自己">问自己</h1><p>想清楚自己要的究竟是什么。</p>
<p>做全还是钻？想做一个超强并发量的后台？想黑别人的系统？想做出精准有效的推荐算法？还是想做别人能实际用到的产品？</p>
<p>笔者正是因为想要的是后者，所以成为了Android开发（为什么没有选iOS，大约是Android的开放性吸引了我）。而现在，因为发现自己欠缺的（对前端驾轻就熟，大部分的事情对我来说只是体力活，而自己想承担一个完整的项目却又不行），所以又重新拾起了Node.js，看起了ES6，思考设计和产品的问题。</p>
<hr>
<p>希望大家都能想清楚自己想做的，要成为的样子。能自主地去学习。毕竟师傅带进门，修行靠个人。我不想鸡汤，大家各自走好，望来日可并肩一起，彼此说一句“很高兴遇见你”。</p>
<p>原文发布于：<a href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/">http://blog.zhaiyifan.cn/2016/04/28/about-learning/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近因为在学习一些新的东西，所以Android的东西没有怎么更新。趁着有些闲工夫，简单说说技术上的学习，也算是自己对这几年工作来的一个小结和经验吧。</p>
<p>希望这篇东西可以给那些在校的，亦或是才踏入工作没多久的程序员同伴们一些帮助。毕竟我自己也曾经止步不前，不知所措]]>
    </summary>
    
      <category term="Work" scheme="http://blog.zhaiyifan.cn/tags/Work/"/>
    
      <category term="闲言闲语" scheme="http://blog.zhaiyifan.cn/categories/%E9%97%B2%E8%A8%80%E9%97%B2%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Centos7安装Node.js并搭建Server]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/25/node-web-server-build-1/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/25/node-web-server-build-1/</id>
    <published>2016-04-25T02:53:52.000Z</published>
    <updated>2016-04-28T10:00:55.000Z</updated>
    <content type="html"><![CDATA[<p><strong>未完</strong></p>
<h1 id="安装Node">安装Node</h1><p>我们选择使用<code>nvm</code>安装Node.js:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 使用cnpm的nvm mirror</span><br><span class="line">curl -o- https://raw.githubusercontent.com/cnpm/nvm/master/install.sh | bash</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">nvm list-remote</span><br><span class="line">nvm install v4.<span class="number">4.3</span></span><br><span class="line">nvm use v4.<span class="number">4.3</span></span><br><span class="line">nvm <span class="built_in">alias</span> default v4.<span class="number">4.3</span></span><br></pre></td></tr></table></figure></p>
<p>安装cnpm:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry=https://registry.npm.taobao.org install -g cnpm</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>未完</strong></p>
<h1 id="安装Node">安装Node</h1><p>我们选择使用<code>nvm</code>安装Node.js:<br><figure class="highlight bash"><table><tr><td c]]>
    </summary>
    
      <category term="Node.js" scheme="http://blog.zhaiyifan.cn/tags/Node-js/"/>
    
      <category term="Server" scheme="http://blog.zhaiyifan.cn/tags/Server/"/>
    
      <category term="Node.js" scheme="http://blog.zhaiyifan.cn/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React.js 新手村教程]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/22/trans-react-newbies-tutorial/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/22/trans-react-newbies-tutorial/</id>
    <published>2016-04-22T02:54:01.000Z</published>
    <updated>2016-04-22T03:49:43.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="http://www.leanpanda.com/blog/2016/04/06/react-newbies-tutorial/" target="_blank" rel="external">HOMEBLOG React JS: newbies tutorial</a></li>
<li>原文作者 : Elise Cicognani</li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/JasinYip" target="_blank" rel="external">JasinYip</a>, <a href="https://github.com/malcolmyu" target="_blank" rel="external">malcolmyu</a>, <a href="https://github.com/antonia0912" target="_blank" rel="external">羊羊羊</a></li>
</ul>
</blockquote>
<p>正如你能从标题猜到的，这篇文章的目标是给那些有很少编程经验的读者的。比如，像我这样的人：因为迄今为止，我才探索了编程世界6个月。<strong>所以，这将是一篇新手村教程！</strong> 你只需要拥有对 HTML 和 CSS 的理解，以及基本的 JavaScript（JS）知识就能看懂本文。</p>
<p>注意：在接下来的例子中，我们将会利用 ES6 提供的新能力，来简化写 JS 代码的过程。然而，你也能完全使用 ES5 来写 React。</p>
<p>预计阅读时间9分钟</p>
<h1 id="什么是_React_？">什么是 React ？</h1><p>React 是一个 JS 库，由 Facebook 和 Instagram 创建(<a href="https://facebook.github.io/react/" target="_blank" rel="external">https://facebook.github.io/react/</a>)。它通过将应用分为一些动态的、可复用的 <strong>组件</strong>，来使我们可以创建单页应用(<a href="http://www.leanpanda.com/blog/2015/05/25/single-page-application-development/" target="_blank" rel="external">Single Page Applications (SPA)</a>)。</p>
<p>一个 React 组件是一个继承了由 React 提供的 <strong>Component</strong> 的 JS 类。一个组件代表并定义了一块 HTML 代码，以及任何与这块代码相关的行为，比如点击事件。组件就像是乐高积木，可以用来组建成所需的复杂应用。完全由 JS 代码构成的组件，可以被隔离和复用。基本方法是 <strong>render()</strong>，它简单地返回一片HTML代码。</p>
<p>这种用来定义 React 组件的语法被称为 <strong>JSX</strong>。该语法由 React 的创建者们所开发，被用来简化 JS-HTML 代码的组件内交互。使用该语法写的代码在变成实际 JS 代码前必须被编译。</p>
<h1 id="创建一个组件（component）">创建一个组件（component）</h1><p>为了创建我们的组件并将它渲染为一页 HTML，我们首先在我们的 HTML 文件里需要定义一个有唯一 id 的 div。接着，我们将要在 JSX 文件里写代码，以连接 React 组件到使用其 id 的 div，如下面的例子所示。这样做将会指导浏览器在相关 DOM 标签所在的页面渲染组件。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/XXdmvL/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/XXdmvL/" target="_blank" rel="external">Start</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>JSX 内的 HTML 标签属性和普通 HTML 内的是几乎一样的；唯一不同的是“class”，在 JSX 里面变成了“className”。类 HTML 语法使用圆括号闭合，而包含 JS 的块则使用尖括号闭合。正如你将看到的。render() <em>总</em> 会返回一个 div，而在其中开发者可以自由引入他们认为合适的任意多的标签和元素。</p>
<h2 id="例子：海盗的灭绝">例子：海盗的灭绝</h2><p><img src="http://ww4.sinaimg.cn/large/a490147fjw1f2x94p1ev2j20m80etjtt.jpg" alt=""></p>
<p>如果我们选择使用 React 来创建这张图，我们可以对屏幕上各个日期进行可视化，并在那些日期被点击的时候，才显示对应的温度和海盗数量。</p>
<p>为此我们需要2个组件：第一个用来渲染日期，并将每个日期链接到给定的海盗数量和温度；第二个则需要用来接收日期上的点击事件对应的信息，如海盗的数量和当时的温度，接着基于这些数据渲染选择的元素。</p>
<p>前者相当于是“父亲”的角色，并包含多个后面的“子”组件的链接，而后者则紧密依赖于它们的“父亲”。</p>
<p>React 结构，被称为<a href="https://facebook.github.io/react/docs/working-with-the-browser.html" target="_blank" rel="external">虚拟 DOM</a>，可以使我们在组件的内容发生改变的时候，不需要刷新整个页面，而可以只更新对应组件。为此，组件需要一个内部方法，来保存变量 data 和 赋值给该元素的会被改变的 HTML 属性。这些属性会自行链接到那些我们在组件内定义的，会负责响应变化的方法。</p>
<h2 id="状态(State)和属性(props)">状态(State)和属性(props)</h2><p>在我们的例子里，那个独立的变量 data 是由日期组成的。这些会根据点击事件所集合的 DOM 内连锁反应进而根据对应海盗、温度信息而进行改变。所以我们将会根据每个 “DATA” 对象内的对应日期去保存信息。我们还将利用 React 在父组件内的 <code>this.state={}</code> 属性来以键值对拷贝形式保存变量数据的。</p>
<p>以这种形式组织程序使得我们可以利用 React 提供的方法，来以“状态(state)”的形式和数据交互，并对其进行任意更改。</p>
<p>考虑到我们想要使用 DATA 对象的 key 来渲染 HTML 内的日期，最好可以找到一种方法来在 key 上使用 JS 的 <code>map()</code> 方法(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external">Array.prototype.map()</a>)，以便能直接显示返回到 <code>render()</code> 的 HTML。事实上确实有方法可以做到！我们只需要把 JS 代码包裹在双花括号里，并放置在想要代码输出显示的管理该组件的 DOM 块内，然后就好了。</p>
<p>在这个特殊例子中，我们将在组件内的方法里定义 <code>map()</code> 回调，其将在同一组件的<code>render()</code>内返回一片 HTML 代码。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/XXdmvL/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/qbZbxR/" target="_blank" rel="external">State1</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>为了分配点击事件到每个日期，我们将会分配 <code>onClick</code> 属性给它们。</p>
<p>在该属性中，我们会调用组件的方法，该方法则会定义我们希望在 onClick 事件后触发的状态修改和其他变更。</p>
<p>在我们的例子里，我们定义该函数为 <code>handleClick()</code>。在 handleClick() 中，我们会调用 React 方法 <code>setState()</code>，其允许我们在在每个点击事件中去更改状态数据。我们只需要插入一个包含我们想要修改的状态 key 的对象，并在后者括号内分配给它们新的相关联值。</p>
<p>总的来说，每次一个日期被点击，被选中的div的onClick属性会调用 <code>HandClick()</code> 方法，该方法会调用 setState() 方法来修改组件的状态。</p>
<p>每次状态改变，一旦发生 React 就会自动检查组件的 <code>render()</code> 函数的返回，以寻找基于新状态需要更新的内容。一旦有那样的数据， React 就会自动触发一次新的 <code>render()</code> 来更新那些有变更的 HTML 片段。</p>
<p>(我很抱歉，在接着的例子里，我插入了三行利用了 Classnames 的代码，一个用来基于状态变更来做 CSS 管理的小工具，我这么做只是为了给预览一点颜色。我还会使用它在最终的例子里给预览填充一些海盗变量。你可以找到 GitHub 上 Classnames 仓库的链接，还有一个<a href="https://github.com/JedWatson/classnames" target="_blank" rel="external">简要使用向导</a>)</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/EPKwRo/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/EPKwRo/&quot;&gt;State2&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/EPKwRo/&quot;&gt;State2&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/EPKwRo/" target="_blank" rel="external">State2</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>如此，我们的父组件状态已经被设定好根据选中数据去创建子组件（其将会描述海盗数量和对应温度）。</p>
<p>我们将会在 JSX 文件中创建子组件的实例，正如我们之前对父组件所做的。为了链接子组件到其父亲上，我们只需要在后者的 <code>render()</code> 函数使用同一种语法和一个 HTML 标签去定义关系。如果我们称它为 “Child” ，它将会在我们插入 <code>&lt;Child /&gt;</code>处所在的 HTML 块内出现。</p>
<p>我们的子组件还必须根据现在选中数据所关联的海盗和温度，传递数据到其父亲。为此，我们将利用赋给 Child 标签的属性，其名字可以随便取，其信息只对父组件可见。</p>
<p>如此一来，子组件将可以通过显式访问归属于其父组件的数据，即利用这些 “attribute-bridges”，或者 <strong>属性(props)</strong>，来获取到它自己内部信息的访问权。</p>
<p>所以，每次父组件的状态发生改变，其子组件的属性内容就会自动进行更新。但是，正如子组件的<code>render()</code>方法会显示属性内容，它也会基于单向的数据线性流，根据任何收到的新信息去进行更新。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/EPKbmO/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/EPKbmO/&quot;&gt;Props&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/EPKbmO/&quot;&gt;Props&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/EPKbmO/" target="_blank" rel="external">Props</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>搞定了！组件们会互相交互，并根据我们的点击在 DOM 里渲染不同数据，而不需要单页去进行刷新。以这个为基础，交互的复杂性和组件的数量可以按需增加，使我们能创建复杂高效的应用。</p>
<p>如果你被这个库的潜力启发了，<a href="https://react.rocks/" target="_blank" rel="external">不妨看看 react.rocks 网站</a>，在那里你会找到很多有趣的点子来帮助你开始。(:</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="http://www.leanpanda.com/blog/2016/04/06/react-newbies-tutorial/" target="_blank" rel="external">HOMEB]]>
    </summary>
    
      <category term="H5" scheme="http://blog.zhaiyifan.cn/tags/H5/"/>
    
      <category term="JavaScript" scheme="http://blog.zhaiyifan.cn/tags/JavaScript/"/>
    
      <category term="React.js" scheme="http://blog.zhaiyifan.cn/tags/React-js/"/>
    
      <category term="前端" scheme="http://blog.zhaiyifan.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React.js" scheme="http://blog.zhaiyifan.cn/categories/React-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在 Android N 预览版中使用 Java 8 的新特性]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/20/trans-java-8-in-android-n-preview/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/20/trans-java-8-in-android-n-preview/</id>
    <published>2016-04-20T03:48:40.000Z</published>
    <updated>2016-05-26T04:14:07.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@sergii/java-8-in-android-n-preview-76184e2ab7ad#.ywf5x3l8w" target="_blank" rel="external">Java 8 in Android N Preview</a></li>
<li>原文作者 : <a href="https://medium.com/@sergii" target="_blank" rel="external">Sergii Zhuk</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/narcotics726" target="_blank" rel="external">narcotics726</a>, <a href="https://github.com/MiJack" target="_blank" rel="external">MiJack</a></li>
</ul>
</blockquote>
<p>Android团队最近发布了Android N Preview，带来了很多提升，包括由Jack编译器提供的Java 8支持。在这篇文章中，我们将来看看它究竟对Android开发者意味着什么，以及如何尝试新的语言特性。</p>
<blockquote>
<p><em>免责声明: 本信息在2016年3月30日是有效的，我不确定在下个release版本中，Google团队会增加什么新的没有在此提到的Java 8特性。</em></p>
</blockquote>
<p><img src="https://cdn-images-1.medium.com/max/800/1*0Vex_2H0J7MBBiu1EqMtaw.png" alt=""></p>
<figcaption>图片 by <a href="http://www.androidpolice.com/2016/03/09/android-n-feature-spotlight-jack-compiler-gains-support-for-many-java-8-language-features-including-lambdas-streams-functional-interfaces-and-more/" target="_blank" rel="external">Android Police<sup class="readableLinkFootnote">[1]</sup></a></figcaption>

<h3 id="概览">概览</h3><p>在这篇文章中，去介绍Oracle Java 8的新特性并没有太大意义 —— 很多信息已经在互联网上有了。我个人最喜欢的是Simon Ritter的“<a href="https://www.youtube.com/watch?v=rtAredKhyac" target="_blank" rel="external">Java SE 8的55个新特性<sup class="readableLinkFootnote">[2]</sup></a>”。</p>
<p>另一方面，Android <a href="http://android-developers.blogspot.de/2016/03/first-preview-of-android-n-developer.html" target="_blank" rel="external">官方的Java 8公告<sup class="readableLinkFootnote">[3]</sup></a> 留下了很多开放的问题给开发者们，感觉上并非所有的原生 Java 8 功能都是可用的。更详细的 <a href="http://developer.android.com/intl/ru/preview/j8-jack.html" target="_blank" rel="external">技术公告<sup class="readableLinkFootnote">[4]</sup></a> 确认了这一点。我们可以根据在 Android N 中的可用性，将这些语言特性分类如下：</p>
<p>Android Gingebread (API 9)及以上:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda 表达式</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external">java.util.function</a></li>
</ul>
<p>Android N及以上:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank" rel="external">默认和静态interface方法</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="external">可重复的注解</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html" target="_blank" rel="external">流(Streams)</a></li>
<li>反射APIs</li>
</ul>
<p>所以对Java 8特性和使用的minSdkVersion之间的关联性，开发者必须去精心选择。我们也必须注意到语言向后兼容是由Jack编译器提供的。在概念上，Jack编译器将javac，ProGuard，以及dex的功能 <a href="https://www.guardsquare.com/blog/the_upcoming_jack_and_jill_compilers_in_android" target="_blank" rel="external">合并 <sup class="readableLinkFootnote">[5]</sup></a>到了一个转换步骤中。<a href="http://trickyandroid.com/the-dark-world-of-jack-and-jill/" target="_blank" rel="external">这意味着<sup class="readableLinkFootnote">[6]</sup></a>其中没有中间的Java字节码可用，且像是JaCoCo和Mockito的工具将无法工作，DexGuard也一样 (ProGuard的企业版本)。让我们祈祷这只是一个早期的preview版本，且这些问题将在未来被修复。</p>
<p>Lambda表达式以及相关的函数功能APIs —— 这是一个每个Android开发都会喜欢的东西。这类功能将会对增加代码可读性极为有用 —— 它替代了提供事件监听器的匿名内部类。而之前只能通过 <a href="http://zserge.com/blog/android-lambda.html" target="_blank" rel="external">额外的工具<sup class="readableLinkFootnote">[7]</sup></a> 来实现，或者由Android Studio编辑器去折叠代码。</p>
<p>默认及静态interface方法可以帮助我们减少额外的工具类的数量，但显然不是最需要的特性。还有一些其他的新增功能，我希望去说的更详细一些，因此不在本文的范围内。</p>
<p>对我来说最有趣的事 —— Java 8 流(Streams) —— 在当前的预览版中不可用。我们可以发现事实上它 <a href="https://android.googlesource.com/platform/libcore/+/916b0af2ccdd1bdfc0283b1096b291c40997d05f" target="_blank" rel="external">刚被merge<sup class="readableLinkFootnote">[8]</sup></a> 到AOSP源码，所以期望可以在下个N Preview 或者 Beta release中见到它。如果你实在等不及去浏览 —— 可以试试使用 <a href="https://github.com/aNNiMON/Lightweight-Stream-API" target="_blank" rel="external">Lightweight-Stream-API<sup class="readableLinkFootnote">[9]</sup></a>，目前的一个开源向后兼容。</p>
<h3 id="示例项目">示例项目</h3><p><a href="http://developer.android.com/preview/setup-sdk.html" target="_blank" rel="external">官方手册<sup class="readableLinkFootnote">[10]</sup></a>提供了指示，甚至还有图展示了如何去配置你的项目使用 Android N Preview 和 Java 8。在这儿没什么可以再说的，就跟着指示走吧。</p>
<p><img src="http://ww4.sinaimg.cn/large/a490147fjw1f2w1lxrva9j20m803pt9h.jpg" alt=""></p>
<p>下一步是去配置你的app模块的 build.gradle 文件。你可以在下面看到实例的 build.gradle 文件。从N SDK上的公告来看，似乎可以设置 <em>minSdkVersion</em> 为 Jelly Bean 或者 KitKat。 但… 在将 <em>targetSdkVersion</em> 设为Android N Preview后，<a href="http://stackoverflow.com/questions/36278517/java-8-in-android-n-preview" target="_blank" rel="external">将无法工作在API低于N的设备上<sup class="readableLinkFootnote">[11]</sup></a>。另外，如果你把 <em>minSdkVersion</em> 设置为23或者更低 —— Java 8代码将无法编译。这里是一些在 <a href="http://stackoverflow.com/questions/35929484/android-n-cannot-run-on-lower-api-though-minsdk-set-to-14" target="_blank" rel="external">SO forums<sup class="readableLinkFootnote">[12]</sup></a>的hack，描述了怎么设置minSdk为想要的值并使得app可以工作。我希望你不会在生产代码中使用这种方法 :)</p>
<p>我决定保持实例代码干净，所以没有添加任何hack手段来做低版本兼容，请读者自由去尝试或者使用N的测试设备/模拟器。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">android</span> &#123;</span><br><span class="line">    <span class="title">compileSdkVersion</span> <span class="string">'android-N'</span></span><br><span class="line">    buildToolsVersion <span class="string">'24.0.0 rc1'</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="title">applicationId</span> <span class="string">"org.sergiiz.thermometer"</span></span><br><span class="line">        minSdkVersion <span class="string">'N'</span> // 在 N Preview 中不能使用低于N的版本</span><br><span class="line">        targetSdkVersion <span class="string">'N'</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        jackOptions&#123;</span><br><span class="line">            <span class="title">enabled</span> <span class="built_in">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        <span class="title">targetCompatibility</span> <span class="number">1</span>.<span class="number">8</span></span><br><span class="line">        sourceCompatibility <span class="number">1</span>.<span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意这个设置是跟着新的<a href="http://developer.android.com/preview/j8-jack.html" target="_blank" rel="external">文档<sup class="readableLinkFootnote">[13]</sup></a>来的，使用了新的 Gradle DSL 方法 <em>jackOptions</em> 来配置Jack编译器设置，在更老的版本中，我们使用 <em>useJack true</em> 来达到同样的结果。</p>
<p>所以来试着实现一些Java 8的优雅代码到我们陈旧的Thermometer项目。</p>
<p>这是一个接口，包含了默认方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Thermometer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setCelsius</span><span class="params">(<span class="keyword">final</span> <span class="keyword">float</span> celsiusValue)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">String <span class="title">getSign</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">default</span> String <span class="title">getFormattedValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> String.format(Locale.getDefault(),</span><br><span class="line">            <span class="string">"The temperature is %.2f %s"</span>, getValue(), getSign());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现了这个接口的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FahrenheitThermometer</span> <span class="keyword">implements</span> <span class="title">Thermometer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">float</span> fahrenheitDeg;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FahrenheitThermometer</span><span class="params">(<span class="keyword">float</span> celsius)</span> </span>&#123;</span><br><span class="line">      setCelsius(celsius);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCelsius</span><span class="params">(<span class="keyword">float</span> celsius)</span> </span>&#123;</span><br><span class="line">      fahrenheitDeg = celsius * <span class="number">9</span> / <span class="number">5</span> + <span class="number">32f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fahrenheitDeg;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getSign</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Constants.DEGREE + <span class="string">"F"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加一个点击事件的lambda函数：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">buttonFahrenheit.setOnClickListener(view1 -&gt; &#123;</span><br><span class="line">   fahrenheitThermometer<span class="string">.setCelsius(currentCelsius)</span>;</span><br><span class="line">   String text = fahrenheitThermometer<span class="string">.getFormattedValue()</span>;</span><br><span class="line">   makeText(MainActivity<span class="string">.this</span>, text, Toast<span class="string">.LENGTH_SHORT).show()</span>;</span><br><span class="line">&#125;</span>);</span><br></pre></td></tr></table></figure>
<p>例子的完整源码可见 <a href="https://github.com/sergiiz/AndroidNPreviewJ8" target="_blank" rel="external">GitHub repository<sup class="readableLinkFootnote">[14]</sup></a>。</p>
<h3 id="总结">总结</h3><p>在这篇文章中，我们了解了Java 8的用例，以及目前其在Android N Preview SDK的实现情况。我们也看到了当前Jack编译器的限制，及其在最后发布前可能被修复的功能。在demo项目中我们检验了如何去使用新的Java 8特性，以及它们可以被应用的target SDK版本。</p>
<p>声明：本文已独家授权微信公众号Android程序员（AndroidTrending）在微信公众号平台原创首发。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@sergii/java-8-in-android-n-preview-76184e2ab7ad#.ywf5x3l8w" target="_blank" rel="e]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Java8" scheme="http://blog.zhaiyifan.cn/tags/Java8/"/>
    
      <category term="Java8" scheme="http://blog.zhaiyifan.cn/categories/Java8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目4 - Dagger2篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/03/27/android-new-project-from-0-p4/"/>
    <id>http://blog.zhaiyifan.cn/2016/03/27/android-new-project-from-0-p4/</id>
    <published>2016-03-27T03:14:49.000Z</published>
    <updated>2016-04-01T02:55:01.000Z</updated>
    <content type="html"><![CDATA[<p>Dagger - 匕首，顾名思义，比ButterKnife这把黄油刀锋利得多。Square为什么这么有自信地给它取了这个名字，Google又为什么会拿去做了Dagger2呢（不都有Guice和基于其做的RoboGuice了么）？希望本文能讲清楚为什么要用Dagger2，又如何用好Dagger2。</p>
<p>本文会从Dagger2的起源开始，途径其初衷、使用场景、依赖图，最后介绍一下我在项目中的具体应用和心得体会。</p>
<h1 id="Origin">Origin</h1><p><a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger2</a>，起源于Square的<a href="http://github.com/square/dagger/" target="_blank" rel="external">Dagger</a>，是一个完全在编译期间进行的依赖注入框架，完全去除了反射。</p>
<p>关于Dagger2的最初想法，来自于2013年12月的<a href="https://github.com/square/dagger/issues/366" target="_blank" rel="external">Proposal: Dagger 2.0</a>，Jake大神在issue里面也有回复哦，而idea的来源者<a href="https://github.com/gk5885" target="_blank" rel="external">Gregory Kick</a>的GitHub个人主页也没多少follower，自己也没几个项目，主要都在贡献其他的repository，可见海外重复造轮子的风气比我们这儿好多了。</p>
<p>扯远了，Dagger2的诞生就是源于开发者们对Dagger1半静态化半运行时的不满（尤其是在服务端的大型应用上），想要改造成完整的静态依赖图生成，完全的代码生成式依赖注入解决方案。在权衡了什么对Android更适合，以及对大型应用来说什么更有意义（往往有可怕数量的注入）两者后，Dagger2诞生了。</p>
<h1 id="初衷">初衷</h1><p>Dagger2的初衷就是装逼，啊，不对，是通过依赖注入让你少些很多公式化代码，更容易测试，降低耦合，创建可复用可互换的模块。你可以在Debug包，测试运行包以及release包优雅注入三种不同的实现。</p>
<h2 id="依赖注入">依赖注入</h2><p>说到依赖注入，或许很多以前做过JavaEE的朋友会想到Spring（SSH在我本科期间折磨得我欲生欲死，最后Spring MVC拯救了我）。</p>
<p>我们看个简单的比较图，左边是没有依赖注入的实现方式，右边是手动的依赖注入：<br><img src="/images/android-new-project-from-0-dagger-di.png" alt="Without DI and with Maunl DI"></p>
<p>我们想要一个咖啡机来做一杯咖啡，没有依赖注入的话，我们就需要在咖啡机里自己去new泵(pump)和加热器(heater)，而手动依赖注入的实现则将依赖作为参数，然后传入，而不是自己去显示创建。在没有依赖注入的时候，我们丧失了灵活性，因为一切依赖是在内部创建的，所以我们根本没有办法去替换依赖实例，比如想把电加热器换成火炉或者核加热器，看一看下图，是不是更清晰了：<br><img src="/images/android-new-project-from-0-dagger-di-picture.png" alt="Without DI and with Maunl DI"></p>
<h2 id="为什么我们需要DI库">为什么我们需要DI库</h2><p>但问题在于，在大型应用中，把这些依赖全都分离，然后自己去创建的话，会是一个很大的工作量——毫无营养的公式化代码，一堆Factory类。不仅仅是工作量的问题，这些依赖可能还有顺序的问题，A依赖B，B依赖C，B依赖D，如此一来C、D就必须在A、B的后面，手动去做这些工作简直是一个噩梦 =。=（哈哈，是不是想到了appliation初始化那些依赖）。Google的工程师碰到的问题就是在Android上有3000行这样的代码，而在服务器上的大型程序则是100000行。</p>
<p>你会想自己维护这样的代码吗？</p>
<h2 id="Why_Dagger2">Why Dagger2</h2><p>先来看看如果用Spring实现上面提到的咖啡机依赖，我们需要做什么：<br><img src="/images/android-new-project-from-0-dagger-spring.png" alt="DI with Spring"><br>不错，就是xml，当然，我们也不需要去关心顺序了，Spring会帮我们解决前后顺序的依赖问题。</p>
<p>但仔细想想，你会想去自己写这样的xml代码吗？layout.xml已经写得我很烦了。而且Spring是在运行时验证配置和依赖图的，你不会想在外网运行的app里让用户发现你的依赖注入出了问题的（比如bean名字打错了）。再加上xml和Java代码分离，很难追踪应用流。</p>
<p>Guice虽然较Spring进了一步，干掉了xml，通过Java声明依赖注入比起Spring好找多了，但其跟踪和报错（运行时的图验证）实在令人抓狂，而且在不同环境注入不同实例的配置也挺恶心的（if else各种判断），感兴趣的可以去看看，项目就在GitHub上，Android版本的叫RoboGuice。</p>
<p>而Dagger2和Dagger1的差别在上节已经提到了，更专注于开发者的体验，从半静态变为完全静态，从Map式的API变成申明式API（@Module），生成的代码更优雅，更高的性能（跟手写一样），更简单的debug跟踪，所有的报错也都是在编译时发生的。</p>
<p>Dagger2使用了JSR 330的依赖注入API，其实就是Provider了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line">Provider&lt;T&gt; coffeeMakerProvider = ...;</span><br><span class="line">CoffeeMaker coffeeMaker = coffeeMakerProvider.get();</span><br></pre></td></tr></table></figure></p>
<p>Dagger2基于Component注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Component</span>(modules = DripCoffeModule.class)</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CoffeeMakerComponet</span> </span>&#123;</span><br><span class="line">  <span class="function">CoffeeMaker <span class="title">getCoffeeMaker</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会生成这样的代码，Dagger_CoffeeMakerComponent里面就是一堆Provider，</span></span><br><span class="line"><span class="comment">// 或者是单例，或者是通过DripCoffeeModule申明new的方式，开发者不必关心依赖顺序</span></span><br><span class="line">CoffeeMakerComponent component = Dagger_CoffeeMakerComponent.create();</span><br><span class="line">CoffeeMaker coffeeMaker = component.getCoffeeMaker();</span><br></pre></td></tr></table></figure></p>
<p>除了上面提到的各种好处，不得不提的是也有对应问题：丧失了动态性，在之后的实践中我会举个例子描述一下，但相对于那些好处来说，我觉得是可接受的。Everything has a Price to Pay。啊，对了，还有另一点，没法自动升级，从Dagger1到Dagger2，当然如果你的app是没有历史负担的（本系列的前提），那这不算问题。</p>
<p>如果对性能感兴趣的话，可以去看看<a href="http://blog.nimbledroid.com/2016/03/07/performance-of-dependency-injection-libraries.html" target="_blank" rel="external">Comparing the Performance of Dependency Injection Libraries</a>，RoboGuice:Dagger1:Dagger2差不多是50:2:1的一个性能差距。</p>
<p>如果你用了Dagger2，而你的服务端还在用Spring，你可以自豪地说，我们比你们领先5年。而Google的服务端确实已经用了Dagger2。</p>
<h1 id="使用场景">使用场景</h1><p>上面也曾经提到了，因为手动去维护那些依赖关系、范围很麻烦，就连单例我都懒得写，何况是各种Factory类，老在那synchroized烦不烦。而如果不去写那些Factory，直接new，则会导致后期维护困难，比如增加了一个参数，为了保证兼容性，就只能留着原来的构造函数（习惯好一点的标一下deprecated），再新增一个构造函数。</p>
<p>Dagger2解决了这些问题，帮助我们管理实例，并进行解耦。new只需要写在一个地方，getInstance也再也不用写了。而需要使用实例的地方，只需要简简单单地来一个@inject，而不需要关心是如何注入的。Dagger2会在编译时通过apt生成代码进行注入。</p>
<p>想想你所有可能在多个地方使用的类实例依赖，比如lbs服务，比如你的cache，比如用户设置，比起getInstance，比起new，比起自己用注释去注明必须维持这种先后关系（说到此处，想到上个东家的android app初始化时候，必须保持正确顺序不然立马crash，singleton还必须只能init一次的糟糕代码），为什么不用dagger来做管理？Without any performance overhead。</p>
<p>Dagger2基于编译时的静态依赖图构建还能避免运行时再出现一些坑，比如循环依赖，编译的时候就会报错，而不会在运行时死循环。</p>
<p>生动点来说的话。有一场派对：</p>
<p>Android开发A说，有妹子我才来。<br>美女前端B说，有帅哥设计师，我才来。<br>iOS开发C说，有Android开发，我才来。<br>帅哥设计师说，只有礼拜天我才有空。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndroidDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndroidDeveloper</span><span class="params">(PartyMember female)</span> <span class="keyword">throws</span> NotMeizhiSayBB</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontEndDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FrontEndDeveloper</span><span class="params">(Designer designer)</span> <span class="keyword">throws</span> NotHandsomeBoySayBB</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOSDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IOSDeveloper</span><span class="params">(AndroidDeveloper dev)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Designer</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Designer</span><span class="params">(Date date)</span> throw CannotComeException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSex = <span class="number">0</span>; <span class="comment">// 1 for male, 2 for female.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动DI，要自己想怎么设计顺序，还不能轻易改动</span></span><br><span class="line">Designer designer = <span class="keyword">new</span> Designer(<span class="string">"礼拜天"</span>)；</span><br><span class="line">FrontEndDeveloper dev1 = <span class="keyword">new</span> FrontEndDeveloper(designer);</span><br><span class="line">dev1.setSex(<span class="number">2</span>);</span><br><span class="line">AndroidDeveloper dev2 = <span class="keyword">new</span> AndroidDeveloper(dev1);</span><br><span class="line">IOSDeveloper dev3 = <span class="keyword">new</span> IOSDeveloper(dev2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// With Dagger2</span></span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">Designer designer;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">FrontEndDeveloper dev1;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">AndroidDeveloper dev2;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">IOSDeveloper dev3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用DI太可怕了...自己想象一下会是什么样吧</span></span><br><span class="line">...我懒</span><br></pre></td></tr></table></figure>
<h2 id="Scope">Scope</h2><p>Dagger2的Scope，除了Singleton（root），其他都是自定义的，无论你给它命名PerActivity、PerFragment，其实都只是一个命名而已，真正起作用的是inject的位置，以及dependency。</p>
<p>Scope起的更多是一个限制作用，比如不同层级的Component需要有不同的scope，注入PerActivity scope的component后activity就不能通过@Inject去获得SingleTon的实例，需要从application去暴露接口获得（getAppliationComponent获得component实例然后访问，比如全局的navigator）。</p>
<p>当然，另一方面则是可读性和方便理解，通过scope的不同很容易能辨明2个实例的作用域的区别。</p>
<h1 id="依赖图例子">依赖图例子</h1><p><img src="/images/android-new-project-from-0-dagger-simple-graph.png" alt="Simple Graph"></p>
<p>如上是一个我现在使用的Dagger2的依赖图的简化版子集。</p>
<p>ApplicationComponent作为root，拆分出了3个module</p>
<ul>
<li>ApplicationModule（application context，lbs服务，全局设置等）</li>
<li>ApiModule（Retrofit那堆Api在这里）</li>
<li>RepositoryModule（各种repository）。<br>这里为了妥协内聚和简洁所以保持了这三个module。你不会想看到自己的di package下有一大堆module类，或者某个module里面掺杂着上百个实例注入的。</li>
</ul>
<p>UserComponent用在用户主页、登录注册，以及好友列表页。所以你能看到UserModule（用户系统以及那些UseCase）以及需要的赞Module、相册Module。</p>
<p>TagComponent是标签系统，有自己的标签Module以及赞Module（module重用），用在了标签搜索、热门标签等页面。</p>
<p>是不是很好理解？位于上层的component是看不到下层的，而下层则可以使用上层的，但不能引用同一层相邻component内的实例。</p>
<p>如果你的应用是强登录态的，则更可以只把UserComponent放在第二层，Module构造函数传入uid（PerUser scope，没有uid则为游客态，供deeplink之类使用），而所有需要登录态的则都放在第三层。</p>
<p>一个简单的应用就是这样了，而Component继承，SubComponent（共享的放在上层父类），不同component的module复用（一样可以生成实例绑定，只是没法共享component中暴露的接口罢了）这些则是不同场景下的策略，如果有必要我会再开一篇讲讲这些深入的使用。</p>
<h1 id="具体应用和心得体会">具体应用和心得体会</h1><ul>
<li><p>No Proguard rules need。因为0反射，所以完全不需要去配置proguard规则。</p>
</li>
<li><p>因为需要静态地去inject，如果一些参数需要运行时通过用户行为去获得，就只能使用set去设置注入实例的参数（因为我们的injection通常在最早，比如onCreate就需要执行）。这就是上文提到过的，因为完全静态而丧失了一定的动态性。</p>
</li>
<li><p>Singleton是线程安全的，请放心，如果实在怀疑，可以去检查生成的源码，笔者已经检查过了…</p>
</li>
<li><p>粒度的问题，如果基于页面去划分的话，老实说笔者觉得实在太细太麻烦，建议稍微粗一点，按照大功能去分，完全可以通过拆分module或者SubComponent的形式去解决复用的问题，而不用拆分出一大堆component，module只要足够内聚就可以，而不需要拆分到某个页面使用的那些。</p>
</li>
<li><p>fragment的问题，因为其诡异的生命周期，所以建议在实在需要fragment的时候，让activity去创建component，fragment通过接口（比如HasComponent）去获得component（一个activity只能inject一个component哦）。</p>
</li>
<li><p>举一个我遇到的例子来说说方便的地方，有一个UseCase叫做SearchTag，原先只需要TagRepository，ThreadExecutor，PostThreadExecutor三个参数。现在需求改变了，需要在发起请求前先进行定位，然后把位置信息也作为请求的参数。我们只需要简单地在构造函数增加一个LbsRepository，然后在buildUseCaseObservable通过RxJava组合一下，这样既避免了底层repository的耦合，又对上层屏蔽了复杂性。</p>
</li>
<li><p>再讲讲之前提到的依赖吧，我们有很多同级的实例，以Singleton为例，比如有一个要提供给第三方sdk的Provider依赖了某个Repository，直接在构造函数里加上那个Repository，然后加上@Inject，完全不需要关心前后顺序了，省不省心？还可以随时在单元测试的包注入一个不需要物理环境的模拟repository。想想以前你怎么做，或者在调用这个的初始化前init依赖的实例，或者在初始化里去使用依赖类的getInstance()，是不是太土鳖？</p>
</li>
<li><p>强烈推荐你在自己的项目里使用上，初期可能怀着装逼的心情觉得有点麻烦，熟练后你会发现简直太方便了，根本离不开（其实是我的亲身经历 哈哈）。</p>
</li>
</ul>
<h1 id="总结">总结</h1><p>本篇讲了讲Dagger2，主要还是在安利为什么要用Dagger2，以及一些正确的使用姿势，因为时间原因来不及写个demo来说说具体实现，欢迎大家提出意见和建议。<br>有空的话我最近会在GitHub上写一下demo，你如果有兴趣可以follow一下等等更新: <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a>（希望在4月能完成，哈哈…）。</p>
<h1 id="下集预告">下集预告</h1><p>怎么用Retrofit、Realm和RxJava搭建data层。</p>
<h1 id="参考文献">参考文献</h1><ul>
<li>DAGGER 2 - A New Type of dependency injection: <a href="https://youtu.be/oK_XtfXPkqw" target="_blank" rel="external">https://youtu.be/oK_XtfXPkqw</a></li>
<li>Dagger 2 Official Site: <a href="http://google.github.io/dagger/" target="_blank" rel="external">http://google.github.io/dagger/</a></li>
<li>Dagger 2 Design Doc: <a href="http://goo.gl/mW474Z" target="_blank" rel="external">http://goo.gl/mW474Z</a></li>
</ul>
<h1 id="扩展阅读">扩展阅读</h1><ul>
<li><a href="http://stackoverflow.com/questions/28411352/what-determines-the-lifecycle-of-a-component-object-graph-in-dagger-2" target="_blank" rel="external">What determines the lifecycle of a component (object graph) in Dagger 2?</a></li>
<li><a href="http://frogermcs.github.io/dependency-injection-with-dagger-2-custom-scopes/" target="_blank" rel="external">Dependency injection with Dagger 2 - Custom scopes</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Dagger - 匕首，顾名思义，比ButterKnife这把黄油刀锋利得多。Square为什么这么有自信地给它取了这个名字，Google又为什么会拿去做了Dagger2呢（不都有Guice和基于其做的RoboGuice了么）？希望本文能讲清楚为什么要用Dagger2，又如]]>
    </summary>
    
      <category term="Dagger" scheme="http://blog.zhaiyifan.cn/tags/Dagger/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目3 - MVPVM in Action, 谁告诉你MVP和MVVM是互斥的]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/03/16/android-new-project-from-0-p3/"/>
    <id>http://blog.zhaiyifan.cn/2016/03/16/android-new-project-from-0-p3/</id>
    <published>2016-03-16T02:19:28.000Z</published>
    <updated>2016-03-26T06:47:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>去年5月左右的时候，笔者在逛GitHub的时候，看到了一个MVP的项目，叫做mosby，仔细看了源码和作者介绍的文章后，发现确实有点意思，虽然会需要多写几个类和方法，但是解决了activity/fragment过重的问题，通过V/P分离能够帮助提高可维护性。时至去年年底，今年年初，MVP才逐渐被大家所知，也不时看到些文章介绍其概念和实践。</p>
<p>再说说MVVM (Model-View-ViewModel)，在Android上对应data binding。即ViewModel到View的映射，不需要再去自己找到view，然后更新字段，而是在映射建立后直接更新ViewModel然后反映到View上。</p>
<p>值得一提的是，MVP和MVVM都是微软提出的理念，最早都是在WPF里面被应用的，只是时至今日才在Android上被真正用起来。本文不是来介绍这两个的，所以不再赘述，讲讲正题。</p>
<p>在本系列<a href="http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/">首篇</a>中我曾经提到过在我设计的新应用中，采用了MVP+MVVM的混合（当初也考虑过Flux，但感觉并不合适Android），后来有一次CJJ同学和我探讨这个架构的时候，问到了我有没有什么正式的名字，我就有楞，因为这个组合和应用是我自己设计的，所以还真没想过这个问题，Google一搜，还真有这么个东西（见参考资料，文章写得很棒，建议英文不错的同学读一读）！</p>
<p>这就是本文我要介绍的东西，MVPVM (Model-View-Presenter-ViewModel)。</p>
<h1 id="Quick_glance">Quick glance</h1><p>以下所有Model，并不单单指的是Bean，而是Model层，更像是repository或者business logic。</p>
<p><img src="/images/android-new-project-from-0-mvc.png" alt="MVC"></p>
<p>MVC: View持有Controller，传递事件给Controller，Controller由此去触发Model层事件，Model更新完数据（如从网络或者数据库获得数据后）触发View的更新事件。</p>
<p><img src="/images/android-new-project-from-0-mvp.png" alt="MVP"></p>
<p>乍一看，MVP似乎是MVC的变种，即C的位置被P取代了，但如果我们再看一看下图：</p>
<p><img src="/images/android-new-project-from-0-mvpc.png" alt="MVCP"></p>
<p>其实MVP是MVC的一个wrap，C层仍然可以在那里，代替View处理点击事件、数据绑定、扮演ListView的观察者，从而View可以专注于处理纯视觉的一些东西。而Presenter则避免了Model直接去触发View的更新，View彻底成为了一个被动的东西，只有Presenter告知其更新视觉，它才会去更新，比如showLoading(), showEmpty()。</p>
<p><img src="/images/android-new-project-from-0-mvvm.png" alt="MVVM"></p>
<p>MVVM通过View和ViewModel的双向绑定，让我们可以</p>
<ul>
<li>直接更新ViewModel，View会进行对应刷新</li>
<li>View的事件直接传递到ViewModel，ViewModel去对Model进行操作并接受更新。</li>
</ul>
<h1 id="Why_MVPVM">Why MVPVM</h1><p>如果你仔细读过Clean architecture的源码，会发现其中已经有了ViewModel这一层。如果你熟悉DO（Domain Object），PO（Persistent Object），VO（View Object），或许了解visibility这个概念，各层只需要知道其应该知道的。这些Object代表了完全独立不同的概念。</p>
<p>ViewModel层的必要性，简单举个例子，服务器传来一个Date String，但我们需要显示的是该Date到现在的相对时间描述，比如1分钟前，2天前，为了避免在view中绑定数据时去做这个逻辑，ViewModel会代替来进行这个的转换。</p>
<p>MVVM尽管确实省去了绑定数据到View的boilerplate，但</p>
<ul>
<li>ViewModel引用了View，从而导致ViewModel无法重用于其他View。</li>
<li>并没有解决View层过重的问题，仅仅去掉了数据绑定，尤其对一些复杂业务逻辑的页面。</li>
</ul>
<p>模式的引入都是为了通过可拔插化以提高可复用性，松耦合和尽量小的接口可以给予最大的可复用性，使得组件能重组使用。</p>
<p>所以有了MVPVM：</p>
<p><img src="/images/android-new-project-from-0-mvpvm.png" alt="MVPVM"></p>
<p>在我的个人实践中:</p>
<ul>
<li>Model: data和domain模块组成，包含了Interactor（UseCase）、Repository、Datastore、Retrofit、Realm、DO、部分PO等。</li>
<li>View: Activity/Fragment。</li>
<li>Presenter：Presenter，包含了Subscriber，并通过Dagger2注入UseCase从而减轻耦合。</li>
<li>ViewModel：由Model转换而成，继承BaseObservable或SortedList，大部分直接wrap了model，从而去掉了mapper的boilerplate。通过Data Binding绑定到xml。</li>
</ul>
<p>从Presenter的Subscriber往下都是RxJava的流世界，stream in stream out。如果你原来就应用了MVP或者Clean Architecture，那会发现再加上ViewModel简直太简单了，同时让代码库更小，逻辑更清晰。</p>
<p>接着看看各个组件在MVPVM中的standing。</p>
<h2 id="MVPVM:_Model">MVPVM: Model</h2><p>实际对应的是Repository层，即第一篇文章中提到的data/domain module。具体的Model理论上应该是PO，但我们大部分场景并不需要PO，所以也可以是domain层的DO。</p>
<h2 id="MVPVM:_View">MVPVM: View</h2><p>View对ViewModel不需要了解太多，这样才能保持两者的解耦，两者之间的协议只需要：</p>
<ul>
<li>ViewModel支持View需要展示的properties。</li>
<li>View实现了ViewModel的观察者模式接口（如Listener）。</li>
</ul>
<p>所以这里ViewModel到View是一条虚线，而不是MVVM中的双向实线。</p>
<h2 id="MVPVM:_Presenter">MVPVM: Presenter</h2><p>和在MVP一样，Presenter站在View和Model层之间。这里值得一提的是Presenter到ViewModel是有耦合的，因为Presenter需要把model更新到ViewModel中，也就是map行为，然后调用View的对应接口进行binding。</p>
<p>Presenter是MVPVM中唯一不需要解耦的，它紧紧地与View、ViewModel、Model层耦合。如果你的Presenter被多个View重用了，那你可能需要考虑它是不是更应该作为一个module，比如（第三方）登陆。</p>
<h2 id="MVPVM:_ViewModel">MVPVM: ViewModel</h2><p>MVPVM让ViewModel可以重用，因为它再也不是直接和特定View绑定，而仅仅作为数据到View的一个绑定用展示。ViewModel因为用户操作而触发的事件不再直接对Model进行操作，而由View去负责任务流。ViewModel本身基本没有field，而是通过暴露get方法来让data binding找到对应要显示的property，get方法中直接调用持有的model的对应属性get方法。</p>
<p>理想化的架构是通过一个mapper类进行转换，但我想大部分的程序员面对这个工作都会抓狂，毕竟很多字段其实就是一个复制，而且对性能也有一些影响（遍历list，new对象，一个个字段转换，添加到新的list）。所以折中地，让ViewModel持有Model，在get方法中直接返回对应model的具体字段，在一些特殊的field如相对时间、添加一些描述性字符的地方再去进行拼接和特殊处理。</p>
<p>啊，对了，说到ViewModel，Data Binding现在支持双向绑定了哦，见<a href="https://halfthought.wordpress.com/2016/03/23/2-way-data-binding-on-android/，语法如：" target="_blank" rel="external">https://halfthought.wordpress.com/2016/03/23/2-way-data-binding-on-android/，语法如：</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:text</span>=<span class="value">"@=&#123;user.firstName&#125;"</span> <span class="attribute">...</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>不同于单向绑定的@{}，使用了@={}，毕竟双向绑定这个东西还是慎用，一方面早成数据流混乱不好理解，另一方面容易出现死循环。</p>
<h2 id="NO_Presenter">NO Presenter</h2><p>在MVP中，我们有时候碰到的问题是，Presenter真的有必要存在吗，尤其是一些较为静态，没什么业务逻辑，只需要纯展示的页面，结果就是为了MVP而特意去创建一个Presenter。</p>
<p>所以Presenter不应该被强求，正如MVP中，V和C其实被并在了一起，在某些情况下（确实就是个纯展示，或者很少的业务逻辑），应该允许去Presenter，并让View承担其任务。比如注册页面，我真的就只是想把用户的输入发到服务器验证一下，何必非得去搞一个presenter套着呢？</p>
<p>我们不能永远理想化地去选择所谓最好的设计，在现实的必要情况下，我们要敢于舍弃，最合适的设计才是最好的设计。为此，Presenter不是强制的；为此，ViewModel并不一定通过mapper生成，而可以返回持有的DO对象对应字段。</p>
<h1 id="总结">总结</h1><p>本篇讲了讲MVPVM及其在Android的实践，因为时间原因来不及写个demo来说说具体实现，欢迎大家提出意见和建议。有空的话我最近会在GitHub上写一下demo，你如果有兴趣可以follow一下等等更新: <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a>。</p>
<h1 id="下集预告">下集预告</h1><p>Dagger匕首，比ButterKnife黄油刀锋利得多。Square为什么这么有自信地给它取了这个名字，Google又为什么会拿去做了Dagger2呢？笔者看了很多国内Dagger2的文章，但发现它们都保留在介绍API和官网翻译的层面，无法让读者能明白究竟为什么用Dagger2，又如何用好Dagger2。希望能在下一次为大家讲清楚。</p>
<h1 id="参考资料">参考资料</h1><ul>
<li><a href="https://msdn.microsoft.com/en-us/magazine/hh580734.aspx" target="_blank" rel="external">MVPVM Design Pattern - The Model-View-Presenter-ViewModel Design Pattern for WPF</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>去年5月左右的时候，笔者在逛GitHub的时候，看到了一个MVP的项目，叫做mosby，仔细看了源码和作者介绍的文章后，发现确实有点意思，虽然会需要多写几个类和方法，但是解决了activity/fragment过重的问题，通过V/P分离]]>
    </summary>
    
      <category term="MVP" scheme="http://blog.zhaiyifan.cn/tags/MVP/"/>
    
      <category term="MVPVM" scheme="http://blog.zhaiyifan.cn/tags/MVPVM/"/>
    
      <category term="MVVM" scheme="http://blog.zhaiyifan.cn/tags/MVVM/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目2 - Gradle篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/"/>
    <id>http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/</id>
    <published>2016-03-14T05:52:39.000Z</published>
    <updated>2016-03-14T09:16:34.000Z</updated>
    <content type="html"><![CDATA[<p>相信大家的项目用上gradle都已经很久了，但用得如何呢？这里分享一下我的gradle脚本，大部分都是去年6月左右就开始用上的，有一部分比如签名的安全保存则是最近才自己动手，做了令自己觉得还不错的方案。</p>
<h1 id="module类型的区分">module类型的区分</h1><p>科普小结，可能有些同学不太明白Java library module和Android library module是怎么区分的，其实就是个plugin的区别，在module的build.gradle中:</p>
<p>Android application module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br></pre></td></tr></table></figure></p>
<p>Android library module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br></pre></td></tr></table></figure></p>
<p>Java library module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br></pre></td></tr></table></figure></p>
<h1 id="版本号管理">版本号管理</h1><p>如果只有一个application module还好，如果我们有多个module怎么办呢？每次改版本号累不累？</p>
<p>解决方案就是在root里申明全局变量，可以在单独的gradle里（比如新建一个dependency.gradle）申明然后apply from引用进来，或者直接定义在root的build.gradle中。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">project.ext &#123;</span><br><span class="line">    applicationId = <span class="string">"com.xxx"</span></span><br><span class="line">    buildToolsVersion = <span class="string">"23.0.2"</span></span><br><span class="line">    compileSdkVersion = <span class="number">23</span></span><br><span class="line">    minSdkVersion = <span class="number">14</span></span><br><span class="line">    targetSdkVersion = <span class="number">23</span></span><br><span class="line">    versionCode = <span class="number">1</span></span><br><span class="line">    versionName = <span class="string">"1.0.0"</span></span><br><span class="line">    abortOnLintError = <span class="literal">false</span></span><br><span class="line">    checkLintRelease = <span class="literal">false</span></span><br><span class="line">    useJack = <span class="literal">false</span></span><br><span class="line">    abortOnLintError = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    javaVersion = JavaVersion.VERSION_1_8</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在子module里面则使用rootProject.ext去进行引用:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId rootProject.ext.applicationId</span><br><span class="line">        minSdkVersion rootProject.ext.minSdkVersion</span><br><span class="line">        targetSdkVersion rootProject.ext.targetSdkVersion</span><br><span class="line">        versionCode rootProject.ext.versionCode</span><br><span class="line">        versionName rootProject.ext.versionName</span><br><span class="line">        multiDexEnabled <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">        exclude <span class="string">'LICENSE.txt'</span></span><br><span class="line">        exclude <span class="string">'META-INF/DEPENDENCIES'</span></span><br><span class="line">        exclude <span class="string">'META-INF/ASL2.0'</span></span><br><span class="line">        exclude <span class="string">'META-INF/NOTICE'</span></span><br><span class="line">        exclude <span class="string">'META-INF/LICENSE'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError rootProject.ext.abortOnLintError</span><br><span class="line">        checkReleaseBuilds rootProject.ext.checkLintRelease</span><br><span class="line">        quiet <span class="literal">true</span></span><br><span class="line">        ignoreWarnings <span class="literal">true</span></span><br><span class="line">        <span class="comment">// Some libraries have issues with this.</span></span><br><span class="line">        disable <span class="string">'InvalidPackage'</span></span><br><span class="line">        <span class="comment">// Lint gives this warning but SDK 20 would be Android L Beta.</span></span><br><span class="line">        disable <span class="string">'OldTargetApi'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="依赖管理">依赖管理</h1><p>那么多第三方库的引用，在多个module里引用，修改起版本号来好辛苦，万一有一个漏改了（比如gson）结果导致了异常行为，搞不好查原因查个半天，结果摔键盘竟然是版本号导致的。</p>
<p>so，和上节类似，我们需要统一定义依赖:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> daggerVersion = <span class="string">"2.0.2"</span></span><br><span class="line"><span class="keyword">def</span> retrofitVersion = <span class="string">"2.0.0-beta4"</span></span><br><span class="line"><span class="keyword">def</span> supportVersion = <span class="string">"23.2.1"</span></span><br><span class="line"><span class="keyword">def</span> rxBindingVersion = <span class="string">'0.4.0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> leakCanaryVersion = <span class="string">"1.3.1"</span></span><br><span class="line"><span class="keyword">def</span> blockCanaryVersion = <span class="string">'1.1.4'</span></span><br><span class="line"></span><br><span class="line">project.ext &#123;</span><br><span class="line">    ...</span><br><span class="line">    libSupportAppcompat = <span class="string">"com.android.support:appcompat-v7:$&#123;supportVersion&#125;"</span></span><br><span class="line">    libSupportDesign = <span class="string">"com.android.support:design:$&#123;supportVersion&#125;"</span></span><br><span class="line">    libSupportRecyclerview = <span class="string">"com.android.support:recyclerview-v7:$&#123;supportVersion&#125;"</span></span><br><span class="line">    libSupportV4 = <span class="string">"com.android.support:support-v4:$&#123;supportVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    libRxAndroid = <span class="string">"io.reactivex:rxandroid:1.1.0"</span></span><br><span class="line">    libRxJava = <span class="string">"io.reactivex:rxjava:1.1.1"</span></span><br><span class="line">    libEventBus = <span class="string">"org.greenrobot:eventbus:3.0.0"</span></span><br><span class="line">    libJavaxAnnotation = <span class="string">"javax.annotation:jsr250-api:1.0"</span></span><br><span class="line"></span><br><span class="line">    libGson = <span class="string">"com.google.code.gson:gson:2.4"</span></span><br><span class="line">    libRetrofit = <span class="string">"com.squareup.retrofit2:retrofit:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitConverterGson = <span class="string">"com.squareup.retrofit2:converter-gson:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitAdapterRxJava = <span class="string">"com.squareup.retrofit2:adapter-rxjava:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libOkHttpLoggingInterceptor = <span class="string">"com.squareup.okhttp3:logging-interceptor:3.0.0-RC1"</span></span><br><span class="line"></span><br><span class="line">    libDagger = <span class="string">"com.google.dagger:dagger:$&#123;daggerVersion&#125;"</span></span><br><span class="line">    libDaggerCompiler = <span class="string">"com.google.dagger:dagger-compiler:$&#123;daggerVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    libGlide = <span class="string">"com.github.bumptech.glide:glide:3.7.0"</span></span><br><span class="line"></span><br><span class="line">    libRxBinding = <span class="string">"com.jakewharton.rxbinding:rxbinding:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingSupportV4 = <span class="string">"com.jakewharton.rxbinding:rxbinding-support-v4:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingAppcompatV7 = <span class="string">"com.jakewharton.rxbinding:rxbinding-appcompat-v7:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingDesign = <span class="string">"com.jakewharton.rxbinding:rxbinding-design:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingRecyclerview = <span class="string">"com.jakewharton.rxbinding:rxbinding-recyclerview-v7:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    libRealm = <span class="string">"io.realm:realm-android:0.87.5"</span></span><br><span class="line"></span><br><span class="line">    debugDependencies = [</span><br><span class="line"><span class="label">            leakCanary:</span> <span class="string">"com.squareup.leakcanary:leakcanary-android:$&#123;leakCanaryVersion&#125;"</span>,</span><br><span class="line"><span class="label">            blockcanary:</span> <span class="string">"com.github.moduth:blockcanary-ui:$&#123;blockCanaryVersion&#125;"</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    releaseDependencies = [</span><br><span class="line"><span class="label">            leakCanary:</span> <span class="string">"com.squareup.leakcanary:leakcanary-android-no-op:$&#123;leakCanaryVersion&#125;"</span>,</span><br><span class="line"><span class="label">            blockcanary:</span> <span class="string">"com.github.moduth:blockcanary-no-op:$&#123;blockCanaryVersion&#125;"</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里也可以根据个人喜好把版本号也全都抽出去，我个人的实践原则是除非引用超出1处，否则还是定义在一起。</p>
<p>module中使用:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">include:</span> [<span class="string">'*.jar'</span>], <span class="string">dir:</span> <span class="string">'libs'</span>)</span><br><span class="line">    ...</span><br><span class="line">    apt rootProject.ext.libDaggerCompiler</span><br><span class="line">    compile rootProject.ext.libDagger</span><br><span class="line">    compile rootProject.ext.libRxJava</span><br><span class="line">    compile rootProject.ext.libRxAndroid</span><br><span class="line">    compile rootProject.ext.libRxBinding</span><br><span class="line">    compile rootProject.ext.libGlide</span><br><span class="line">    provided rootProject.ext.libJavaxAnnotation</span><br><span class="line">    compile rootProject.ext.libSupportAppcompat</span><br><span class="line">    compile rootProject.ext.libSupportDesign</span><br><span class="line">    compile rootProject.ext.libSupportRecyclerview</span><br><span class="line">    compile rootProject.ext.libSupportV4</span><br><span class="line">    debugCompile rootProject.ext.debugDependencies.leakCanary</span><br><span class="line">    releaseCompile rootProject.ext.releaseDependencies.leakCanary</span><br><span class="line">    debugCompile rootProject.ext.debugDependencies.blockCanary</span><br><span class="line">    releaseCompile rootProject.ext.releaseDependencies.blockCanary</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里我还特地为一些debug和release compile不同包的定义了2个map，见leakCanary和blockCanary引用。</p>
<h1 id="签名管理">签名管理</h1><p>签名是一个很敏感的东西，只要有了签名文件和对应的密码信息，就能轻易反编译修改源码然后再签名进行发布，因此如何保存这些敏感信息是很重要的。</p>
<p>在我的个人实践中，主要做了这么几点：</p>
<p>local.properties定义keystore信息文件路径:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keystore<span class="class">.props</span><span class="class">.file</span>=../keystore.properties</span><br></pre></td></tr></table></figure></p>
<p>keystore.properties保存keystore信息:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">store=<span class="value">../buildsystem/release.jks</span></span></span><br><span class="line"><span class="setting">alias=<span class="value">xxx</span></span></span><br><span class="line"><span class="setting">storePass=<span class="value">xxx</span></span></span><br><span class="line"><span class="setting">pass=<span class="value">xxx</span></span></span><br></pre></td></tr></table></figure></p>
<p>buildsystem下保存了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">ci.gradle</span><br><span class="line">debug.keystore</span><br><span class="line">release.jks</span><br></pre></td></tr></table></figure></p>
<p>application module的signingConfigs:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> Properties localProps = <span class="keyword">new</span> Properties()</span><br><span class="line">    localProps.load(<span class="keyword">new</span> FileInputStream(file(<span class="string">'../local.properties'</span>)))</span><br><span class="line">    <span class="keyword">def</span> Properties keyProps = <span class="keyword">new</span> Properties()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果读取不到'keystore.props.file'属性，就使用debug keystore</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (localProps[<span class="string">'keystore.props.file'</span>]) &#123;</span><br><span class="line">        keyProps.load(<span class="keyword">new</span> FileInputStream(file(localProps[<span class="string">'keystore.props.file'</span>])))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        keyProps[<span class="string">"store"</span>] = <span class="string">'../buildsystem/debug.keystore'</span></span><br><span class="line">        keyProps[<span class="string">"alias"</span>] = <span class="string">'android'</span></span><br><span class="line">        keyProps[<span class="string">"storePass"</span>] = <span class="string">'androiddebugkey'</span></span><br><span class="line">        keyProps[<span class="string">"pass"</span>] = <span class="string">'android'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    debug &#123;</span><br><span class="line">        storeFile file(keyProps[<span class="string">"store"</span>])</span><br><span class="line">        keyAlias keyProps[<span class="string">"alias"</span>]</span><br><span class="line">        storePassword keyProps[<span class="string">"storePass"</span>]</span><br><span class="line">        keyPassword keyProps[<span class="string">"pass"</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    release &#123;</span><br><span class="line">        <span class="comment">// release版本使用assert确保存在该属性否则报错，避免错误打包</span></span><br><span class="line">        <span class="keyword">assert</span> localProps[<span class="string">'keystore.props.file'</span>];</span><br><span class="line">        storeFile file(keyProps[<span class="string">"store"</span>])</span><br><span class="line">        keyAlias keyProps[<span class="string">"alias"</span>]</span><br><span class="line">        storePassword keyProps[<span class="string">"storePass"</span>]</span><br><span class="line">        keyPassword keyProps[<span class="string">"pass"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Java8支持">Java8支持</h1><p>对Android的module<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'me.tatarka.retrolambda'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对Java的module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line">targetCompatibility = <span class="number">1.8</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Split_APK">Split APK</h1><p>详细的可以看看Google的官方文档<a href="http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits" target="_blank" rel="external">Apk Splits</a></p>
<p>我的使用:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">splits &#123;</span><br><span class="line">    abi &#123;</span><br><span class="line">        enable <span class="literal">true</span></span><br><span class="line">        reset()</span><br><span class="line">        include <span class="string">'armeabi'</span>, <span class="string">'x86'</span> <span class="comment">//, 'x86', 'armeabi-v7a', 'mips'</span></span><br><span class="line">        universalApk <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>大致来说，就是可以根据脚本的配置，将apk以abi、density进行分包。再也不用为了缩小包的体积而专门去只留下一个arm的jni文件夹了，想怎么分怎么分，搞不定哪天就要传一个x86的包了，而且有的模拟器也只支持x86。</p>
<p>当然如果市场能支持这些配置，那就更好了，用户下载apk的流量就小多了。</p>
<h1 id="Module_aar依赖">Module aar依赖</h1><p>怎么能在使用aar依赖提升编译速度的同时，又能兼顾灵活性，随时可以修改源码呢？</p>
<p>解决方案就是module式aar依赖。</p>
<p>在你的library module目录下, 打开build/outputs/aar，是不是有aar文件（编译过后就会生成）？把它放到module目录下面，然后在build.gradle里面:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configurations.maybeCreate(<span class="string">"default"</span>)</span><br><span class="line">artifacts.add(<span class="string">"default"</span>, file(<span class="string">'lib_authorize-debug.aar'</span>))</span><br></pre></td></tr></table></figure>
<p>再把原来那些脚本给注释了，就搞定了。是不是特别简单？如果想再使用源码依赖，反注释一下就好了。</p>
<h1 id="总结">总结</h1><p>本篇主要讲了开发阶段gradle的各种实践，下一篇是什么暂时我也没有想法，哈哈。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>相信大家的项目用上gradle都已经很久了，但用得如何呢？这里分享一下我的gradle脚本，大部分都是去年6月左右就开始用上的，有一部分比如签名的安全保存则是最近才自己动手，做了令自己觉得还不错的方案。</p>
<h1 id="module类型的区分">module类型的区]]>
    </summary>
    
      <category term="Gradle" scheme="http://blog.zhaiyifan.cn/tags/Gradle/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目1 - 架构搭建篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/"/>
    <id>http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/</id>
    <published>2016-03-14T02:04:18.000Z</published>
    <updated>2016-03-27T14:26:55.000Z</updated>
    <content type="html"><![CDATA[<p>最近一直在忙新项目的事情，所以有的坑一直没填。。现在看来可能一时半会儿还填不了，倒不如记录一下新项目的搭建。</p>
<p>试想一下，如果没有历史负担，没有KPI压力，去新搭建一个项目，你会怎么设计和实现呢？</p>
<p>本系列文章不是教你怎么从0开始学Android，从0开始怎么建一个项目，而定位于零负担的情况下，在2016年怎么去创建一个好的Android项目，其中一部分技术并不太适合刚入门的初学者。</p>
<p><img src="/images/android-new-project-from-1-p1-1.png" alt="architecture"></p>
<h1 id="Application_specific">Application specific</h1><p>类似clean architecture，分为三层 presentation - data - domain。</p>
<p>关于Clean Architecture由于国内的一些文章和项目都多少有偏离和错误，建议直接看</p>
<ul>
<li><a href="http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/" target="_blank" rel="external">http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/</a></li>
<li><a href="http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/" target="_blank" rel="external">http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/</a></li>
</ul>
<p>两篇文章。</p>
<p>domain为纯领域模型，是Java library，包含了use case(Interactor)、DO、repository接口等domain package，目标是在任何Java语言的平台上都能直接使用，所以必须是平台无关，对平台没有任何依赖，能使用Java的方法（JUnit + Mockito）来直接进行测试。</p>
<p>data为domain的实现，是Android library，从MVP的角度来说，即是M层，内部隐藏所有数据细节，cache、数据库、网络、PO、exception（根据业务特点自定义的exception）、repository的具体实现（内部屏蔽数据细节，可能来自网络、数据库、缓存等）。使用Robolectric 3 + JUnit + Mockito进行集成测试。</p>
<p>presentation即展示层，是Android application module，对data不存在实际感知，依赖仅仅是Dagger注入的实例化，所有访问都通过接口进行，可见的是domain里的接口。包含了error message factory(所有exception都会被factory生成对应的message)、DI、mapper（vo转换）、VO（data binding进行MVVM）、navigation、presenter（不强制，仅在一些特别复杂的场景引入）、usersystem、utils（业务相关）、view（activity、fragment、adapter等）、application实现、业务常量等。可以使用Espresso和Android Instrumentation进行UI测试。</p>
<p>整个项目类似MVP+MVVM的混合（谁跟你说的MVP和MVVM是互斥的？），不过P层不一定存在，以避免为了模式而模式所导致的开发压力。</p>
<h1 id="Common_libraries">Common libraries</h1><p>aar依赖以避免对编译速度造成影响，不过这里比较巧妙的是依赖作为module引入，所以当需要源码依赖的时候在build.gradle里进行注释/反注释就能迅速切换，十分方便。</p>
<p>lib_uiframework: UI framework，包含了各种Base类，如BaseActivity、BaseFragment、Navigator（应用中的一切通过scheme跳转）、ActivityManager、FragmentBackHelper等。</p>
<p>lib_uikit: 各种自定义view、第三方view的gradle或者源码依赖。</p>
<p>lib_im: 即时通讯库。</p>
<p>lib_component: 组件库，如cache、gif、ClassLoaderInjecter、Log、SP、Web等。</p>
<p>lib_authorize: 第三方认证(登陆)，目前包括QQ、微信、微博、LinkedIn。</p>
<p>lib_share: 第三方分享，目前包括QQ、微信、微博。</p>
<p>…等等</p>
<h1 id="Third_party_libraries">Third party libraries</h1><p>Dagger, jsr250: 依赖注入框架让我们省了很多代码，jsr250则是Dagger注入时的一个annotation根据，我们的domain依赖了jsr250。</p>
<p>Rx大家族: RxJava, RxAndroid, RxBinding。新时代Android开发必备，还用说吗？</p>
<p>Retrofit: 装逼，喔，不对，高效率开发必备的网络框架。使用注解生成API，方便极了。我这里的实践是根据业务划分多个API接口，然后通过Dagger module进行实例化注入。</p>
<p>EventBus: 有了RxJava还要EventBus？当然，事件并不总是一对一的，也不总是流式的（可能是持续被动的）。举个简单的例子，feed详情信息更新后（比如点赞数据），外部可能有2个timeline页面也需要更新这个数据，这个时候EventBus就可以优雅地进行事件广播。</p>
<p>Realm：一个不依赖于SqlLite的ORM库，特点就是…快。还有同时有多个平台的方案: ReactNative, OC, Swift, Java…</p>
<p>Google Support库, data binding: Google家的，不用说了吧。</p>
<p>LeakCanary, <a href="https://github.com/moduth/blockcanary" target="_blank" rel="external">BlockCanary</a>: 开发阶段必备工具，前者是square家检测内存泄露的，后者是我自己做的卡顿检测工具。</p>
<p>Glide, Glide Transformation: 不折腾fresco，乖乖用Glide。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近一直在忙新项目的事情，所以有的坑一直没填。。现在看来可能一时半会儿还填不了，倒不如记录一下新项目的搭建。</p>
<p>试想一下，如果没有历史负担，没有KPI压力，去新搭建一个项目，你会怎么设计和实现呢？</p>
<p>本系列文章不是教你怎么从0开始学Android，从]]>
    </summary>
    
      <category term="Android Architecture" scheme="http://blog.zhaiyifan.cn/tags/Android-Architecture/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android逆向分析(3) Android可执行文件之谜 - DEX与ODEX, OAT与ELF]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/24/android-reverse-3/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/24/android-reverse-3/</id>
    <published>2016-02-24T15:09:12.000Z</published>
    <updated>2016-02-24T06:47:05.000Z</updated>
    <content type="html"><![CDATA[<p><strong>WORKING - 未完</strong></p>
<h1 id="前言">前言</h1><p>米娜桑，是时候揭开DEX的面纱了！我们都知道multidex，都知道65535方法数超标，那DEX到底是个什么东西呢？或许又有些同学知道DEX会优化为ODEX，那ODEX又是什么鬼，优化了什么呢？为什么ClassLoader热补丁方案插入构造函数导致CLASS_ISPREVERIFIED为false后，会对性能造成影响，和ODEX又有什么关系呢？</p>
<p>我们又知道5.0以上Android虚拟机变成了Art，那DEX在art上变成了什么呢？为什么安装特别耗时间？有时候我看着我的Nexus6安装一个应用在那进度条读啊读的好像卡住了，有一种想砸了它的想法，所以当我拿到Nexus 5测试机的时候，第一件事就是刷到4.4，不然每次安装的效率实在不能忍（捂脸）。</p>
<h1 id="DEX是什么">DEX是什么</h1><p>直接把apk当成zip打开后，第一级目录你就会看见有classes.dex，这就是我们要揭开面纱的东西了。</p>
<h2 id="Why_DEX">Why DEX</h2><p>为什么需要DEX，jar不行吗？相应地，为什么需要Dalvik虚拟机，JVM不行吗？</p>
<p>Dalvik虚拟机是专门为了Android移动平台设计的。目标系统的RAM有限，数据存储在缓慢的内部闪存上，而且性能和上个世纪的周免系统相当。它们运行Linux，来提供虚拟内存，进程和线程，以及基于UID的安全机制。</p>
<p>这些特征和限制使我们聚焦在这些目标上：</p>
<ul>
<li>类数据，尤其是字节码，必须被多个进程共享，以最小化系统内存使用。</li>
<li>启动一个新app的开销必须最小化，来保证设备的可响应。</li>
<li>在独立的文件存储类数据可能导致很多冗余，尤其是字符串。为了保证磁盘空间，我们需要把这些因子提出来。</li>
<li>解析类数据的fields在类加载的时候增加了很多不必要的开销。把数据值直接当成C类型（比如整数或字符串）使用会更好。</li>
<li>字节码验证是必要的，却也是缓慢的。所以我们想在app执行外尽量验证更多，以便不要影响app本身体验。</li>
<li>字节码优化（加速指令，精简方法）对速度和电池生命很重要。</li>
<li>为了安全原因，进程不能编辑共享代码。</li>
</ul>
<p>典型的虚拟机执行从压缩文件解压独立的类，然后把它们存到heap上。这就导致了每个类可能在每个进程有独立的拷贝，从而使得应用启动变慢，因为代码必须被解压（或者至少需要从磁盘的很多小片段去读取）。另一方面，在本地heap放置字节码简化了首次使用时的指令重写，从而可能导致一些不同的优化。</p>
<p>这些目标指引了一些基本决定：</p>
<ul>
<li>多个类被聚集到一个单个的DEX文件。</li>
<li>DEX文件被映射为只读，并且在进程间共享。</li>
<li>针对本地系统调整字节码顺序和词对齐。</li>
<li>字节码验证对所有类都是强制的，但我们想要对一切可能的进行”预验证(pre-verify)”。</li>
<li>需要重写字节码的优化必须提前执行。</li>
</ul>
<p>而Dalvik虚拟机和DEX也就应运而生。</p>
<h2 id="Hello_DEX">Hello DEX</h2><p>让我们手动来生成一个java，编译成javac，然后转换为dex看看:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'class Foo &#123;'</span>\</span><br><span class="line"><span class="string">'public static void main(String[] args) &#123;'</span>\</span><br><span class="line"><span class="string">'System.out.println("Hello, world"); &#125;&#125;'</span> &gt; Foo.java</span><br><span class="line">javac Foo.java</span><br><span class="line">dx --dex --output=foo.jar Foo.class</span><br><span class="line">adb push foo.jar /sdcard/</span><br><span class="line">adb shell dalvikvm -cp /sdcard/foo.jar Foo</span><br></pre></td></tr></table></figure></p>
<p>当我们在dx命令的output中指定输出文件后缀为.jar，.zip，或者.apk，名为classes.dex的文件就会被创建并保存在压缩包内。解开Foo.jar你就会看到classes.dex和META-INF文件夹（里面只有一个MANIFEST.MF文件）。</p>
<p>我们创建完该jar后直接push到设备上，并通过shell直接让dalvik虚拟机去运行它，如果操作无误，会看到命令行的反馈 - Hello, world。</p>
<h2 id="DEX_in_file_system">DEX in file system</h2><p>这次我打算多画点图，所以看图说话吧:<br><img src="http://blog.zhaiyifan.cn/images/android-reverse-3-1.png" alt="DEX in file system"></p>
<h2 id="DEX_in_memory">DEX in memory</h2><p>为什么DEX不能被内存映射，或者说，不能直接从zip去执行呢？因为数据是压缩的，文件头也不保证是词对齐的。这些问题可以通过不压缩直接保存为classes.dex和填充zip文件来解决，但会导致数据网络间传输的包体积变大。</p>
<p>我们需要在使用前把zip包里的classes.dex解压。当我们拿到文件的时候，我们可能还会做些之前提到的其他操作（对齐、优化、验证）。这又引出了另一个问题：谁去负责做这些，我们又该把输出放在哪儿？</p>
<h1 id="ODEX是什么">ODEX是什么</h1><p>ODEX，全名Optimized DEX，即优化过的DEX。</p>
<p>有至少3种方法去创建一个“准备好的”DEX文件，即ODEX：</p>
<ol>
<li>虚拟机“即时(just in time)”执行。输出会跑到一个特殊的dalvik-cache目录。这只在一些特殊的桌面和工程机的设备上使用（这些机器的build中，dalvik-cache目录的权限不是严格的）。在生产机器上这是不被允许的。</li>
<li>系统的安装器在程序首次安装时候执行，它有写dalvik-cache的权限。</li>
<li>构建(build)系统预先执行。相关的 jar / apk 文件还在，但classes.dex被剥离出来了。ODEX和原来的zip包保存在一起，不在dalvik-cache，而是系统镜像的一部分。</li>
</ol>
<p>dalvik-cache目录更准确地说是$ANDROID_DATA/data/dalvik-cache。里面的文件的名字来源于源DEX的完整路径。在设备上该目录被system所拥有，而system拥有0771权限，保存在那里的ODEX被系统和应用的组所拥有，权限为0644。数字权限保护的应用会使用640权限来防止其他应用去检测它们。底线是你可以读取自己的与其他大部分应用的DEX文件，但你不能创建、修改，或删除它们。</p>
<p>前两种方法的执行分为以下三个步骤：</p>
<p>首先，dalvik-cache文件被创建。这必须在一个有恰当权限的进程进行，所以在“系统安装器”的场景，是在运行为root的installd进程执行的。</p>
<p>接着，classes.dex从zip包中解压出来。文件头部留出一小块空间给ODEX header。</p>
<p>最后，文件被内存映射以便访问，并被为当前系统使用进行调整。这包括了字节交换（byte-swapping），结构重新排列（structure realigning），但并没有对DEX文件做有意义的改变。还做了一些其他的基本结构检查，比如确保文件偏移量和数据索引落在有效范围内。</p>
<p>构建系统不在桌面上运行工具，而宁愿去启动模拟器，强制所有相关DEX文件的即时优化，然后从dalvik-cache把结果提取出来。这样做的原因，在解释完优化后会变得更显而易见。</p>
<p>一旦代码被字节替换和对齐，我们就可以继续了。我们添加了一些预计算的数据，在文件头填写ODEX header，然后开始执行。然而，如果我们对验证和优化有兴趣，就需要在初始准备后再插入一个步骤。</p>
<h1 id="dexopt的魔法">dexopt的魔法</h1><p>在Android 2.3版本以前，系统源码中提供了生成odex的工具dexopt-wrapper，位于Android 2.2系统源码的 build/tools/dexpreopt/dexopt-wrapper/ 目录下，查看<code>DexOptWrapper.cpp</code>文件会发现实际调用的是 /system/bin/dexopt 程序。在5.0及以上版本的设备上，你可能已经再也找不到dexopt了，取而代之的是dex2oat。</p>
<p>我们想要验证和优化DEX文件里的所有类。最简单和安全的方法就是把所有类加载到虚拟机，然后跑一遍。任何加载失败的就是验证/优化失败的。不幸的是，这可能导致一些资源的分配难以释放（比如native共享库的加载），所以我们不想执行在应用运行的虚拟机里。</p>
<p>解决方案就是起一个叫做dexopt的程序（事实上就是虚拟机的后门）。它会执行一个简短的虚拟机初始化，从引导的类路径加载0个或多个DEX文件，然后开始做一切从目标DEX可以做的验证和优化。结束后，进程退出，释放所有资源。</p>
<p>因为多个虚拟机可能同时需求同一个DEX文件，文件锁被用来确保dexopt仅被执行一次。</p>
<h2 id="验证">验证</h2><p>字节码验证过程包含了扫描DEX文件中每一个类每个方法的指令。目的是为了识别非法指令序列以便不会在运行时才发现它们。涉及到的很多运算对“准确的”GC也是必要的。更多信息见<a href="http://crypto.nknu.edu.tw/AOSP/AOSP/dalvik/docs/verifier.html" target="_blank" rel="external">Dalvik字节码验证器笔记</a>。</p>
<p>为了性能原因，（下节描述的）优化器假设验证器已经运行成功，还会做一些其他可能不安全的假设。默认地，Dalvik会坚持验证所有类，并只优化那些被验证过的类。可以使用命令行flags去禁用验证器。怎么在Android应用框架中控制这些功能的指令见<a href="http://security.nknu.edu.tw/AOSP/AOSP/dalvik/docs/embedded-vm-control.html" target="_blank" rel="external">控制嵌入式虚拟机</a>。</p>
<p>验证失败的报告是一个复杂的问题。例如，在不同的package中，调用一个package内可见的方法是非法的，会被验证器捕捉到。但我们未必想要在验证期报告它 —— 事实上我们想要在试图调用方法的时候抛出异常。在每个方法调用上检查这些访问flags也是很昂贵的，<a href="http://crypto.nknu.edu.tw/AOSP/AOSP/dalvik/docs/verifier.html" target="_blank" rel="external">Dalvik字节码验证器笔记</a>提到了这个问题。</p>
<p>成功被验证的类在ODEX有一个flag被设置了，在加载的时候就不会被重新验证。ODEX文件有一个32位的checksum，但那是主要是用来快速检查数据损坏的。</p>
<h2 id="优化">优化</h2><p>虚拟机解释器通常会在一段代码被首次使用的时候执行某些优化。常量池引用被指向内部数据结构的指针所替代，总是成功的操作或是那些总会以某种方式工作的，会被更简单的形式所替代。这些的一部分需要仅在运行时可用的信息，另一部分在某些特定假设下可以被静态推论出。</p>
<p>Dalvik优化器做了这些：</p>
<ul>
<li>对于虚方法调用，把方法索引替换为vtable索引。</li>
<li>对于实例变量（field）的get/put，把变量索引替换为字节偏移。另外，把 boolean / byte / char / short 基本变量（variants）合并到单个的32位形式（解释器里更少的代码意味着CPU I-cache里更少的空间）。</li>
<li>替换一些高频次调用，比如把 String.length() 替换成”内联“的。这可以跳过一些常见的方法调用消耗，直接从解释器切换到native实现。</li>
<li>删除空方法。最简单的例子就是Object.<init>，啥都没干，但却必须在任何对象被分配的时候执行。指令会被替换为一个新版本的空指令（no-op）形式，除非调试器被attach上去了。</init></li>
<li>附加预计算数据。例如，虚拟机想要一个类名的哈希表以便查找。不同于在加载DEX文件时候去计算这个，我们可以先计算，以节省堆（heap）空间和所有加载该DEX文件的虚拟机的计算时间。</li>
</ul>
<p>大部分的优化显然都会更好。</p>
<h2 id="Hello_ODEX">Hello ODEX</h2><p>我们继续玩耍之前生成的dex，来做一个odex:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">adb push dexopt-wrapper /sdcard/</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line"><span class="comment"># 不然没权限去/data/local</span></span><br><span class="line">su</span><br><span class="line">chmod <span class="number">777</span> dexopt-wrapper</span><br><span class="line"><span class="comment"># 直接在sdcard执行会提示权限错误</span></span><br><span class="line">cp dexopt-wrapper /data/<span class="built_in">local</span>/</span><br><span class="line">cp foo.jar /data/<span class="built_in">local</span>/</span><br><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span></span><br><span class="line">/dexopt-wrapper foo.jar foo.odex                        </span><br><span class="line">--- BEGIN <span class="string">'foo.jar'</span> (bootstrap=<span class="number">0</span>) ---</span><br><span class="line">--- waiting <span class="keyword">for</span> verify+opt, pid=<span class="number">5220</span></span><br><span class="line">--- would reduce privs here</span><br><span class="line">--- END <span class="string">'foo.jar'</span> (success) ---</span><br><span class="line">cp foo.odex /sdcard</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">adb pull /sdcard/foo.odex .</span><br></pre></td></tr></table></figure></p>
<p>这样子就拿到了优化后的odex，赶紧把手机还给同事。</p>
<h1 id="oat与elf">oat与elf</h1><h1 id="下期预告">下期预告</h1><p>下一次让我们利用本次讲到的这些知识，来改一改apktool，让它能重返19岁，反编译腾讯的apk。最后代码会丢到GitHub上。</p>
<hr>
<p>参考资料</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Android_Runtime" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Android_Runtime</a></li>
<li><a href="http://blog.csdn.net/luoshengyang/article/details/18006645" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/18006645</a></li>
<li>AOSP: dalvik/docs</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>WORKING - 未完</strong></p>
<h1 id="前言">前言</h1><p>米娜桑，是时候揭开DEX的面纱了！我们都知道multidex，都知道65535方法数超标，那DEX到底是个什么东西呢？或许又有些同学知道DEX会优化为ODEX，那]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Reverse Engineering" scheme="http://blog.zhaiyifan.cn/tags/Reverse-Engineering/"/>
    
      <category term="Android Reverse Engineering" scheme="http://blog.zhaiyifan.cn/categories/Android-Reverse-Engineering/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[世界级的Android测试开发流程（二）]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/23/world-class-testing-development-pipeline-for-android-part-2/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/23/world-class-testing-development-pipeline-for-android-part-2/</id>
    <published>2016-02-23T03:25:28.000Z</published>
    <updated>2016-02-24T06:45:51.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>原文链接 : <a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android-part-2/" target="_blank" rel="external">World-Class Testing Development Pipeline for Android - Part 2.</a></li>
<li>原文作者 : <a href="hello@karumi.com">Karumi</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/lfkdsk" target="_blank" rel="external">JustWe</a>, <a href="https://github.com/xcc3641" target="_blank" rel="external">Hugo Xie</a></li>
</ul>
<p>在我们的上一篇博客文章，<a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android/" target="_blank" rel="external">“世界级的Android测试开发流程（一）”，我们开始讨论一个Android的测试开发流程</a>。我们讨论了一个软件工程师从开始写测试到找到测试开发的一些问题的演化过程。我们获得了以下结论，概括如下：</p>
<ul>
<li><ul>
<li>自动化测试是成功的软件开发的关键。</li>
</ul>
</li>
<li><ul>
<li>为了写特定类型的测试，可测试的代码是必须的。</li>
</ul>
</li>
<li><ul>
<li>一些开发者对测什么与怎么测一无所知，就开始写测试。</li>
</ul>
</li>
<li><ul>
<li>我们的测试的质量与可读性并不总是能达到预期。</li>
</ul>
</li>
<li><ul>
<li>一个测试开发流程对定义测什么与怎么测来说是必须的。</li>
</ul>
</li>
</ul>
<p>相应地，任何应用的测试关键部分是：</p>
<ul>
<li><ul>
<li>独立于框架或者库去测试业务逻辑。</li>
</ul>
</li>
<li><ul>
<li>测试服务器端的API集成。</li>
</ul>
</li>
<li><ul>
<li>在黑盒场景测试下，从用户角度写的的接收准则。</li>
</ul>
</li>
</ul>
<p>在这篇文章中，我们将会看到几个测试方法，它们覆盖了上述部分并保证了一个稳若盘石的测试开发流程。</p>
<h3 id="独立于框架或者库去测试业务逻辑："><strong>独立于框架或者库去测试业务逻辑：</strong></h3><p>至关重要的是检查<a href="http://c2.com/cgi/wiki?BusinessLogicDefinition" target="_blank" rel="external">业务逻辑</a>是否确实实现了预定的产品需求。我们需要隔离想要测试的代码，模拟不同的初始场景，以设置运行时的一些组件的行为。接着，我们将会通过选择想要练习的部分来测试代码。一旦完成，我们需要检查软件状态在训练该测试主题后是否正确。</p>
<p>这个测试方法的关键是 <a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">依赖倒置原则</a>。通过写依赖于抽象的代码，我们将可以把我们的软件分离为不同的层次。为了获得一个依赖的实例，我们需要从某个地方去请求它。或者，我们可以在实例被创建的时候获得它。我们软件的一部分要求我们创建代码来获取协作者的实例。在这些点，我们将会引入测试替身(Test Double)来模拟初始场景或编写不同行为来设计我们的测试。通过使用 <a href="http://martinfowler.com/articles/mocksArentStubs.html" target="_blank" rel="external">测试替身</a>，我们将能模拟生产环境代码的行为与状态。同时，它能帮助我们选择测试的范围（从根本上代表了要测试的代码的数量）。如果没有依赖倒置，所有类就需要各自去获得它们的依赖。从而导致类实现和依赖的实现相互耦合，进而无法引入测试替身来切断生产环境代码的执行流。</p>
<p>通常在构造中传递类依赖是最有效的应用依赖倒置的机制。该机制足够用来引入测试替身。在构造中传递类依赖会帮助我们创建实例来替代对应测试替身的依赖。<strong>尽管并不是强制的，记住<a href="http://martinfowler.com/articles/injection.html" target="_blank" rel="external">服务定位器(Service Locator)或者依赖注入</a>框架的用法对帮助减少样板代码以应用依赖倒置仍然很重要。</strong></p>
<p><strong>我们将会用一个具体的例子 (</strong>关于 <a href="https://github.com/pedrovgs/AndroidGameBoyEmulator" target="_blank" rel="external">我几个月前开始做的Android GameBoy模拟器</a> 的测试<strong>) 来展示如何测试我们的业务需求。</strong></p>
<p>以下测试有关于GameBoy内存管理单元和GameBoy BIOS执行。我们将会检查产品需求（硬件模拟）是否被正确实现。</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MMUTest</span> </span>{  
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MMU_SIZE = <span class="number">65536</span>;
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ANY_ADDRESS = <span class="number">11</span>;
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> ANY_BYTE_VALUE = <span class="number">0x11</span>;

  <span class="annotation">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldInitializeMMUFullOfZeros</span><span class="params">()</span> </span>{
    MMU mmu = givenAMMU();

    assertMMUIsFullOfZeros(mmu);
  }

  <span class="annotation">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldFillMMUWithZerosOnReset</span><span class="params">()</span> </span>{
    MMU mmu = givenAMMU();

    mmu.writeByte(ANY_ADDRESS, ANY_BYTE_VALUE);
    mmu.reset();

    assertMMUIsFullOfZeros(mmu);   
  }

  <span class="annotation">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldWriteBigBytesValuesAndRecoverThemAsOneWord</span><span class="params">()</span> </span>{
    MMU mmu = givenAMMU();

    mmu.writeByte(ANY_ADDRESS, (<span class="keyword">byte</span>) <span class="number">0xFA</span>);
    mmu.writeByte(ANY_ADDRESS +<span class="number">1</span>, (<span class="keyword">byte</span>) <span class="number">0xFB</span>);

    assertEquals(<span class="number">0xFBFA</span>, mmu.readWord(ANY_ADDRESS));
  }
}
</code></pre><p>前三个测试是检查GameBoy MMU（内存管理单元）是否正确实现。成功的关键在于检查测试执行的最后MMU状态是否正确。所有的测试检查MMU是否被正确初始化。如果reset后，MMU被清理了，或者写了2个字节后和期望的词相等，则最后的读取是正确的。为了测试模拟器软件的这部分，我们缩小了测试范围，仅有一个类作为测试对象。</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameBoyBIOSExecutionTest</span> </span>{

  <span class="annotation">@Test</span>
  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldIndicateTheBIOSHasBeenLoadedUnlockingTheRomMapping</span><span class="params">()</span> </span>{
    GameBoy gameBoy = givenAGameBoy();

    tickUntilBIOSLoaded(gameBoy);

    assertEquals(<span class="number">1</span>, mmu.readByte(UNLOCK_ROM_ADDRESS) &amp; <span class="number">0xFF</span>);
  }

  <span class="annotation">@Test</span>
  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldPutTheNintendoLogoIntoMemoryDuringTheBIOSThirdStage</span><span class="params">()</span> </span>{
    GameBoy gameBoy = givenAGameBoy();

    tickUntilThirdStageFinished(gameBoy);

    assertNintendoLogoIsInVRAM();
  }

  <span class="function"><span class="keyword">private</span> GameBoy <span class="title">givenAGameBoy</span><span class="params">()</span> </span>{
    z80 = <span class="keyword">new</span> GBZ80();
    mmu = <span class="keyword">new</span> MMU();
    gpu = <span class="keyword">new</span> GPU(mmu);
    GameLoader gameLoader = <span class="keyword">new</span> GameLoader(<span class="keyword">new</span> FakeGameReader());
    GameBoy gameBoy = <span class="keyword">new</span> Gameboy(z80, mmu, gpu, gameLoader);
    <span class="keyword">return</span> gameboy;
  }

}
</code></pre><p>在这两个测试中，我们检查了跨越不同阶段的BIOS是否执行正确。在BIOS执行的最后，内存中具体位置的一个字节必须被初始化为具体的一个值。接着，在第三阶段的最后，任天堂的logo必须被读取到VRAM。我们决定扩大测试的范围，因为整个BIOS执行是任何模拟器开发的关键部分之一。关于该测试的主题是CPU，CPU指令集的部分（只包括BIOS执行相关的指令），以及MMU。为了检查执行的状态是否正确，我们必须在MMU状态上进行assert。<strong>一个能显著提升测试质量的关键就是检查执行最后的软件状态，而避免去验证和其他组件的交互。这是因为即便和你的组件交互正确，状态仍然可能错误。</strong> 知道这些测试的部分是独立的也很重要，像是CPU指令。</p>
<p>这些测试的另一个主要亮点是使用了测试替身，以模拟Android SDK使用相关的那些代码。在执行BIOS之前，GameBoy游戏必须被读取到GameBoy MMU里。然后，在测试期间，Android SDK将会变得不可用，作为一种变通方法，我们将不得不替换为从测试环境读取GameBoy rom。<em>* 我们使用了依赖倒置原则不仅仅是为了隐藏实现细节或者定义边界，—</em><em> 也是为了替代实际生产环境的AndroidGameReader为FakeGameReader，一个测试替身，<em>*从而不依赖于框架和库去测试代码。这样，我们创建了一个隔离的测试环境，并调整了测试范围。</em></em></p>
<h3 id="范围："><strong>范围：</strong></h3><p>调整测试范围是极其重要的。在写测试前，我们必须记住测试范围会帮助我们认识代码里的缺陷（取决于测试范围的大小）。简化的范围将会给我们更丰富的错误反馈，而大范围的测试则无法提供bug位置的准确信息。<strong>测试的粒度必须跟考虑中的测试范围一样小。</strong></p>
<h3 id="基础："><strong>基础：</strong></h3><p>写这些测试的基础很明确。我们需要写出在依赖倒置原则下可测试的代码，并结合mocking库使用测试框架。mocking库将会帮助我们创建模拟场景下的测试替身，或替换我们部分的生产代码。请注意这些框架和库的使用不是必须的，但我们推荐使用。</p>
<h3 id="结果："><strong>结果：</strong></h3><p>这个方法的结果很有趣。<strong>在遵循依赖倒置原则后，我们可以独立于框架或库去测试我们的业务逻辑</strong>。我们可以创建一个具有可重复性的 <strong>隔离环境</strong> 来实现和设计测试。另外，我们可以简单地 <strong>选择需要测试的生产环境代码的量</strong> 并把它们替换为 <strong>测试替身来模拟行为和不同场景</strong>。</p>
<p>既然我们已经可以测试产品需求是否被正确实现，我们便需要继续致力于测试开发流程。下个我们要测试的是与被测试替身替换的外部组件的集成是否正确。这是我们将会在下一篇博客文章中回顾的东西，敬请期待！;)</p>
<p>参考：</p>
<ul>
<li><ul>
<li>世界级的Android测试开发流程（一）by Pedro Vicente Gómez Sánchez. <a href="http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android" target="_blank" rel="external">http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android</a></li>
</ul>
</li>
<li><ul>
<li>Android GameBoy 模拟器 GitHub Repository by Pedro Vicente Gómez Sánchez. <a href="https://github.com/pedrovgs/AndroidGameBoyEmulator" target="_blank" rel="external">https://github.com/pedrovgs/AndroidGameBoyEmulator</a></li>
</ul>
</li>
<li><ul>
<li>控制反转容器和依赖注入模式 by Martin Fowler. <a href="http://martinfowler.com/articles/injection.html" target="_blank" rel="external">http://martinfowler.com/articles/injection.html</a></li>
</ul>
</li>
<li><ul>
<li>在野外的DIP by Martin Fowler.<a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">http://martinfowler.com/articles/dipInTheWild.html</a></li>
</ul>
</li>
<li><ul>
<li>测试替身 by Martin Fowler. <a href="http://www.martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">http://www.martinfowler.com/bliki/TestDouble.html</a></li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>原文链接 : <a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android-part-2/" target="_blank" rel="external"]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Test" scheme="http://blog.zhaiyifan.cn/tags/Test/"/>
    
      <category term="Android Test" scheme="http://blog.zhaiyifan.cn/categories/Android-Test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[世界级的Android测试开发流程（一）]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/23/world-class-testing-development-pipeline-for-android-part-1/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/23/world-class-testing-development-pipeline-for-android-part-1/</id>
    <published>2016-02-23T03:25:24.000Z</published>
    <updated>2016-02-24T10:32:52.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>原文链接 : <a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android/" target="_blank" rel="external">World-Class Testing Development Pipeline for Android - Part 1.</a></li>
<li>原文作者 : <a href="hello@karumi.com">Karumi</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/lfkdsk" target="_blank" rel="external">JustWe</a>, <a href="https://github.com/xcc3641" target="_blank" rel="external">Hugo Xie</a></li>
</ul>
<h1 id="世界级的_Android_测试开发流程（一）">世界级的 Android 测试开发流程（一）</h1><p>在开发完移动应用并和手动QA团队合作了数年后，我们决定开始写测试。作为工程师，我们知道，<strong>自动化测试是成功的移动开发之关键。</strong> 在这篇博客里，我将会分享我们的故事——Karumi启动于几年前的测试故事。这是系列博客的第一篇，我们将会囊括世界级的 Android测试流程的所有方面。</p>
<p>几年前，我们开始为移动应用写测试。我们对测试了解有限，所以我们致力于接受测试并使用最常用的框架来做单元测试，一个简单的test runner和mocking库。过了一段时间我们遇到了问题：</p>
<ul>
<li>我们不知道测试什么和如何去测试它。</li>
<li>我们的代码还没准备好被测试。</li>
<li>我们沉迷于Mike Cohn的测试金字塔，却没有考虑到我们在写的软件类型。</li>
<li>即使我们的测试通过了，也不意味着代码没有问题。</li>
</ul>
<p>是不是很可怕? 我们花了很多时间去克服这些挑战，在某个时刻我们意识到是方法错了。即便测试覆盖率很高，我们的软件仍然在出错。最坏的是，从我们的测试中，无法得到任何反馈。<strong>解决我们的问题的关键是识别出我们一直碰到的问题所在：</strong></p>
<ul>
<li>我们的接受测试太难写了，因为我们需要提供配置API来模拟接受测试的初始状态。</li>
<li>大部分时候，我们的测试会随机失败，而我们不知道为什么。只能用重复编译来通过测试。</li>
<li>我们有大量的单元测试和高覆盖率，但我们的单元测试从未失败。即便应用出问题了，我们的测试仍然能通过。</li>
<li>我们用很多时间去验证mock的调用。</li>
<li>我们不得不使用一些“魔法”测试工具来测试代码，一个私有方法或者模拟静态方法的调用结果。</li>
</ul>
<p>这是我们决定停下，并开始思考为什么我们对自己的测试感觉不爽。我们快速需要找到问题的解决方案。我们的项目告诉说我们做错了，我们需要解决方案，<strong>我们需要一个测试开发流程</strong>。话虽如此，为了改善程序质量，测试开发流程不总是第一件要完善的事。</p>
<p><strong>一个测试开发流程定义了测什么、怎么测</strong>。用什么工具，为什么用？测试的范围是什么？<strong>即便有良好的测试开发流程，可测试的代码对有自信去写测试仍然是必须的</strong>，因为大部分的测试是不可能的，或者至少，很难去写。如果你的代码没有准备好，与代码以及单元或集成范围最贴近的测试并不是那么容易去写的。因此，我们决定带着这些目标，首先识别出应用中的问题，然后去解决它们。那么问题来了，如果我们的代码能够是完美的，我们对它有何期望呢？期望是：</p>
<ul>
<li>应用必须是可测试的。</li>
<li>代码必须是可读的。</li>
<li>职责必须是清晰而有结构的。</li>
<li>低耦合高内聚。</li>
<li>代码必须是诚实的。</li>
</ul>
<p>在重构之前代码一团糟。软件职责丢失在代码的行与行之间。实现细节是完全暴露的，activities和fragments负责处理软件的状态，到处都是软件状态。另外，我们的业务逻辑和框架是耦合的。带着这些问题，我们决定把应用架构改成其他更有结构的东西。<strong>我们使用的架构是 <a href="https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">“Clean Architecture”</a>。除了架构的核心内容，我们还应用了一些和GUI应用相关模式像是MVP和MMVM，以及数据处理相关的模式像是Repository模式</strong>。架构详情和这篇博客没有关系（我们会在未来的博文中讨论到它），“Clean Architecture”的<strong>核心元素</strong>与<strong>最重要的SOLID原则之一，<a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">依赖倒置原则</a></strong>相关。</p>
<p><strong>依赖倒置原则提出你的代码必须依赖于抽象而不是具体实现</strong>。这个原则，仅仅是这个原则就是通向成功的钥匙。它是<strong>改变我们的代码并适配测试策略以有效克服我们手上问题的关键</strong>。依赖于抽象既无关于依赖注入框架，也无关于使用Java接口来定义类的API。然而，它与隐藏细节有关。根据不同角色，软件职责改变的点，引入<a href="http://www.martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">测试替身(TestDouble)</a>的点去创建层，大大限制了测试的范围。</p>
<p><strong>通过依赖倒置原则，我们能够去选择正确数量的代码去测试</strong>。一旦这些点清晰了，我们就停下为所有的mocks去写测试。我们能够使用准确数字的mocks去覆盖一个测试用例，并确保我们在测试软件状态而不仅仅是组件之间的交互。</p>
<p>一旦应用架构清晰了，我们开始 <strong>定义我们的测试开发流程。我们的目标是回答2个问题：我们想要测试什么？我们如何去测试它？</strong> 在尝试找出如何分割测试，并用简单又可读的方式去写以后，我们注意到层次分离是最完美的出发点。结果，解决方案变得清晰：</p>
<p>我们想要测试什么?</p>
<ul>
<li>独立于任何框架或者库去测试我们的业务逻辑。</li>
<li>测试我们的API集成。</li>
<li>持久化框架的集成。</li>
<li>一些通用UI组件。</li>
<li>测试黑盒场景下，从用户视角写的的接收准则。</li>
</ul>
<p>我们想要怎么去测试?</p>
<ul>
<li>这是我们在下一博客文章要说的东西，敬请期待！;)</li>
</ul>
<p>参考:</p>
<ul>
<li>世界级的Android测试开发流程幻灯片 by Pedro Vicente Gómez Sánchez. <a href="http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android" target="_blank" rel="external">http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android</a></li>
<li>Mike Cohn的测试金字塔 by Martin Fowler. <a href="http://martinfowler.com/bliki/TestPyramid.html" target="_blank" rel="external">http://martinfowler.com/bliki/TestPyramid.html</a></li>
<li>Clean架构 by Uncle Bob. <a href="https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html</a></li>
<li>在野外的DIP by Martin Fowler.<a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">http://martinfowler.com/articles/dipInTheWild.html</a></li>
<li>测试替身 by Martin Fowler. <a href="http://www.martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">http://www.martinfowler.com/bliki/TestDouble.html</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>原文链接 : <a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android/" target="_blank" rel="external">World-]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Test" scheme="http://blog.zhaiyifan.cn/tags/Test/"/>
    
      <category term="Android Test" scheme="http://blog.zhaiyifan.cn/categories/Android-Test/"/>
    
  </entry>
  
</feed>
