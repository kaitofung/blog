<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Blog计划2016]]></title>
      <url>http://blog.zhaiyifan.cn/2016/12/31/Blog-Plan-2016/</url>
      <content type="html"><![CDATA[<h1 id="从零开始系列">从零开始系列</h1><p>系列标题取得有问题，其实是面向进阶的Android开发的，相对初学者来说很多地方说的可能不够清楚。<br>后期会考虑一下完善一下，尽可能说的更清楚。</p>
<p>4月做完BlockCanary分享后尽快把demo先完善了，然后和blog做到同步更新。</p>
<p>目前想到的后面的几篇</p>
<ul>
<li><del>Retrofit</del></li>
<li><del>Realm</del></li>
<li><del>基于Retrofit和Realm的Data层设计</del></li>
<li><del>Data Binding</del></li>
<li>前端用后台接口设计与撕逼</li>
<li>基于异常的优雅错误处理架构</li>
<li>RxJava</li>
<li>模块化的重用</li>
<li>基于Navigator的全局scheme式跳转设计</li>
<li>Hybrid App</li>
<li>上线前优化，打包</li>
<li>Crash处理、分析</li>
<li>BlockCanary线上优化实践</li>
</ul>
<h1 id="Android逆向分析">Android逆向分析</h1><ul>
<li>Android可执行文件之谜 - DEX与ODEX, OAT与ELF</li>
<li>修改apktool</li>
<li>native逆向</li>
<li>重打包</li>
<li>Google Camera反编译看看Photo Sphere怎么做的</li>
<li>静态分析</li>
<li>动态调试</li>
</ul>
<h1 id="JavaScript">JavaScript</h1><ul>
<li>Vue</li>
<li>React.js</li>
<li>Redux</li>
</ul>
<h1 id="React_Native">React Native</h1><ul>
<li>在已有android项目添加RN的方法</li>
<li>简单的例子 - 点赞页面</li>
<li>和native的交互module</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React Native 0.31 Bundle 预加载优化]]></title>
      <url>http://blog.zhaiyifan.cn/2016/08/20/react-native-0-31-preload-optimization/</url>
      <content type="html"><![CDATA[<p>使用 React Native 开发混合应用的过程中，我们在打完 bundle 进 release 包后，会发现第一次进入页面（React 的 Activity）会有一个短暂的白屏过程（在真机上近 <strong>1秒</strong>，在模拟器上比较快，在 <strong>200毫秒</strong> 左右），而且在完全退出后再进入，仍然会有这个白屏。</p>
<p>仔细查看加载过程（其实猜猜都能知道）后可以发现，这个过程就是在加载我们的 js bundle，通常即便是一个小的 RN 应用（混合应用中的子业务），也会动辄到 1MB 的大小，除非是完整的 RN 应用，可以把这个当做是启动速度，否则这样的加载速度都是对用户体验的很大伤害。</p>
<p>于是我们决定进行 Bundle 预加载的优化。</p>
<p>项目源码上传在：<a href="https://github.com/markzhai/react-native-preloader" target="_blank" rel="external">markzhai/react-native-preloader</a>，稍后会上传到 maven，版本号会和 rn 保持一致。</p>
<h1 id="耗时操作">耗时操作</h1><p>见 <code>ReactActivity</code> 的 <code>onCreate</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (getUseDeveloperSupport() &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">    <span class="comment">// Get permission to show redbox in dev builds.</span></span><br><span class="line">    <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">      Intent serviceIntent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</span><br><span class="line">      startActivity(serviceIntent);</span><br><span class="line">      FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);</span><br><span class="line">      Toast.makeText(<span class="keyword">this</span>, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mReactRootView = createRootView();</span><br><span class="line">  mReactRootView.startReactApplication(</span><br><span class="line">    getReactNativeHost().getReactInstanceManager(),</span><br><span class="line">    getMainComponentName(),</span><br><span class="line">    getLaunchOptions());</span><br><span class="line">  setContentView(mReactRootView);</span><br><span class="line">  mDoubleTapReloadRecognizer = <span class="keyword">new</span> DoubleTapReloadRecognizer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打点后可以发现耗时的其实是</p>
<ul>
<li>createRootView();</li>
<li>startReactApplication();</li>
</ul>
<p>这两个操作，所以考虑只需要提前创建 <code>ReactRootView</code> 进行 render，之后直接挂载该 view 上去即可。</p>
<h1 id="预加载">预加载</h1><p>创建预加载类 <code>ReactPreLoader</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * React Native Bundle Pre-loader.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> markzhai on 16/8/20</span><br><span class="line"> * <span class="doctag">@version</span> 1.3.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactPreLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ReactPreLoader"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, ReactRootView&gt; CACHE_VIEW_MAP =</span><br><span class="line">            <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Get &#123;<span class="doctag">@link</span> ReactRootView&#125; with corresponding &#123;<span class="doctag">@link</span> ReactInfo&#125;.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReactRootView <span class="title">getRootView</span><span class="params">(ReactInfo reactInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CACHE_VIEW_MAP.get(reactInfo.getMainComponentName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Pre-load &#123;<span class="doctag">@link</span> ReactRootView&#125; to local &#123;<span class="doctag">@link</span> Map&#125;, you may want to</span><br><span class="line">     * load it in previous activity.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Activity activity, ReactInfo reactInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CACHE_VIEW_MAP.get(reactInfo.getMainComponentName()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ReactRootView rootView = <span class="keyword">new</span> ReactRootView(activity);</span><br><span class="line">        rootView.startReactApplication(</span><br><span class="line">                ((ReactApplication) activity.getApplication()).getReactNativeHost().getReactInstanceManager(),</span><br><span class="line">                reactInfo.getMainComponentName(),</span><br><span class="line">                reactInfo.getLaunchOptions());</span><br><span class="line">        CACHE_VIEW_MAP.put(reactInfo.getMainComponentName(), rootView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Remove &#123;<span class="doctag">@link</span> ReactRootView&#125; from parent.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">(ReactInfo reactInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ReactRootView rootView = getRootView(reactInfo);</span><br><span class="line">            ViewGroup parent = (ViewGroup) rootView.getParent();</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                parent.removeView(rootView);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            Logger.e(TAG, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 init 操作中，我们通过 ReactInfo 缓存把 view 缓存在本地的 <code>ArrayMap</code>。</p>
<p>值得注意的是 <code>onDestroy</code>，在 ReactActivity 销毁后，我们需要把 view 从 parent 上卸载下来。</p>
<h1 id="使用预加载的_view">使用预加载的 view</h1><p>使用预加载的 View，就需要侵入 activity 的创建过程，我们无法再使用 RN 库提供的 <code>ReactActivity</code>，只能建立自己的，以下列出修改的方法，其他方法照抄 <code>ReactActivity</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Base Activity for React Native applications.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> markzhai on 16/7/28</span><br><span class="line"> * <span class="doctag">@version</span> 1.3.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MrReactActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span>, <span class="title">PermissionAwareActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getUseDeveloperSupport() &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">            <span class="comment">// Get permission to show redbox in dev builds.</span></span><br><span class="line">            <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                Intent serviceIntent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</span><br><span class="line">                startActivity(serviceIntent);</span><br><span class="line">                FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mReactRootView = ReactPreLoader.getRootView(getReactInfo());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Logger.i(TAG, <span class="string">"use pre-load view"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.i(TAG, <span class="string">"createRootView"</span>);</span><br><span class="line">            mReactRootView = createRootView();</span><br><span class="line">            <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mReactRootView.startReactApplication(</span><br><span class="line">                        getReactNativeHost().getReactInstanceManager(),</span><br><span class="line">                        getMainComponentName(),</span><br><span class="line">                        getLaunchOptions());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setContentView(mReactRootView);</span><br><span class="line"></span><br><span class="line">        mDoubleTapReloadRecognizer = <span class="keyword">new</span> DoubleTapReloadRecognizer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mReactRootView.unmountReactApplication();</span><br><span class="line">            mReactRootView = <span class="keyword">null</span>;</span><br><span class="line">            ReactPreLoader.onDestroy(getReactInfo());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        getReactNativeHost().clear();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ReactInfo <span class="title">getReactInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用">使用</h1><p>在进入该 RN activity 的上一个 activity 调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactPreLoader.init(<span class="keyword">this</span>, ReactCardActivity.reactInfo);</span><br></pre></td></tr></table></figure></p>
<p>ReactCardActivity 继承我们自己的 ReactActivity：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactCardActivity</span> <span class="keyword">extends</span> <span class="title">MrReactActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ReactInfo reactInfo = <span class="keyword">new</span> ReactInfo(<span class="string">"card"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMainComponentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reactInfo.getMainComponentName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReactInfo <span class="title">getReactInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reactInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>优化后可以达到瞬间加载。</p>
<h1 id="已知的坑">已知的坑</h1><p>由于进行了预加载，目前已知的问题是 <code>Modal</code> 无法显示 —— 因为 <code>Modal</code> 在 Android 的实现使用了 <code>Dialog</code>，而该 View 将创建 <code>ReactRootView</code> 的 context 作为参数传给了 <code>Dialog</code>，而不是实际运行时所在的 <code>Activity</code> context。查看源码可以验证（com.facebook.react.views.modal）。</p>
<p><code>TimePickerAndroid</code> 这类 picker 则没有问题。见 <a href="https://github.com/facebook/react-native/issues/9496" target="_blank" rel="external">issue 9496</a></p>
<p>作为规避方案，目前使用 <code>MutableContextWrapper</code> 进行 context 替换。见 GitHub 上的具体实现（感谢评论里的 Lovecraft 提供的方案）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的Android新项目10 - React Native & Redux]]></title>
      <url>http://blog.zhaiyifan.cn/2016/08/04/android-new-project-from-0-p10/</url>
      <content type="html"><![CDATA[<p>本篇来讲讲 React Native 和 Redux，和其他一上来就啪啪啪丢上来一堆翻译的东西不同，本文会从简单的例子入手，让大家能快速地明白 React Native 是什么，Redux 和常见的 MVC、MVP 等有什么区别，怎么去组织一个 Redux 架构的 React Native 项目。</p>
<p>为避免大家还没入门就放弃，预计下一篇才会从我们项目中的实践出发，讲讲更复杂的应用场景。</p>
<h1 id="什么是React_Native">什么是React Native</h1><p><img src="http://blog.zhaiyifan.cn/images/react-native-1-reactnative.png" alt="React Native"></p>
<p>React Native 使你能够基于 JavaScript 和 React 在原生平台上构建应用，提倡的是 “learn once, write anywhere”，复用代码，提高开发效率。</p>
<p>项目由 Facebook 开源驱动，在过去的近一年中更新很活跃。文档建议直接看官网的 <a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a>，中文站有点坑。</p>
<p>支持系统：Android 4.1 (API 16) 以及 &gt;= iOS 7.0。</p>
<p>关于 React，可以参见之前为掘金翻译计划翻译的 <a href="http://blog.zhaiyifan.cn/2016/04/22/trans-react-newbies-tutorial/">React.js 新手村教程</a>，简单来说 React 将应用分为一个个动态可复用的组件 —— View的渲染（JSX）、数据如何绑定到显示、状态的变更（State）、属性（Props）都包含在组件内部。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-reactjs.png" alt="React.js"></p>
<p>整个应用由一个个组件搭积木而成（组件式开发），而每个组件则由状态驱动而变更。</p>
<p>React Native 正像它的名字，将 React 带到了原生世界，和 H5 不同的是，我们不再使用 CSS 和 HTML，而只有 js 为伴。我们也不再有那些 <code>div</code>, <code>input</code> 这些标签，而是由 <code>View</code>, <code>TextInput</code> 等等取代，更符合原生开发者们的习惯。布局上，幸而有强大的 <code>Flexbox</code> 支持，如果开发者们之前有使用或者看到过 Google 在 GitHub 发布的 Android 版 <code>FlexboxLayout</code>，相信对它会很熟悉。原生开发中的页面栈，也由 <code>Navigator</code> 进行了实现（在 Android 上还有 <code>BackAndroid</code> 的返回键支持）。</p>
<p>与 WebView 不同，React Native 运行的界面，最终会被解释映射为原生的 View，可以直接使用布局边界或者 Hierarchy Viewer 看出层级（js 文件会打包为一个bundle，位于assets下面，RN引擎会加载并进行解释映射）。</p>
<p>好处</p>
<ul>
<li>体验 web 开发的便捷，不再需要编译，重新加载一下 js 就行了</li>
<li>可以直接使用 Chrome 或者 Nuclide 调试</li>
<li>Android / iOS 两端可以共享很大一部分代码（RN 还在进行 Windows, MacOS, Node-webkit 等平台的支持）</li>
<li>热更新，JS bundle 下发一下新的就行了（当然也有一定局限性，如果是 hybrid，则 native 的 RN module 部分不能更新）</li>
</ul>
<p>坏处</p>
<ul>
<li>前端开发不会原生做不了 React Native（除非你能真只用自带的那些东西），而且理解那些 RN 提供的组件也会很头晕（需要同时了解 Android 和 iOS）。</li>
<li>原生开发需要一定成本的学习实践才能掌握 React Native。毕竟 ES6 不像过去的 JS 那么傻瓜式了。</li>
<li>React Native 目前仍然处于快速迭代开发的阶段，你永远也不知道下个版本自己升级需要修改多少原来的代码。</li>
<li>React Native 的资料较少，尤其是国内的，更尤其是 hybrid 开发的（GitHub 上的开源项目大多是纯 RN 的）。</li>
</ul>
<h1 id="什么是Redux">什么是Redux</h1><p><img src="https://camo.githubusercontent.com/f28b5bc7822f1b7bb28a96d8d09e7d79169248fc/687474703a2f2f692e696d6775722e636f6d2f4a65567164514d2e706e67" alt="Redux.js"></p>
<p><a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 本身和 React 并没有特别紧密的联系，而是 Facebook 提出的 Flux 架构的一种优秀实现，可以搭配其他任何框架一起使用。在 React 上使用，需要搭配 react-redux（如此一来 Redux 可以不局限于 React，而让社区发展出更多的 redux-* 中间件）。</p>
<p>Redux 在 React 的基础上（state 和 props），增加了 <a href="http://cn.redux.js.org//docs/basics/Store.html" target="_blank" rel="external">store</a>、<a href="http://cn.redux.js.org//docs/basics/Actions.html" target="_blank" rel="external">action</a>、<a href="http://cn.redux.js.org//docs/basics/Reducers.html" target="_blank" rel="external">reducer</a> 的概念，规范了全局一个 state，从而只需要根据这个 state 就能回朔出整个应用的状态。组件通过 dispatch 将 action 传到 store，reducer 根据原来的 state 以及 action，返回新的 state，组件根据新的 state 渲染界面。</p>
<p>Redux 是一个可预测的状态容器，即只需要有状态树，就能还原出“事发现场”。</p>
<h1 id="从例子看项目">从例子看项目</h1><p>为了避免说一大堆概念，大家一头雾水，似懂非懂，这里拿一个例子来讲讲 React Native 和 Redux 结合后的效果，尽量避免代码的出现，而以图和文字代替。</p>
<p>Counter！没错，就是 Counter，不是 TODO，TODO已经被黑的不成样了。</p>
<p>项目源码位于：<a href="https://github.com/alinz/example-react-native-redux" target="_blank" rel="external">example-react-native-redux</a>。包含了 <code>Counter</code> 和 <code>Counters</code> 两个子项目。前者是单个的计数器，后者则在前者的基础上增加了可以加减计数器个数的功能，相对更复杂一些，不过引入了一些不错的实践可以参考。</p>
<h2 id="运行效果">运行效果</h2><p>先看看最后的效果，方便对应后面的解说。<br>第一个 Counter 项目很简单，就是一个文本框加上两个按钮，一个加1，一个减1。<br>第二个 Counters 项目在前者的基础上（使用了 Counter 组件），可以增加任意个计数器，还添加了带延迟的加1功能，来模拟耗时操作。</p>
<h2 id="Counter">Counter</h2><p>先看看Counter，我们从物理架构和动作流两个角度来进行观察。</p>
<p>目录下，有以下文件：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-files.png" alt="Counter List Files"></p>
<p>index.android.js 和 index.ios.js 分别是 android 和 iOS 的 rn 入口，通常内容是相同的。<br>android 为 Android 的工程目录，下面有我们熟悉的 build.gralde。<br>ios 为 iOS 的工程目录，包含了 xcode 的项目。<br>app 就是 rn 的目录，包含了 Android 和 iOS 项目共享的 js 源码。<br>node_modules 是 node 通过解析 package.json 下载的依赖。</p>
<h3 id="物理结构">物理结构</h3><p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-structure.png" alt="Counter物理结构"></p>
<p>CounterApp.js 则是整个应用的实际入口。</p>
<h3 id="动作流">动作流</h3><p>且不谈那些具体的 bind 和 createStore 操作，我们来看看当发生交互的时候，整个动作的分发，拿点击加号为例：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-flow.png" alt="Counter活动图"></p>
<p>onPress 事件触发了后续的一系列活动，而 Counter Component 的 action function 则由外部通过 props 传入（在这里，是 CounterApp 的 render 函数，如下）。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-counterapp.png" alt="counterApp.js"></p>
<p>再看看 store 的创建，在 App.js 入口：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-app.png" alt="app.js"></p>
<p>而 Component 也不是直接调用 action 的 function，而是通过 bindActionCreators 注入到组件props中（这里是通过 react-redux 进行的，不是 redux 自身的东西，可以理解为 react 和 redux 之间的胶水）：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-action-bind.png" alt="action bind"></p>
<p>通常我们会在智能组件的末尾使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(CardDetail);</span><br></pre></td></tr></table></figure>
<p>这样来把 state 以及 action 注入。</p>
<h2 id="Counters">Counters</h2><p>接着我们来看看更为复杂的 Counters 项目，顶层目录结构类似，不再赘述。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-demo.gif" alt="demo"></p>
<p>看完上面的 demo 动图后，相信大家对下面的解说会更容易理解。</p>
<h3 id="物理结构-1">物理结构</h3><p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-structure.png" alt="Counters物理结构"></p>
<p>我们来详细讲一下 modules 下的 app 目录中的文件组织。</p>
<p>actions.js 和刚才一样，定义了一个个的 action，略有不同的是由于这次有异步的操作，所以涉及到了 dispatch 函数，关于 dispatch 可以查看<a href="http://cn.redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="external">官方文档</a>。</p>
<p>constants.js 定义了所有 action 的 type，以及 App 的名字。</p>
<p>reducers.js 一样根据 action（payload 和 type）以及原来的 state 返回新的 state，另外，这里还进行了 initial state 即初始状态的定义（我们也可以把它放到单独的文件中）。</p>
<p>App.js 定义了页面的布局（渲染和 action），导出了 connect 生成的 container。我们简单看一下 render 部分是怎么做的。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-app-render.png" alt="Counters render"></p>
<p>怎么样，JSX 是不是挺容易理解的？</p>
<h3 id="动作流-1">动作流</h3><p>Counter 本身的动作流上面我们已经举例过了，本工程中增减计数类似，唯一的区别是 action 不只有 type，还带了 payload（id）来标示不同的计数器。</p>
<p>所以这里我们拿增加计数器的点击事件来做例子。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-add-counter.png" alt="Add Counter"></p>
<p>看上去是不是跟上面的差不多？剩下的那个 incrementWithDelay 其实也差不多，只不过返回的是一个function，在 setTimeOut 回调中才进行 dispatch（thunk middleware 会帮我们进行处理）。</p>
<h2 id="总结">总结</h2><p>上面我们通过物理结构和活动图大致了解了 React Native 上的 Redux 架构 app 是如何工作的。具体的细节，建议大家还是去查看 GitHub 上的源代码，通过上面的讲解后，应该不难理解。</p>
<h1 id="技术栈">技术栈</h1><p>我们目前实践的React Nataive技术栈：</p>
<ul>
<li>immutable.js</li>
<li>react</li>
<li>redux</li>
<li>react-redux</li>
<li>redux-thunk</li>
<li>redux-logger</li>
<li>redux-mock-store</li>
<li>react-native-router-flux</li>
<li>react-native-simple-store</li>
<li>regenerator</li>
<li>undefined</li>
<li>jest</li>
</ul>
<h1 id="更多阅读">更多阅读</h1><ul>
<li>React<ul>
<li><a href="https://daveceddia.com/react-es5-createclass-vs-es6-classes/" target="_blank" rel="external">React: ES5 (createClass) or ES6 (class)?</a></li>
</ul>
</li>
</ul>
<ul>
<li>Redux<ul>
<li><a href="http://redux.js.org/" target="_blank" rel="external">Redux.js</a></li>
<li><a href="https://egghead.io/courses/getting-started-with-redux" target="_blank" rel="external">Get Started with Redux</a></li>
<li><a href="http://div.io/topic/1309" target="_blank" rel="external">深入到源码：解读 redux 的设计思路与用法</a></li>
<li><a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="external">redux-thunk (Redux的thunk中间件)</a></li>
</ul>
</li>
</ul>
<ul>
<li>React Native<ul>
<li><a href="https://facebook.github.io/react-native/docs/" target="_blank" rel="external">Facebook React Native Docs</a></li>
<li><a href="https://reactnatve.wordpress.com/2016/05/20/mapping-uicomponent-ios-android-react-native/" target="_blank" rel="external">Mapping UIComponent (iOS, Android, React Native)</a></li>
</ul>
</li>
</ul>
<ul>
<li>JavaScript<ul>
<li><a href="http://redux.js.org/docs/advanced/Middleware.html" target="_blank" rel="external">中间件Middleware</a></li>
<li><a href="https://babeljs.io/docs/learn-es2015/" target="_blank" rel="external">ES6</a></li>
</ul>
</li>
</ul>
<ul>
<li>项目<ul>
<li><a href="https://github.com/fbsamples/f8app" target="_blank" rel="external">https://github.com/fbsamples/f8app</a></li>
<li><a href="http://f8-app.liaohuqiu.net/" target="_blank" rel="external">http://f8-app.liaohuqiu.net/</a></li>
<li><a href="https://github.com/bartonhammond/snowflake" target="_blank" rel="external">https://github.com/bartonhammond/snowflake</a></li>
<li><a href="https://github.com/jondot/awesome-react-native" target="_blank" rel="external">https://github.com/jondot/awesome-react-native</a></li>
<li><a href="https://rnplay.org/apps/picks" target="_blank" rel="external">https://rnplay.org/apps/picks</a></li>
</ul>
</li>
</ul>
<ul>
<li>工具<ul>
<li><a href="https://nuclide.io/" target="_blank" rel="external">https://nuclide.io/</a></li>
<li><a href="https://github.com/infinitered/ignite" target="_blank" rel="external">https://github.com/infinitered/ignite</a></li>
</ul>
</li>
</ul>
<ul>
<li>八卦<ul>
<li><a href="https://www.zhihu.com/question/37636296" target="_blank" rel="external">如何看待阿里无线前端发布的Weex?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21677103" target="_blank" rel="external">weex&amp;ReactNative对比</a>，大头鬼对两者的对比，下面还有阿里P8的评论，评论很精彩，记得一页页看过去哦，哈哈。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的Android新项目9 - 前端用后台接口设计]]></title>
      <url>http://blog.zhaiyifan.cn/2016/07/23/android-new-project-from-0-p9/</url>
      <content type="html"><![CDATA[<p>这回来讲讲后台接口的设计。</p>
<p>可能有同学会觉得后台的接口和我们大前端开发有什么关系？试想一下，在碰到一些不合理的接口设计的时候，你们开发是否觉得很别扭——需要为了坑爹的接口写很多脏代码引坑？甚至，这么开发出来的页面，体验也会很差？我们不是说硬无理要求后端接口按照前端业务去封装，而是说为了项目更好地发展，为了用户能有更棒的体验，应该有讨论商量的空间。一些差劲的设计，应该被拒绝。</p>
<p>本文使用前端来指代 Android、iOS 以及 Web。</p>
<p>本文不是教大家撕逼的（赶紧撇清关系）。</p>
<h1 id="全局">全局</h1><p>全局指所有接口统一的规范。</p>
<h2 id="请求头">请求头</h2><p>应该使用http header来放置通用性的参数，比如：</p>
<ul>
<li>APPID（Android/iOS/H5）</li>
<li>APPVER（版本号）</li>
<li>APP-BUILD-NUM（内部小版本号）</li>
<li>TOKEN</li>
<li>NETWORK（网络环境）</li>
<li>LANGUAGE（语言）</li>
<li>等等</li>
</ul>
<p>前端使用 <code>POST</code> 键值对方式提交给后端，可以使用 <code>RawJSON</code> 格式。<br><code>Content-Type</code> 设为 <code>application/x-www-form-urlencoded</code> 或者 <code>application/json</code>。</p>
<h2 id="全局响应格式">全局响应格式</h2><p>响应格式应该统一，方便前端做统一的处理，尤其是数据字段，应该统一放在一个map里面。</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>类型</th>
<th>详细描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>status_no</td>
<td>INT</td>
<td>状态码</td>
</tr>
<tr>
<td>status_msg</td>
<td>STRING</td>
<td>状态信息</td>
</tr>
<tr>
<td>data</td>
<td>MAP</td>
<td>响应内容</td>
</tr>
<tr>
<td>time</td>
<td>INT</td>
<td>响应时间戳</td>
</tr>
</tbody>
</table>
<h2 id="状态码">状态码</h2><p>全局应该定义统一的状态码（status_code），而不应该每个接口单独去定义。</p>
<p>具体规则可以自行定义，比如0为正确，负数为错误。</p>
<p>常见的错误状态码有</p>
<ul>
<li>普通异常</li>
<li>token不合法，需要重新登录</li>
<li>重复登录</li>
<li>需要完善个人信息</li>
<li>第三方账号登陆，需要绑定官方账号</li>
<li>请求头不合法（版本号，APPID等）</li>
<li>数据解密错误</li>
</ul>
<p>可以根据错误类型划分使用的区域段，如登陆系列使用 -1000 到 -1999 区域。</p>
<p>如此定义后，前端可以进行全局的统一处理，如重复登陆则踢出用户。</p>
<h2 id="错误信息">错误信息</h2><p>除了特殊的错误信息——如重复登录、token不合法这些状态码对应的，以及无网、没数据这些，对于通用的异常，应该由后台返回错误信息。</p>
<h2 id="统一data字段">统一data字段</h2><p>data 字段应该统一放在一个 map 内，里面存放具体的响应信息。</p>
<h2 id="Scheme">Scheme</h2><p>全局定义统一的 scheme（Deeplink），方便前端进行跳转。</p>
<p>前端只需要定义自己唯一的 Deeplink 并进行注册即可（scheme 和 host）。</p>
<p>具体使用 REST 风格（如 markzhai://article/XXX），还是普通的 urlencode (如 markzhai://article/?id=XXX&amp;redirect_url=XXX）可以根据自身需求定义。</p>
<p>使用 REST 风格的一个顾虑是可能 scheme 本身并不是基于资源的，而是基于类型、行为等，所以 urlencode 可能更通用，但相应地基于 Deeplink 的资源索引会希望你是无状态的 REST 风格。</p>
<h1 id="回传_or_状态码">回传 or 状态码</h1><p>应该使用回传还是状态码呢？比如点赞消息，是应该回传一个 status_code，0则表示点赞成功，还是应该回传现在的赞状态呢？</p>
<p>其实这两者对于后台的性能来说，是几乎没有影响的，因为取得的只是修改的字段的最后结果。但是对前端来说，差别就有了——需要维护状态。</p>
<p>举一个例子：<br>A 和 B 是两个用户，B 关注了 A，A 没有关注 B。<br>A 看 B 的主页的时候，显示关系是 <em>未关注</em>，此时 A 点击了关注，如果没有回传信息，那么我们只能把关系刷新为 <em>已关注</em>，而没有足够的信息去刷新为 <em>互相关注</em>。否则就需要前端去做恶心的逻辑（后端一开始用户关系就需要传 B 关注了 A），根据原来的关系去做切换，还要在失败的时候刷回原来的状态。</p>
<p>一些有丰富经验的后端会在这种接口使用回传，因为他们知道区别。</p>
<h1 id="模块vs页面">模块vs页面</h1><p>在后台的接口设计上，又分为了按页面以及按模块。</p>
<p>按页面的接口<em>尽可能</em>让前端一个页面只请求一次，一次返回所需要的全部信息；按模块的接口在后端定义自己的业务模块如用户、Feed、标签、搜索等，并尽量避免模块间的耦合。</p>
<p>从后端角度来说，按模块当然是更好的（只需要划分地够细就好），到时候需求有什么变更，让前端自己去改变接口的组合就好，自己高枕无忧。但从前端的角度来说，接口的组合涉及到异步之间的关系，尽管RxJava这样的响应式编程框架让异步简单了很多，但仍然希望可以避免，更严重的是，多次接口请求会让前端的体验变差，并行接口的影响稍小，而一些有前置后置关系的接口则麻烦比较大，一个接着一个请求，会让用户等很久。即便是并行接口，有时候页面的渲染仍然需要所有接口数据返回后才可以进行。</p>
<p>但如果让后端按照页面去套，这样在后端其实一样有性能的损耗，需要一个页面接口去单独调用各个模块的接口，然后进行组合。</p>
<p>究竟如何选择呢？笔者认为在服务器性能足够的前提下，后端应该尽量减少页面请求次数，尤其是有依赖关系的串行请求。另一方面，在一些影响不那么大的页面，则可以由前端自行进行接口组合（比如上面是用户主页的用户展示，下面是该用户的 feed 列表）。</p>
<p>另外，如果你们有一个好的设计师，那么他应该会贯彻一个地方只应该以一样东西为主体，而不应该去把乱七八糟的东西拼凑在一起。</p>
<h1 id="分页信息">分页信息</h1><p>现代的前端交互上，已经很少会有页码显示了，所以很多后端的列表页接口中，就没有带上了分页的信息，而改让客户端去维护请求的页码。</p>
<p>那么，分页信息在接口中，真的就没有存在的必要了吗？其实未必。</p>
<h2 id="为什么需要分页信息">为什么需要分页信息</h2><p>页面大小（pageSize）可能改变（无论是前端自己的配置亦或是后台修改），如果仅由客户端维护页码，那么下次请求下一页就会出错，除非客户端带上自己上次的页面大小。</p>
<p>如果客户端不知道当前页码和总页数，就无法在请求完判断底部应该显示<em>上拉加载更多</em>还是<em>没数据</em>了，导致必须再请求一次，根据是否返回 list 以及数据是否为空去进行判断。</p>
<p>另外，由后端返回页码也避免了客户端修改页码出错的可能。</p>
<p>但对后端来说，这些信息的获取却意味着更大的计算和I/O资源损耗。</p>
<h2 id="折中办法">折中办法</h2><p>折中地，可以让后端返回一个 <code>has_more</code> 字段，这样可以避免最后一次不必要的请求（尤其是数据都不够显示满一页的情况下），体验会好很多。尽管这样仍然无法避免页面大小改变的问题。</p>
<h1 id="配置">配置</h1><p>一些后台喜欢让让前端写限制逻辑，比如搜索的关键字限制，各种过滤逻辑。</p>
<p>咱们先不提让前端写死这些逻辑的灵活性问题（客户端和网页不同，不能那么方便地发版本，即便是网页，改代码发版本就不用测试了吗？出了问题你背？）。前端的输入真的可以信任吗？且不谈代码可能写的不够严谨导致输入跳过了检查，用户还能root、越狱，甚至可以反编译客户端或者直接模拟请求。</p>
<p>所以良好的配置检查应该有两种</p>
<ul>
<li>后端下发配置字段，前端根据字段去做对应检查。好处是减少后台压力，坏处是无法保证安全性。</li>
<li>后端收到请求自行检查过滤，如果出错则返回错误信息给前端显示。</li>
</ul>
<p>毋庸置疑，后者更好。</p>
<p>另外，再说说灵活性。今天可能限制3个字，明天产品需求可能就是4个字，现在产品/运营说不会改，到时候难道就真的一定不会改吗？</p>
<h1 id="空字段">空字段</h1><p>一些空字段，如果没有，服务端应该返回一个空的默认字段 比如 String 用””，int 用 0，Object 用 {}，Array 用 []，这样减小前端校验某些校验漏了出现错误的情况。</p>
<pre><code><span class="comment">---- 由三帅泥阿布补充</span>
</code></pre><p>我个人认为这样本身对流量损耗不大，且确实避免了很多可能的异常，是个很好的意见。当然了，正如后端不应该相信前端的输入一样，前端也不能相信后端数据的完备性，仍然还是需要悲剧地去校验。</p>
<h1 id="教训">教训</h1><ul>
<li><p>不要相信什么以后重构，接口现在这么说，以后他会告诉你，没法兼容老版本所以只能这样了（甚至搞出两套规则让你同时兼容）。</p>
</li>
<li><p>不是说后端就是老大。大家的目标都是为了项目能做好，而现在通常前端的压力比后端更大（前端写得头昏脑花，后端网上东逛西逛），所以在不会很大影响性能的前提下，应该满足前端的合理需求。体验为先。（硬气一点，老大应该挺你，甚至亲自去撕逼，大不了找CTO）</p>
</li>
<li><p>接口的频繁修改要向上反馈，测试数据不满足要求也要及时提出。咱们不做背锅侠。</p>
</li>
<li><p>灵活，灵活。做各种需求的时候，想一想，这儿会不会改变？就算现在不会变，以后就不会变吗？比如抽屉里的入口，是不是要做成可配置的？多问问，实现上尽量灵活。</p>
</li>
</ul>
<h1 id="总结">总结</h1><p>本篇讲了很多通用的后端接口设计问题。帮助大家在面对一些不合理的接口设计时，能进行友善的讨论（撕逼），让项目能做得更好。欢迎各位在评论里或者通过邮件（zhaiyifan56@gmail.com）补充其他点，我会标注出来源。</p>
<hr>
<p>欢迎加入QQ群：568863373。</p>
<p>欢迎关注我们的公众号：<code>魔都三帅</code>，欢迎大家来投稿~只需要是未在微信平台上发布过的技术相关类文章都可以哦（不局限于任何语言和平台）。</p>
<p><img src="http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg" alt="公众号"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Data Binding Component详解 - 换肤什么的只是它的一个小应用！]]></title>
      <url>http://blog.zhaiyifan.cn/2016/07/21/data-binding-component/</url>
      <content type="html"><![CDATA[<p>上一篇<a href="http://blog.zhaiyifan.cn/2016/07/06/android-new-project-from-0-p8/">从零开始的Android新项目8 - Data Binding高级篇</a>中，我们提到了使用Component来进行注入，以方便进行测试的功能，有一些朋友说写的不够清楚，还有些疑惑，所以本篇就来详细说说Component。</p>
<p>作为例子，我们的实现目标是使用Data Binding Component，让应用全局的TextView的文本都能随时变成test，还能进行全局换肤。</p>
<p>代码位于<a href="https://github.com/markzhai/DataBindingSample" target="_blank" rel="external">DataBindingSample</a>里面的component包下。</p>
<h1 id="DataBindingComponent接口">DataBindingComponent接口</h1><p>在<code>build/intermediates/classes</code>下面，可以找到<code>DataBindingComponent</code>类，包名为<code>android.databinding</code>，全局只会有一个该类——此接口在编译时生成，包含了所有用到的实例BindingAdapters的getter方法。</p>
<p>当一个BindingAdapter是一个实例方法（instance method），一个实现该方法的类的实例必须被实例化。这个生成的接口会包含每个声明BindingAdapter的类/接口的get方法。命名冲突会简单地加一个数字前缀到get方法前来解决。</p>
<p>如果使用Dagger 2，开发者可以继承这个接口，并把继承的接口注解为Component。</p>
<p>对应的接口有：</p>
<ul>
<li><a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#setDefaultComponent(android.databinding.DataBindingComponent" target="_blank" rel="external">setDefaultComponent(DataBindingComponent)</a>)</li>
<li><a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#inflate(android.view.LayoutInflater, int, android.view.ViewGroup, boolean, android.databinding.DataBindingComponent" target="_blank" rel="external">inflate(LayoutInflater, int, ViewGroup, boolean, DataBindingComponent)</a>), inflate一个binding layout并返回新创建的binding</li>
<li><a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#bind(android.view.View, android.databinding.DataBindingComponent" target="_blank" rel="external">bind(View, DataBindingComponent)</a>), 根据给定的layout root返回binding，如果没有则创建</li>
</ul>
<p>第一个接口全局起作用，后两个接口仅对该语句inflate的布局起作用。</p>
<h1 id="创建Component">创建Component</h1><h2 id="声明抽象adapter">声明抽象adapter</h2><p>如果不需要实现多个Component，可以直接跳过这一步。</p>
<p>我们声明一个抽象的adapter，在其中写上抽象方法来设置我们想要做data binding的属性，这里我们直接干掉了TextView的android命名空间下的text和textColor两个属性。</p>
<p>这里的<code>@BindingAdapter</code>注解会让data binding在component中生成我们这个adapter的get方法（必须是非静态的）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BindingAdapter</span>(<span class="string">"android:text"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BindingAdapter</span>(<span class="string">"android:textColor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(TextView view, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现adapter">实现adapter</h2><p>我们继承<code>MyBindingAdapter</code>分别实现两个adapter:</p>
<p><code>ProductionBindingAdapter.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionBindingAdapter</span> <span class="keyword">extends</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        TextViewBindingAdapter.setText(view, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(TextView view, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        view.setTextColor(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>TestBindingAdapter.java:</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBindingAdapter</span> <span class="keyword">extends</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        view.setText(value + <span class="string">" test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(TextView view, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == view.getContext()</span><br><span class="line">                .getResources()</span><br><span class="line">                .getColor(R.color.textColorDay)) &#123;</span><br><span class="line">            view.setTextColor(view.getContext()</span><br><span class="line">                    .getResources()</span><br><span class="line">                    .getColor(R.color.textColorNight));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>前者使用的是原来的设置，后者则分别给text加上了” test”后缀，并做了color的转换，实现了字体颜色的“换肤”功能。</p>
<h2 id="实现component">实现component</h2><p>在写了上面的代码后，再看看<code>DataBindingComponent</code>，会发现里面多了一个接口方法，遂实现之:</p>
<p>生产环境Component:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionComponent</span> <span class="keyword">implements</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyBindingAdapter mAdapter = <span class="keyword">new</span> ProductionBindingAdapter();</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试环境Component:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComponent</span> <span class="keyword">implements</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyBindingAdapter mAdapter = <span class="keyword">new</span> TestBindingAdapter();</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="使用">使用</h1><h2 id="layout">layout</h2><p>原先的text和textColor属性并没有通过data binding设置，我们要给它们套上<code>@{}</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"50dp"</span></span><br><span class="line">    <span class="attribute">android:onClick</span>=<span class="value">"@&#123;presenter.onClickSimpleDemo&#125;"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"@&#123;@string/demo_simple&#125;"</span></span><br><span class="line">    <span class="attribute">android:textColor</span>=<span class="value">"@&#123;@color/textColorDay&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注入component">注入component</h2><p>注入Component很简单，我们做全局的注入只需要调用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (DemoApplication.isTest) &#123;</span><br><span class="line">    DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> ProductionComponent());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> TestComponent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="重新创建activity">重新创建activity</h2><p>由于点击事件在<code>MainActivity</code>创建后才触发，所以这个activity上并不会起作用，我们需要重新创建它:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickInjectDemo</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DemoApplication.isTest) &#123;</span><br><span class="line">        DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> ProductionComponent());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> TestComponent());</span><br><span class="line">    &#125;</span><br><span class="line">    DemoApplication.isTest = !DemoApplication.isTest;</span><br><span class="line">    recreate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>设置后<code>recreate()</code>即可。可以看demo工程的效果，点击最后的按钮后，字体颜色发生变化，textview的text后面都加上了test字符串。</p>
<h1 id="静态adapter方法">静态adapter方法</h1><p>那么静态的BindingAdapter方法怎么去和Component做关联呢？很简单，只需要作为方法的第一个参数就可以了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:src"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(TestComponent component,</span><br><span class="line">                             ImageView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结">结</h1><p>本篇我们实践了Data Binding中比较高级的特性：Component。</p>
<p>其使用场景很多，如：</p>
<ul>
<li>换肤</li>
<li>打点</li>
<li>替换原生属性</li>
<li>等等</li>
</ul>
<p>欢迎大家发挥自己的想象力，补充更多的使用场景。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的Android新项目8 - Data Binding高级篇]]></title>
      <url>http://blog.zhaiyifan.cn/2016/07/06/android-new-project-from-0-p8/</url>
      <content type="html"><![CDATA[<p>承接<a href="http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/">上篇</a>，本篇继续讲解一些Data Binding更加进阶的内容，包括：列表绑定、自定义属性、双向绑定、表达式链、Lambda表达式、动画、Component注入（测试）等。</p>
<p>Demo源码库：<a href="https://github.com/markzhai/DataBindingSample" target="_blank" rel="external">DataBindingSample</a>。</p>
<h1 id="列表绑定">列表绑定</h1><p>App中经常用到列表展示，Data Binding在列表中一样可以扮演重要的作用，直接绑定数据和事件到每一个列表的item。</p>
<h2 id="RecyclerView">RecyclerView</h2><p>过去我们往往会使用ListView、GridView、或者GitHub上一些自定义的View来做瀑布流。自从RecyclerView出现后，我们有了新选择，只需要使用LayoutManager就可以。RecyclerView内置的垃圾回收，ViewHolder、ItemDecoration装饰器机制都让我们可以毫不犹豫地替换掉原来的ListView和GridView。</p>
<p>所以本篇仅拿RecyclerView做例子。</p>
<h2 id="Generic_Binding">Generic Binding</h2><p>我们只需要定义一个基类ViewHolder，就可以方便地使用上Data Binding:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingViewHolder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">ViewDataBinding</span>&gt; <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> T mBinding;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BindingViewHolder</span><span class="params">(T binding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(binding.getRoot());</span><br><span class="line">        mBinding = binding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Adapter可以直接使用该ViewHolder，或者再继承该ViewHolder，T使用具体Item的Binding类（以便直接访问内部的View）。至于Listener，可以在<code>onBindViewHolder</code>中进行绑定，做法类似于普通View，不做赘述。</p>
<p>由于同一个adapter未必只有一种ViewHolder，可能有好几种View type，所以在<code>onBindViewHolder</code>中，我们只能获取基类的ViewHolder类型，也就是<code>BindingViewHolder</code>，所以无法去做具体的set操作，如setEmployee。这时候就可以使用<code>setVariable</code>接口，然后通过BR来指定variable的name。</p>
<p>又比如我们可能有多重view type对应的xml，可以将对应的variable name全都写为item，这样可以避免强制转换Binding类去做set操作。类似地，监听器也能都统一取名为listener或者presenter。</p>
<h2 id="开源方案及其局限性">开源方案及其局限性</h2><p><a href="https://github.com/evant/binding-collection-adapter" target="_blank" rel="external">evant / binding-collection-adapter</a><br><a href="https://github.com/radzio/android-data-binding-recyclerview" target="_blank" rel="external">radzio / android-data-binding-recyclerview</a></p>
<p>均提供了简化的RV data binding方案。</p>
<p>前者可以直接在layout的RV上，设置对应的items和itemView进去，也支持多种view type，还能直接设定对应的LayoutManager。</p>
<p>后者类似地，提供了xml中直接绑定RV的items和itemView的功能。</p>
<p>相比来说前者的功能更强大一些。但这些开源库对应地都丧失了灵活性，ViewModel需要遵循规范，事件的绑定也比较死板，不如自己继承Adapter来得强大。唯一的好处也就是可以少写点代码了。</p>
<h1 id="自定义属性">自定义属性</h1><p>默认的android命名空间下，我们会发现并不是所有的属性都能直接通过data binding进行设置，比如margin，padding，还有自定义View的各种属性。</p>
<p>遇到这些属性，我们就需要自己去定义它们的绑定方法。</p>
<h2 id="Setter">Setter</h2><p>就像Data Binding会自动去查找get方法一下，在遇到属性绑定的时候，它也会去自动寻找对应的set方法。</p>
<p>拿DrawerLayout举一个例子:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v4.widget.DrawerLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">“wrap_content”</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">“wrap_content”</span></span><br><span class="line">    <span class="attribute">app:scrimColor</span>=<span class="value">“@&#123;@color</span>/<span class="attribute">scrimColor</span>&#125;”/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如此，通过使用app命名空间，data binding就会去根据属性名字找对应的set方法，scrimColor -&gt; setScrimColor:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScrimColor</span><span class="params">(@ColorInt <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">    mScrimColor = color;</span><br><span class="line">    invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果找不到的话，就会在编译期报错。</p>
<p>利用这种特性，对一些第三方的自定义View，我们就可以继承它，来加上我们的set函数，以对其使用data binding。</p>
<p>比如Fresco的<code>SimpleDraweeView</code>，我们想要直接在xml指定url，就可以加上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    view.setImageURI(TextUtils.isEmpty(url) ? <span class="keyword">null</span> : Uri.parse(url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这般，就能直接在xml中去绑定图片的url。这样是不是会比较麻烦呢，而且有一些系统的View，难道还要继承它们然后用自己实现的类？其实不然，我们还有其他方法可以做到自定义属性绑定。</p>
<h2 id="BindingMethods">BindingMethods</h2><p>如果View本身就支持这种属性的set，只是xml中的属性名字和java代码中的方法名不相同呢？难道就为了这个，我们还得去继承View，使代码产生冗余？</p>
<p>当然没有这么笨，这时候我们可以使用BindingMethods注释。</p>
<p>android:tint是给ImageView加上着色的属性，可以在不换图的前提下改变图标的颜色。如果我们直接对android:tint使用data binding，由于会去查找setTint方法，而该方法不存在，则会编译出错。而实际对应的方法，应该是<code>setImageTintList</code>。</p>
<p>这时候我们就可以使用BindingMethod指定属性的绑定方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingMethods</span>(&#123;</span><br><span class="line">       <span class="annotation">@BindingMethod</span>(type = “android.widget.ImageView”,</span><br><span class="line">                      attribute = “android:tint”,</span><br><span class="line">                      method = “setImageTintList”),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>我们也可以称BindingMethod为Setter重命名。</p>
<h2 id="BindingAdapter">BindingAdapter</h2><p>如果没有对应的set方法，或者方法签名不同怎么办？BindingAdapter注释可以帮我们来做这个。</p>
<p>比如View的android:paddingLeft属性，是没有对应的直接进行设置的方法的，只有setPadding(left, top, right, bottom)，而我们又不可能为了使用Data Binding去继承修改这种基础的View（即便修改了，还有一堆继承它的View呢）。又比如那些margin，需要修改必须拿到LayoutParams，这些都无法通过简单的set方法去做。</p>
<p>这时候我们可以使用BindingAdapter定义一个静态方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:paddingLeft"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPaddingLeft</span><span class="params">(View view, <span class="keyword">int</span> padding)</span> </span>&#123;</span><br><span class="line">    view.setPadding(padding,</span><br><span class="line">                    view.getPaddingTop(),</span><br><span class="line">                    view.getPaddingRight(),</span><br><span class="line">                    view.getPaddingBottom());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事实上这个Adapter已经由Data Binding实现好了，可以在android.databinding.adapters.ViewBindingAdapter看到有很多定义好的适配器，还有BindingMethod。如果需要自己再写点什么，仿照这些来写就好了。</p>
<p>我们还可以进行多属性绑定，比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(&#123;<span class="string">"bind:imageUrl"</span>, <span class="string">"bind:error"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(ImageView view, String url, Drawable error)</span> </span>&#123;</span><br><span class="line">   Picasso.with(view.getContext()).load(url).error(error).into(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>来使用Picasso读取图片到ImageView。</p>
<h2 id="BindingConversion">BindingConversion</h2><p>有时候我们想在xml中绑定的属性，未必是最后的set方法需要的，比如我们想用color（int），但是view需要Drawable，比如我们想用String，而view需要的是Url。这时候我们就可以使用<code>BindingConversion</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span></span><br><span class="line">    <span class="attribute">android:background</span>=<span class="value">“@&#123;isError</span> ? @<span class="attribute">color</span>/<span class="attribute">red</span> <span class="attribute">:</span> @<span class="attribute">color</span>/<span class="attribute">white</span>&#125;”</span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">“wrap_content”</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">“wrap_content”</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingConversion</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorDrawable <span class="title">convertColorToDrawable</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ColorDrawable(color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="双向绑定">双向绑定</h1><h2 id="自定义Listener">自定义Listener</h2><p>过去，我们需要自己定义Listener来做双向绑定:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:text</span>=<span class="value">“@&#123;user.name&#125;”</span></span><br><span class="line">    <span class="attribute">android:afterTextChanged</span>=<span class="value">“@&#123;callback.change&#125;”</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String text = s.toString();</span><br><span class="line">    <span class="keyword">if</span> (!text.equals(name.get()) &#123;</span><br><span class="line">        name.set(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要自己绑定afterTextChanged方法，然后检测text是否有改变，有改变则去修改observable。</p>
<h2 id="新方式_-_@=">新方式 - @=</h2><p>现在可以直接使用@=（而不是@）来进行双向绑定了，使用起来十分简单</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:inputType</span>=<span class="value">"textNoSuggestions"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"@=&#123;model.name&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，我们对这个EditText的输入，就会自动set到对应model的name字段上。</p>
<h2 id="原理">原理</h2><h3 id="InverseBindingListener">InverseBindingListener</h3><p><code>InverseBindingListener</code>是事件发生时触发的监听器:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InverseBindingListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onChange</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有双向绑定，最后都是通过这个接口来observable改变的，各种监听，比如TextWatcher、OnCheckedChange，都是间接通过这个接口来通知的，以上面的EditText为例子，最后生成的InverseBindingListener:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> android.databinding.InverseBindingListener mboundView1androidTe = <span class="keyword">new</span> android.databinding.InverseBindingListener() &#123;</span><br><span class="line">     <span class="annotation">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// Inverse of model.name</span></span><br><span class="line">         <span class="comment">//         is model.setName((java.lang.String) callbackArg_0)</span></span><br><span class="line">         java.lang.String callbackArg_0 = android.databinding.adapters.TextViewBindingAdapter.getTextString(mboundView1);</span><br><span class="line">         <span class="comment">// localize variables for thread safety</span></span><br><span class="line">         <span class="comment">// model != null</span></span><br><span class="line">         <span class="keyword">boolean</span> modelObjectnull = <span class="keyword">false</span>;</span><br><span class="line">         <span class="comment">// model</span></span><br><span class="line">         com.github.markzhai.sample.FormModel model = mModel;</span><br><span class="line">         <span class="comment">// model.name</span></span><br><span class="line">         java.lang.String nameModel = <span class="keyword">null</span>;</span><br><span class="line">         modelObjectnull = (model) != (<span class="keyword">null</span>);</span><br><span class="line">         <span class="keyword">if</span> (modelObjectnull) &#123;</span><br><span class="line">             model.setName((java.lang.String) (callbackArg_0));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="InverseBindingMethod_&amp;_InverseBindingAdapter">InverseBindingMethod &amp; InverseBindingAdapter</h3><p>上面的生成代码中，我们可以看到代码通过<code>TextViewBindingAdapter.getTextString(mboundView1)</code>去获得EditText中的字符串，查看源码可以看到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@InverseBindingAdapter</span>(attribute = <span class="string">"android:text"</span>, event = <span class="string">"android:textAttrChanged"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTextString</span><span class="params">(TextView view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view.getText().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原来跟上面的BindingMethod和BindingAdapter做set操作类似，双向绑定通过注解进行get操作。</p>
<p>完整的逻辑又是:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:text"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, CharSequence text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> CharSequence oldText = view.getText();</span><br><span class="line">    <span class="keyword">if</span> (text == oldText || (text == <span class="keyword">null</span> &amp;&amp; oldText.length() == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spanned) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.equals(oldText)) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// No change in the spans, so don't set anything.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!haveContentsChanged(text, oldText)) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// No content changes, so don't set anything.</span></span><br><span class="line">    &#125;</span><br><span class="line">    view.setText(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@InverseBindingAdapter</span>(attribute = <span class="string">"android:text"</span>, event = <span class="string">"android:textAttrChanged"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTextString</span><span class="params">(TextView view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view.getText().toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@BindingAdapter</span>(value = &#123;<span class="string">"android:beforeTextChanged"</span>, <span class="string">"android:onTextChanged"</span>,</span><br><span class="line">        <span class="string">"android:afterTextChanged"</span>, <span class="string">"android:textAttrChanged"</span>&#125;, requireAll = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTextWatcher</span><span class="params">(TextView view, <span class="keyword">final</span> BeforeTextChanged before,</span><br><span class="line">        <span class="keyword">final</span> OnTextChanged on, <span class="keyword">final</span> AfterTextChanged after,</span><br><span class="line">        <span class="keyword">final</span> InverseBindingListener textAttrChanged)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> TextWatcher newValue;</span><br><span class="line">    <span class="keyword">if</span> (before == <span class="keyword">null</span> &amp;&amp; after == <span class="keyword">null</span> &amp;&amp; on == <span class="keyword">null</span> &amp;&amp; textAttrChanged == <span class="keyword">null</span>) &#123;</span><br><span class="line">        newValue = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newValue = <span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (before != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    before.beforeTextChanged(s, start, count, after);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (on != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    on.onTextChanged(s, start, before, count);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (textAttrChanged != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    textAttrChanged.onChange();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (after != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    after.afterTextChanged(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> TextWatcher oldValue = ListenerUtil.trackListener(view, newValue, R.id.textWatcher);</span><br><span class="line">    <span class="keyword">if</span> (oldValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.removeTextChangedListener(oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.addTextChangedListener(newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们也可以使用InverseBindingMethod做到一样的效果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@InverseBindingMethods</span>(&#123;</span><br><span class="line">    <span class="annotation">@InverseBindingMethod</span>(</span><br><span class="line">    type=android.widget.TextView.class,</span><br><span class="line">    attribute=“android:text”,</span><br><span class="line">    method=“getText”,                   <span class="comment">// 默认会根据attribute name获取get</span></span><br><span class="line">    event=“android:textAttrChanged”)&#125;)  <span class="comment">// 默认根据attribute增加AttrChanged</span></span><br></pre></td></tr></table></figure></p>
<p>data binding通过<code>textAttrChanged</code>的event找到<code>setTextWatcher</code>方法，而<code>setTextWatcher</code>通知<code>InverseBindingListener</code>的<code>onChange</code>方法，onChange方法则使用找到的get和set方法去进行检查和更新。</p>
<h2 id="解决死循环">解决死循环</h2><p>如果仔细想想双向绑定的逻辑，用户输入导致实例事件发生，更新了实例的属性，实例的属性改变又会触发这个View的notify，从而变成了一个不断互相触发刷新的死循环。</p>
<p>为了解决死循环，我们需要做一个简单的检查，在上面的setText方法我们可以看到，如果两次的text没有改变，则会直接return，这样就杜绝了无限循环调用的可能。在自己做自定义双向绑定的时候，需要注意这点。</p>
<p>目前双向绑定仅支持如text，checked，year，month，hour，rating，progress等绑定。</p>
<h2 id="属性改变监听">属性改变监听</h2><p>如果除了更新Observable，我们还想做一些其他事情怎么办？比如根据输入内容更新标志位？<br>我们可以直接使用observable上的addOnPropertyChangedCallback方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mModel.addOnPropertyChangedCallback(<span class="keyword">new</span> Observable.OnPropertyChangedCallback() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPropertyChanged</span><span class="params">(Observable observable, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == BR.name) &#123;</span><br><span class="line">            Toast.makeText(TwoWayActivity.<span class="keyword">this</span>, <span class="string">"name changed"</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == BR.password) &#123;</span><br><span class="line">            Toast.makeText(TwoWayActivity.<span class="keyword">this</span>, <span class="string">"password changed"</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="表达式链">表达式链</h1><h2 id="重复的表达式">重复的表达式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;user.isAdult</span> ? <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;user.isAdult</span> ? <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">CheckBox</span> <span class="attribute">android:visibility</span>=<span class="value">"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以简化为:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:id</span>=<span class="value">“@+id</span>/<span class="attribute">avatar</span>”</span><br><span class="line"> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;user.isAdult</span> ? <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;avatar.visibility&#125;”</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">CheckBox</span> <span class="attribute">android:visibility</span>=<span class="value">"@&#123;avatar.visibility&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="隐式更新">隐式更新</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">CheckBox</span> <span class="attribute">android:id</span>=<span class="value">”@+id</span>/<span class="attribute">seeAds</span>“/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;seeAds.checked</span> ?</span><br><span class="line">  <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样CheckBox的状态变更后ImageView会自动改变visibility。</p>
<h1 id="Lambda表达式">Lambda表达式</h1><p>除了直接使用方法引用，在Presenter中写和OnClickListener一样参数的方法，我们还能使用Lambda表达式:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:onClick=“@&#123;(view)-&gt;presenter.save(view, item)&#125;”</span><br><span class="line">android:onClick=“@&#123;()-&gt;presenter.save(item)&#125;”</span><br><span class="line">android:onFocusChange=“@&#123;(v, fcs)-&gt;presenter.refresh(item)&#125;”</span><br></pre></td></tr></table></figure>
<p>我们还可以在lambda表达式引用view id（像上面表达式链那样），以及context。</p>
<h1 id="动画">动画</h1><h2 id="transition">transition</h2><p>使用data binding后，我们还能自动去做transition动画:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">binding.addOnRebindCallback(<span class="keyword">new</span> OnRebindCallback() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreBind</span><span class="params">(ViewDataBinding binding)</span> </span>&#123;</span><br><span class="line">        ViewGroup sceneRoot = (ViewGroup) binding.getRoot();</span><br><span class="line">        TransitionManager.beginDelayedTransition(sceneRoot);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这样，当我们的view发生改变，比如visibility变化的时候，就能看到一些transition动画。</p>
<h1 id="Component注入">Component注入</h1><p>如果我们想要利用data binding做一些测试功能怎么办？比如打点，记录一下东西:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@BindingAdapter</span>(“android:text”)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isTesting) &#123;</span><br><span class="line">            doTesting(view, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TextViewBindingAdapter.setText(view, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但如此一来，我们就要给所有的方法都写上if/else，维护起来很困难，也影响美感。</p>
<p>那么我们就可以使用component:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBindingAdapter</span> <span class="keyword">extends</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        doTesting(view, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComponent</span> <span class="keyword">implements</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyBindingAdapter mAdapter = <span class="keyword">new</span> TestBindingAdapter();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态的adapter怎么办呢，我们只需要把component作为第一个参数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(“android:src”)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(TestComponent component, ImageView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后通过<code>DataBindingUtil.setDefaultComponent(new TestComponent());</code>就能让data binding使用该Component提供的adapter方法。</p>
<h1 id="学习和使用建议">学习和使用建议</h1><h2 id="学习建议">学习建议</h2><ul>
<li>尽量在项目中进行尝试，只有在不断碰到业务的需求时，才会在真正的场景下使用并发现Data Binding的强大之处。</li>
<li>摸索xml和java的界限，不要以为Data Binding是万能的，而想尽办法把逻辑写在xml中，如果你的同事没法一眼看出这个表达式是做什么的，那可能它就应该放在Java代码中，以ViewModel的形式去承担部分逻辑。</li>
<li>Lambda表达式/测试时注入等Data Binding的高级功能也可以自己多试试，尤其是注入，相当强大。</li>
</ul>
<h2 id="使用建议">使用建议</h2><ul>
<li>对新项目，不要犹豫，直接上。</li>
<li>对于老的项目，可以替换ButterKnife这种库，从findViewById开始改造，逐渐替换老代码。</li>
<li>callback绑定只做事件传递，NO业务逻辑，比如转账</li>
<li>保持表达式简单（不要做过于复杂的字符串、函数调用操作）</li>
</ul>
<p>对于老项目，可以进行以下的逐步替换:</p>
<h3 id="Level_1_-_No_more_findViewById">Level 1 - No more findViewById</h3><p>逐步替换findViewById，取而代之地，使用binding.name, binding.age直接访问View。</p>
<h3 id="Level_2_-_SetVariable">Level 2 - SetVariable</h3><p>引入variable，把手动在代码对View进行set替换为xml直接引用variable。</p>
<h3 id="Level_3_-_Callback">Level 3 - Callback</h3><p>使用Presenter/Handler类来做事件的绑定。</p>
<h3 id="Level_4_-_Observable">Level 4 - Observable</h3><p>创建ViewModel类来进行即时的属性更新触发UI刷新。</p>
<h3 id="Level_5_-_双向绑定">Level 5 - 双向绑定</h3><p>运用双向绑定来简化表单的逻辑，将form data变成ObservableField。这样我们还可以在xml做一些酷炫的事情，比如button仅在所有field非空才为enabled（而过去要做到这个得加上好几个EditText的OnTextChange监听）。</p>
<h1 id="总结">总结</h1><p>本文上下两篇介绍了大部分data binding现存的特性及部分的实现原理，大家如果纯看而不实践的话，可能会觉得有些头大，建议还是通过项目进行一下实践，才能真正体会到data binding的强大之处。欢迎加入我们的QQ群（568863373）进行讨论，你也可以加我的微信（shin_87224330）一起学习。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的Android新项目7 - Data Binding入门篇]]></title>
      <url>http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/</url>
      <content type="html"><![CDATA[<h1 id="引">引</h1><p>Data Binding自从去年的Google I/O发布到至今，也有近一年的时间了。这一年来，从Beta到如今比较完善的版本，从Android Studio 1.3到如今2.1.2的支持，可以说Data Binding已经是一个可用度较高，也能带来实际生产力提升的技术了。</p>
<p>然而事实上，真正使用到Data Binding的公司、项目仍然是比较少的。可能是出于稳定性考虑，亦或是对Data Binding技术本身不够熟悉，又或许对新技术没什么追求。</p>
<p>我司在新的产品中就全面使用了Data Binding技术，无论是我，还是新来直接面对Data Binding上手的工程师也好，都对其爱不释手，用惯了后简直停不下来。</p>
<p>希望在看完本文的介绍后，会有更多的朋友产生兴趣，来使用Data Binding，参与它的讨论。</p>
<p>Demo源码库：<a href="https://github.com/markzhai/DataBindingSample" target="_blank" rel="external">DataBindingSample</a></p>
<h2 id="什么是Data_Binding">什么是Data Binding</h2><p>Data Binding，顾名思义，数据绑定，是Google对MVVM在Android上的一种实现，可以直接绑定数据到xml中，并实现自动刷新。现在最新的版本还支持双向绑定，尽管使用场景不是那么多。</p>
<p>Data Binding可以提升开发效率（节省很多以往需要手写的java代码），性能高（甚至超越手写代码），功能强（强大的表达式支持）。</p>
<h2 id="用途">用途</h2><ul>
<li>去掉Activities &amp; Fragments内的大部分UI代码（setOnClickListener, setText, findViewById, etc.)</li>
<li>XML变成UI的唯一真实来源</li>
<li>减少定义view id的主要用途（数据绑定直接发生在xml）</li>
</ul>
<h2 id="开源方案">开源方案</h2><ul>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a>, Jake大神的知名库了，可以少些很多findViewById，setOnClickListener，取而代之地用annotation去生成代码。</li>
<li><a href="http://androidannotations.org/" target="_blank" rel="external">Android Annotations</a>，同样通过annotation，大量的annotation，侵入性较强，需要遵循其规范写一些代码，像是@AfterViews注释中才能对View进行操作。</li>
<li><a href="http://robobinding.github.io/RoboBinding" target="_blank" rel="external">RoboBinding</a>，和Data Binding最相似的一个方案，同样很多事情放在xml去做了，使用了aspectJ去做生成。</li>
</ul>
<p>除了这些比较有名的，还有很多各不相同的方案，但自从data binding发布后，可以说它们都再也没有用武之地了，因为无论从性能、功能，还是ide的支持上，data binding都更好。</p>
<h2 id="优势">优势</h2><ul>
<li>UI代码放到了xml中，布局和数据更紧密</li>
<li>性能超过手写代码</li>
<li>保证执行在主线程</li>
</ul>
<h2 id="劣势">劣势</h2><ul>
<li>IDE支持还不那么完善（提示、表达式）</li>
<li>报错信息不那么直接</li>
<li>重构支持不好（xml中进行重构，java代码不会自动修改）</li>
</ul>
<h1 id="使用">使用</h1><p>使用起来实在很简单，在app模块的build.gradle中加上几行代码就行了。</p>
<h2 id="Gradle">Gradle</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    …</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="layout_tag">layout tag</h2><p>把一个普通的layout变成data binding layout也只要几行的修改:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layout</span>&gt;</span></span><br><span class="line">	// 原来的layout</span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在xml的最外层套上layout标签即可，修改后就可以看到生成了该布局对应的*Binding类。</p>
<h2 id="Binding生成规则">Binding生成规则</h2><p>默认生成规则：xml通过文件名生成，使用下划线分割大小写。<br>比如activity_demo.xml，则会生成ActivityDemoBinding，item_search_hotel则会生成ItemSearchHotelBinding。</p>
<p>view的生成规则类似，只是由于是类变量，首字母不是大写，比如有一个TextView的id是first_name，则会生成名为firstName的TextView。</p>
<p>我们也可以自定义生成的class名字，只需要：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span> <span class="attribute">class</span>=<span class="value">“ContactItem”</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样生成的类就会变成<code>ContactItem</code>。</p>
<h1 id="基础用法">基础用法</h1><h2 id="生成Binding实例">生成Binding实例</h2><p>所有Binding实例的生成都可以通过<code>DataBindingUtil</code>进行，方法名与该view的原inflate方法一致，如activity仍然为setContentView，只是增加了参数因为需要获得activity。</p>
<h2 id="去除findViewById">去除findViewById</h2><p>使用了Data Binding后，我们再也不需要findViewById，因为一切有id的view，都已经在Binding类中被初始化完成了，只需要直接通过binding实例访问即可。</p>
<h2 id="变量绑定">变量绑定</h2><p>使用data标签，我们就可以在xml中申明变量，在其中使用该变量的field，并通过binding实例set进来。</p>
<p>如:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span></span><br><span class="line">        <span class="attribute">name</span>=<span class="value">"employee"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"com.github.markzhai.databindingsample.Employee"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:gravity</span>=<span class="value">"center_horizontal"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">    <span class="attribute">tools:context</span>=<span class="value">".DemoActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"@&#123;employee.lastName&#125;"</span></span><br><span class="line">        <span class="attribute">android:layout_marginLeft</span>=<span class="value">"5dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们就可以在java代码中使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">binding.setEmployee(employee);</span><br><span class="line"><span class="comment">// 或者直接通过setVariable</span></span><br><span class="line">binding.setVariable(BR.employee, employee);</span><br></pre></td></tr></table></figure></p>
<h2 id="事件绑定">事件绑定</h2><p>严格意义上来说，事件绑定也是一种变量绑定。我们可以在xml中直接绑定</p>
<ul>
<li>android:onClick</li>
<li>android:onLongClick</li>
<li>android:onTextChanged</li>
<li>…</li>
</ul>
<h3 id="方法引用">方法引用</h3><p>通常会在java代码中定义一个名为Handler或者Presenter的类，然后set进来，方法签名需和对应listener方法一致。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layout</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attribute">xmlns:bind</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.view.View"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">variable</span></span><br><span class="line">            <span class="attribute">name</span>=<span class="value">"employee"</span></span><br><span class="line">            <span class="attribute">type</span>=<span class="value">"com.github.markzhai.databindingsample.Employee"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">variable</span></span><br><span class="line">            <span class="attribute">name</span>=<span class="value">"presenter"</span></span><br><span class="line">            <span class="attribute">type</span>=<span class="value">"com.github.markzhai.databindingsample.DemoActivity.Presenter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:gravity</span>=<span class="value">"center_horizontal"</span></span><br><span class="line">        <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">        <span class="attribute">tools:context</span>=<span class="value">".DemoActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:hint</span>=<span class="value">"输入 First Name"</span></span><br><span class="line">            <span class="attribute">android:onTextChanged</span>=<span class="value">"@&#123;presenter::onTextChanged&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:onClick</span>=<span class="value">"@&#123;presenter.onClick&#125;"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"@&#123;employee.firstName&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Java代码中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    binding.setPresenter(<span class="keyword">new</span> Presenter());</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Presenter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        employee.setFirstName(s.toString());</span><br><span class="line">        employee.setFired(!employee.isFired.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(DemoActivity.<span class="keyword">this</span>, <span class="string">"点到了"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="监听器绑定（lambda）">监听器绑定（lambda）</h3><p>可以不遵循默认的方法签名：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_margin</span>=<span class="value">"5dp"</span></span><br><span class="line">    <span class="attribute">android:visibility</span>=<span class="value">"@&#123;employee.isFired ? View.GONE : View.VISIBLE&#125;"</span></span><br><span class="line">    <span class="attribute">android:onClick</span>=<span class="value">"@&#123;() -&gt; presenter.onClickListenerBinding(employee)&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Presenter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickListenerBinding</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(DemoActivity.<span class="keyword">this</span>, employee.getLastName(),</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Data_Binding原理">Data Binding原理</h1><h2 id="狭义原理">狭义原理</h2><p>狭义上，我们可以直接通过调用的接口以及生成的一些类，来观察其工作原理。</p>
<p>作为切入口，我们来看看DataBindingUtil的接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">setContentView</span><span class="params">(Activity activity, <span class="keyword">int</span> layoutId,</span><br><span class="line">        DataBindingComponent bindingComponent)</span> </span>&#123;</span><br><span class="line">    activity.setContentView(layoutId);</span><br><span class="line">    View decorView = activity.getWindow().getDecorView();</span><br><span class="line">    ViewGroup contentView = (ViewGroup) decorView.findViewById(android.R.id.content);</span><br><span class="line">    <span class="keyword">return</span> bindToAddedViews(bindingComponent, contentView, <span class="number">0</span>, layoutId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">bindToAddedViews</span><span class="params">(DataBindingComponent component,</span><br><span class="line">        ViewGroup parent, <span class="keyword">int</span> startChildren, <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> endChildren = parent.getChildCount();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childrenAdded = endChildren - startChildren;</span><br><span class="line">    <span class="keyword">if</span> (childrenAdded == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> View childView = parent.getChildAt(endChildren - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> bind(component, childView, layoutId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> View[] children = <span class="keyword">new</span> View[childrenAdded];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenAdded; i++) &#123;</span><br><span class="line">            children[i] = parent.getChildAt(i + startChildren);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bind(component, children, layoutId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，然后会跑到具体Binding类中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ItemFeedRecommendUserBinding</span><span class="params">(android.databinding.DataBindingComponent bindingComponent, View root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(bindingComponent, root, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">final</span> Object[] bindings = mapBindings(bindingComponent, root, <span class="number">5</span>, sIncludes, sViewsWithIds);</span><br><span class="line">    <span class="keyword">this</span>.mboundView0 = (android.widget.LinearLayout) bindings[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.mboundView0.setTag(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.recommendUserFirst = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">this</span>.recommendUserFourth = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">this</span>.recommendUserSecond = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">this</span>.recommendUserThird = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">3</span>];</span><br><span class="line">    setRootTag(root);</span><br><span class="line">    <span class="comment">// listeners</span></span><br><span class="line">    invalidateAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到所有view是一次完成的初始化，比起一个个进行findViewById，显然这样一次性会更快。</p>
<p>除了view的初始化，在<code>executeBindings</code>中，会通过<code>mDirtyFlags</code>去判断各个field是否需要更新，而其置位则通过各个set函数去更新。</p>
<h2 id="流程原理">流程原理</h2><p><img src="/images/android-new-project-from-0-db-1.png" alt="data binding"></p>
<p>处理layout文件 -&gt; 变为没有data binding的layout文件<br>解析表达式 -&gt; 确保表达式语法正确<br>解析依赖 -&gt; user.isAdmin, isAdmin是field还是method…<br>Setter -&gt; 如visibility</p>
<h2 id="性能">性能</h2><ul>
<li>0反射</li>
<li>findViewById需要遍历整个viewgroup，而现在只需要做一次就可以初始化所有需要的view</li>
<li>使用位标记来检验更新（dirtyFlags）</li>
<li>数据改变在下一次批量更新才会触发操作</li>
<li>表达式缓存，同一次刷新中不会重复计算</li>
</ul>
<h1 id="进阶用法">进阶用法</h1><h2 id="表达式">表达式</h2><ul>
<li>算术 + - / * %</li>
<li>字符串合并 +</li>
<li>逻辑 &amp;&amp; ||</li>
<li>二元 &amp; | ^</li>
<li>一元 + - ! ~</li>
<li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>
<li>比较 == &gt; &lt; &gt;= &lt;=</li>
<li>Instanceof</li>
<li>Grouping ()</li>
<li>文字 - character, String, numeric, null</li>
<li>Cast</li>
<li>方法调用</li>
<li>Field 访问</li>
<li>Array 访问 []</li>
<li>三元 ?:</li>
</ul>
<p>尚且不支持this, super, new, 以及显示的泛型调用。</p>
<p>值得一提的是还有空合并运算符，如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=“@&#123;user.displayName ?? user.lastName&#125;”</span><br></pre></td></tr></table></figure></p>
<p>会取第一个非空值作为结果。</p>
<p>这里举一个常见的例子，某个view的margin是其左侧ImageView的margin加上该ImageView的宽度，以往我们可能需要再定义一个dimension来放这两个值的合，现在只需要<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:marginLeft="@&#123;@dimen/margin + @dimen/avatar_size&#125;"</span><br></pre></td></tr></table></figure></p>
<p>就搞定了。</p>
<p>我们甚至还可以直接组合字符串，如:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;@string/nameFormat(firstName, lastName)&#125;"</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"nameFormat"</span>&gt;</span>%s, %s<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="避免空指针">避免空指针</h2><p>data binding会自动帮助我们进行空指针的避免，比如说@{employee.firstName}，如果employee是null的话，employee.firstName则会被赋默认值（null）。int的话，则是0。</p>
<p>需要注意的是数组的越界，毕竟这儿是xml而不是java，没地方让你去判断size的。</p>
<h2 id="include">include</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">“@layout</span>/<span class="attribute">name</span>” <span class="attribute">bind:user</span>=<span class="value">"@&#123;user&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于include的布局，使用方法类似，不过需要在里面绑定两次，外面include该布局的layout使用<code>bind:user</code>给set进去。</p>
<p>这里需要注意的一点是，被include的布局必须顶层是一个ViewGroup，目前Data Binding的实现，如果该布局顶层是一个View，而不是ViewGroup的话，binding的下标会冲突（被覆盖），从而产生一些预料外的结果。</p>
<h2 id="ViewStubs">ViewStubs</h2><p>ViewStub比较特殊，在被实际inflate前是不可见的，所以使用了特殊的方案，用了final的<code>ViewStubProxy</code>来代表它，并监听了<code>ViewStub.OnInflateListener</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> OnInflateListener mProxyListener = <span class="keyword">new</span> OnInflateListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInflate</span><span class="params">(ViewStub stub, View inflated)</span> </span>&#123;</span><br><span class="line">        mRoot = inflated;</span><br><span class="line">        mViewDataBinding = DataBindingUtil.bind(mContainingBinding.mBindingComponent,</span><br><span class="line">                inflated, stub.getLayoutResource());</span><br><span class="line">        mViewStub = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mOnInflateListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mOnInflateListener.onInflate(stub, inflated);</span><br><span class="line">            mOnInflateListener = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mContainingBinding.invalidateAll();</span><br><span class="line">        mContainingBinding.forceExecuteBindings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在onInflate的时候才会进行真正的初始化。</p>
<h2 id="Observable">Observable</h2><p>一个纯净的Java ViewModel类被更新后，并不会让UI去更新。而数据绑定后，我们当然会希望数据变更后UI会即时刷新，Observable就是为此而生的概念。</p>
<h3 id="BaseObservable">BaseObservable</h3><p>类继承BaseObservable:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String firstName;</span><br><span class="line">   <span class="keyword">private</span> String lastName;</span><br><span class="line">   <span class="annotation">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="annotation">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">       notifyPropertyChanged(BR.firstName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">       notifyPropertyChanged(BR.lastName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BaseObservable提供了一系列notify函数（其实就是notifyChange和notifyPropertyChanged），前者会刷新所有的值域，后者则只更新对应BR的flag，该BR的生成通过注释@Bindable生成，在上面的实例代码中，我们可以看到两个get方法被注释上了，所以我们可以通过BR访问到它们并进行特定属性改变的notify。</p>
<h3 id="Observable_Fields">Observable Fields</h3><p>如果所有要绑定的都需要创建Observable类，那也太麻烦了。所以Data Binding还提供了一系列Observable，包括 ObservableBoolean, ObservableByte, ObservableChar, ObservableShort, ObservableInt, ObservableLong, ObservableFloat, ObservableDouble, 和ObservableParcelable。我们还能通过ObservableField泛型来申明其他类型，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; firstName =</span><br><span class="line">       <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; lastName =</span><br><span class="line">       <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableInt age = <span class="keyword">new</span> ObservableInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在xml中，使用方法和普通的String，int一样，只是会自动刷新，但在java中访问则会相对麻烦：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.firstName.set(<span class="string">"Google"</span>);</span><br><span class="line"><span class="keyword">int</span> age = user.age.get();</span><br></pre></td></tr></table></figure></p>
<p>相对来说，每次要get/set还是挺麻烦，私以为还不如直接去继承BaseObservable。</p>
<h3 id="Observable_Collections">Observable Collections</h3><p>有一些应用使用更动态的结构来保存数据，这时候我们会希望使用Map来存储数据结构。Observable提供了<code>ObservableArrayMap</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayMap&lt;String, Object&gt; user = <span class="keyword">new</span> ObservableArrayMap&lt;&gt;();</span><br><span class="line">user.put(<span class="string">"firstName"</span>, <span class="string">"Google"</span>);</span><br><span class="line">user.put(<span class="string">"lastName"</span>, <span class="string">"Inc."</span>);</span><br><span class="line">user.put(<span class="string">"age"</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure></p>
<p>而在xml中，我们可以直接通过下标key访问它们：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.databinding.ObservableMap"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"ObservableMap&amp;lt;String, Object&gt;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;user["lastName"]&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;String.valueOf(1 + (Integer)user["age"])&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当我们不想定义key的时候，可以使用<code>ObservableArrayList</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayList&lt;Object&gt; user = <span class="keyword">new</span> ObservableArrayList&lt;&gt;();</span><br><span class="line">user.add(<span class="string">"Google"</span>);</span><br><span class="line">user.add(<span class="string">"Inc."</span>);</span><br><span class="line">user.add(<span class="number">17</span>);</span><br></pre></td></tr></table></figure>
<p>layout中直接通过数字下标进行访问。</p>
<h2 id="动态变量">动态变量</h2><p>有时候，我们并不知道具体生成的binding类是什么。比如在RecyclerView中，可能有多种ViewHolder，而我们拿到的holder只是一个基类（这个基类具体怎么写下篇中会提到），这时候，我们可以在这些item的layout中都定义名字同样的variable，比如item，然后直接调用<code>setVariable</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BindingHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> T item = mItems.get(position);</span><br><span class="line">   holder.getBinding().setVariable(BR.item, item);</span><br><span class="line">   holder.getBinding().executePendingBindings();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>executePendingBindings会强制立即刷新绑定的改变。</p>
<h1 id="参考资料">参考资料</h1><p><a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="external">https://developer.android.com/topic/libraries/data-binding/index.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的Android新项目6 - Repository层(下) Realm、缓存、异常处理]]></title>
      <url>http://blog.zhaiyifan.cn/2016/05/15/android-new-project-from-0-p6/</url>
      <content type="html"><![CDATA[<p>承接上篇 <a href="http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/">从零开始的Android新项目5 - Repository层(上) Retrofit、Repository组装</a>，本文继续介绍Realm、缓存，以及统一的异常处理设计。</p>
<h1 id="Realm">Realm</h1><p><a href="https://realm.io/" target="_blank" rel="external">Realm</a>在移动端数据库中也算是比较有名的一款了，以其跨平台和惊人的速度而闻名。啊，对了，还有文档多。</p>
<p>这里要黑的就是文档问题，Realm虽然乍一看文档很多，但是老实说，写的挺乱的。不过总体来说，实践和应用中感觉还不错，性能好，也比较方便，比起不稳定的DBFlow和麻烦至极的GreenDao来好了太多了，唯一的美中不足就是so比较大，会增大包的体积1MB。</p>
<h2 id="引入">引入</h2><p>从Realm 0.90开始，用法与之前有了改变：</p>
<p>在root的build.gralde中:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"io.realm:realm-gradle-plugin:0.90.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在对应需要应用到Realm的，比如data module的build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'realm-android'</span></span><br></pre></td></tr></table></figure></p>
<p>即可使用Realm。</p>
<h2 id="使用">使用</h2><p>使用起来也很方便，比如我们想要缓存用户的信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPo</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String headerUrl;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就对应了一个表，其主键为id，另外有3列name, headerUrl, 以及updateTime。</p>
<p>如果想要查询，只需要：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserPo user = getRealm().where(UserPo.class)</span><br><span class="line">        .equalTo(<span class="string">"id"</span>, userId)</span><br><span class="line">        .findFirst();</span><br></pre></td></tr></table></figure>
<p>如果要写入一条记录：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> UserPo();</span><br><span class="line">user.setName(userInfoEntity.getNickName());</span><br><span class="line">user.setId(userInfoEntity.getUserId());</span><br><span class="line">user.setHeaderUrl(userInfoEntity.getHeaderImageUrl());</span><br><span class="line">user.setUpdateTime(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">getRealm().beginTransaction();</span><br><span class="line">getRealm().copyToRealmOrUpdate(user);</span><br><span class="line">getRealm().commitTransaction();</span><br></pre></td></tr></table></figure></p>
<p>就是这么简单。</p>
<p>如果想要直接和Retrofit一起应用，去进行串行化，可以参考该<a href="https://gist.github.com/cmelchior/ddac8efd018123a1e53a" target="_blank" rel="external">Gist</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合 Realm, Retrofit 和 RxJava (使用了Retrolambda以简化符号)的例子。</span></span><br><span class="line"><span class="comment">// 读取所有Person，然后与从GitHub获取的最新状态merge到一起</span></span><br><span class="line">Realm realm = Realm.getDefaultInstance();</span><br><span class="line">GitHubService api = retrofit.create(GitHubService.class);</span><br><span class="line">realm.where(Person.class).isNotNull(<span class="string">"username"</span>).findAllAsync().asObservable()</span><br><span class="line">    .filter(persons.isLoaded)</span><br><span class="line">    .flatMap(persons -&gt; Observable.from(persons))</span><br><span class="line">    .flatMap(person -&gt; api.user(person.getGithubUserName())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(user -&gt; showUser(user));</span><br></pre></td></tr></table></figure>
<p>更多详情可以去<a href="https://realm.io/docs/java/latest/" target="_blank" rel="external">官网</a>看，migration/relationship等等支持应有尽有，我只能说，文档实在太长太长了。</p>
<h1 id="内存">内存</h1><p>内存，也就是直接使用变量存储在对应repository中，如果非空则优先直接返回内存中的变量。</p>
<h2 id="LruCache">LruCache</h2><p>LruCache限定了最大的entry数量，近期最少使用算法保证了淘汰机制的合理性。使用场景如用户信息缓存，会淘汰那些最近没有访问过的用户的信息缓存。使用可参考Google官网：<a href="https://developer.android.com/reference/android/util/LruCache.html" target="_blank" rel="external">LruCache</a>。</p>
<h2 id="变量存储">变量存储</h2><p>变量存储很简单，直接在Repository实现类中直接变量存储上一次的返回结果，在下一次请求的时候优先使用内存缓存。使用场景如请求后直接刷新本地的变量，下次调用repository方法使用啊concat先返回内存里的变量，然后再使用网络数据进行刷新。</p>
<h1 id="统一异常处理">统一异常处理</h1><p>作为Repository层，本身不会，也不应该去处理任何异常和错误（比如请求的错误码），一切都将作为Exception异常抛给上层去做统一处理，而RxJava的onError机制也帮助我们能优雅地去做这件事。</p>
<h2 id="Observable-error">Observable.error</h2><p>类似在上一篇中提到的方法，我们可以使用Observable.error返回异常，供上层根据该异常做对应处理。无论是网络异常，数据库异常，亦或是服务器response异常等等，都可以进行分类创建对应的Exception类，抛给上层。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">extractData</span><span class="params">(Observable&lt;MrResponse&gt; observable, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> observable.flatMap(response -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> NetworkConnectionException());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.getStatusCode() == ResponseException.STATUS_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.just(mGson.fromJson(mGson.toJson(response.data), clazz));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.e(TAG, response.data);</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> ResponseException(response));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Subscriber-onError">Subscriber.onError</h2><p>我们使用Subscriber的基类来处理通用错误，其他所有Subscriber继承它:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MrSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">DefaultSubscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onError(e);</span><br><span class="line">       <span class="keyword">if</span> (!handleCommonResponseError((Exception) e)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.getMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">               Logger.w(TAG, e.getMessage());</span><br><span class="line">           &#125;</span><br><span class="line">           showErrorMessage(<span class="keyword">new</span> DefaultErrorBundle((Exception) e));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showErrorMessage</span><span class="params">(ErrorBundle errorBundle)</span> </span>&#123;</span><br><span class="line">    String errorMessage = ErrorMessageFactory.create(<span class="keyword">this</span>, errorBundle.getException());</span><br><span class="line">    showErrorMessage(errorMessage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showErrorMessage</span><span class="params">(String errorMessage)</span> </span>&#123;</span><br><span class="line">    ToastUtils.show(<span class="keyword">this</span>, errorMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>DefaultErrorBundle</code>是exception的wrapper，管理了其错误。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorBundle</span> <span class="keyword">implements</span> <span class="title">ErrorBundle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ERROR_MSG = <span class="string">"Unknown error"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Exception exception;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultErrorBundle</span><span class="params">(Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exception = exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exception <span class="title">getException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (exception != <span class="keyword">null</span>) ? <span class="keyword">this</span>.exception.getMessage() : DEFAULT_ERROR_MSG;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ErrorMessageFactory</code>是错误消息工厂，根据exception创建对应的错误消息提示，让用户不至于碰到错误莫名其妙。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Factory used to create error messages from an Exception as a condition.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorMessageFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ErrorMessageFactory"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ErrorMessageFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates a String representing an error message.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> context   Context needed to retrieve string resources.</span><br><span class="line">     * <span class="doctag">@param</span> exception An exception used as a condition to retrieve the correct error message.</span><br><span class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125; an error message.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">create</span><span class="params">(Context context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(exception.getMessage())) &#123;</span><br><span class="line">            Logger.e(TAG, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String message = context.getString(R.string.exception_message_generic);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> NetworkConnectionException) &#123;</span><br><span class="line">            message = context.getString(R.string.exception_message_no_connection);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> NotFoundException) &#123;</span><br><span class="line">            message = context.getString(R.string.exception_message_not_found);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ResponseException) &#123;</span><br><span class="line">            message = exception.getMessage();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> HttpException) &#123;</span><br><span class="line">            message = exception.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="handleCommonResponseError">handleCommonResponseError</h3><p>通常，服务器会返回错误信息，我们需要根据一些code进行对应处理，MrSubscriber的onError就调用了<code>handleCommonResponseError</code>来处理这些通用错误：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">handleCommonResponseError</span><span class="params">(Exception exception)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ResponseException) &#123;</span><br><span class="line">        ResponseException responseException = (ResponseException) exception;</span><br><span class="line">        <span class="keyword">switch</span> (responseException.getStatusCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> ResponseException.ERROR_CODE_NEED_LOGIN:</span><br><span class="line">                handled = <span class="keyword">true</span>;</span><br><span class="line">                getUserSystem().setVuser(<span class="string">""</span>);</span><br><span class="line">                getNavigator().navigateToLoginPage(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ResponseException.ERROR_CODE_NEED_PERFECT_PROFILE:</span><br><span class="line">                handled = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (responseException.getVuser() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    getUserSystem().setVuser(responseException.getVuser().getVuser());</span><br><span class="line">                &#125;</span><br><span class="line">                getNavigator().navigateToPerfectProfile(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ResponseException.ERROR_CODE_NEED_THIRD_PARTY_BIND:</span><br><span class="line">                handled = <span class="keyword">true</span>;</span><br><span class="line">                getNavigator().navigateToThirdPartyBind(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Log_&amp;_上报">Log &amp; 上报</h3><p>出错了当然要上报啦，bugly、友盟，本地写文件打zip包上传，Logger做的就是写文件log了，这些常见的app都会去做，这里就不赘述了。</p>
<h1 id="总结和下集预告">总结和下集预告</h1><p>本系列两篇文章描述了Android项目中，Repository层的设计与实现，也可以理解它为data或者model层。一个好的Repository层和上层相对独立，内聚完成业务逻辑的数据部分，即便内部有修改，比如添加了缓存，对外仍然保持一致。而好的异常处理设计一方面让代码中不会充斥着杂七杂八的 try &amp; catch，另一方，恰当的错误展示也让用户知道究竟出了什么错，不至于莫名其妙。</p>
<p>下一次不知是何时相见，希望能为大家带来我们项目中使用React Native进行混合开发的苦与甜。</p>
<p><strong>另外，打个小广告，本司的新产品Crew已经在各大Android应用市场上线，专注于职场垂直社交。一搜和兴趣相投的人聊天。iOS版本正在审核中。</strong></p>
<p><em>2个字找到志趣相投的职场伙伴，秒搜陌生人同类，智能自动破冰。多关键字叠加，高效率锁定职场同僚。精准匹配兴趣对象，超轻聊天，更能一键组建群聊，加入一群人的狂欢。</em></p>
<p>demo没空写了，反正我也没混淆，直接反编译来黑我吧。哈哈。有bug或者功能上的意见建议欢迎直接反馈给我。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的Android新项目5 - Repository层(上) Retrofit、Repository组装]]></title>
      <url>http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/</url>
      <content type="html"><![CDATA[<p>如期而至的Repository篇，内部实现则由Realm、Retrofit，以及内存级LruCache组成。<br>Repository，顾名思义，即仓库，向上层屏蔽了数据来源和内部实现细节，不需要了解货物来源，只需要拿走就行了。</p>
<p>由于篇幅问题，将分为上下两篇，本篇主要介绍Retrofit的应用和Repository层组装，下篇会讲解本地缓存（包括Realm和内存缓存）以及基于异常的设计。</p>
<h1 id="Why_Repository">Why Repository</h1><p>首先，为什么我们需要Repository层呢？一言以蔽之，屏蔽细节。</p>
<p>上层（activity/fragment/presenter）不需要知道数据的细节（或者说 - 数据源），来自于网络、数据库，亦或是内存等等。如此，一来上层可以不用关心细节，二来底层可以根据需求修改，不会影响上层，两者的分离用可以帮助协同开发。</p>
<p>举些例子：</p>
<ul>
<li>当现在是无网状态，我希望列表能直接显示上一次的数据，而不会是空页面。</li>
<li>除非好友的用户数据过期（比如超过一天），否则希望直接使用本地缓存中的，但如果缓存没有，或者过期，则需要拉取并更新。</li>
<li>点赞后，即便请求还没发送或者没有收到response，仍然希望显示点赞后的状态。<br>等等。</li>
</ul>
<p>如果这些需求，我们都要实现在View或者Presenter中，就会导致充斥大量数据逻辑，目的不单一，难以维护。而Repository层就是来封装这些逻辑的。</p>
<h1 id="Overview">Overview</h1><p>如图，业务层只能看到repository接口。</p>
<p><img src="http://blog.zhaiyifan.cn/images/android-new-project-from-0-repository-1.png" alt="Repository Overview"></p>
<h1 id="Retrofit">Retrofit</h1><p><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a>是Android界网红公司<a href="https://squareup.com/" target="_blank" rel="external">Square</a>所开发维护的一个HTTP网络库，目前最新版本是2.0.2（截止2016年4月30日）。其内部使用了自家的<a href="https://github.com/square/okhttp" target="_blank" rel="external">OkHttp</a>。</p>
<p>关于Retrofit的实现机制啊简介的，网上已经很多了，这里我就不啰嗦了，官方文档见<a href="http://square.github.io/retrofit/" target="_blank" rel="external">项目主页</a>。这里主要讲讲实际项目中的应用实践。</p>
<h2 id="import">import</h2><p>root build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> retrofitVersion = <span class="string">"2.0.2"</span></span><br><span class="line"><span class="keyword">def</span> okHttpVersion = <span class="string">'3.2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>.ext &#123;</span><br><span class="line">    libRetrofit = <span class="string">"com.squareup.retrofit2:retrofit:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitConverterGson = <span class="string">"com.squareup.retrofit2:converter-gson:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitAdapterRxJava = <span class="string">"com.squareup.retrofit2:adapter-rxjava:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libOkHttpLoggingInterceptor = <span class="string">"com.squareup.okhttp3:logging-interceptor:$&#123;okHttpVersion&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>repository module的build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofit</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofitConverterGson</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofitAdapterRxJava</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libOkHttpLoggingInterceptor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="OkHttpClient">OkHttpClient</h2><p>自底向上地，我们需要一个OkHttpClient来设置给Retrofit，这里作为实例，放出一段包含大部分你可能会用到的功能的Client创建代码，可以根据需要进行调整。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> OkHttpClient <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// log用拦截器</span></span><br><span class="line">    HttpLoggingInterceptor logging = <span class="keyword">new</span> HttpLoggingInterceptor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开发模式记录整个body，否则只记录基本信息如返回200，http协议版本等</span></span><br><span class="line">    <span class="keyword">if</span> (IS_DEV) &#123;</span><br><span class="line">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logging.setLevel(HttpLoggingInterceptor.Level.BASIC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果使用到HTTPS，我们需要创建SSLSocketFactory，并设置到client</span></span><br><span class="line">    SSLSocketFactory sslSocketFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里直接创建一个不做证书串验证的TrustManager</span></span><br><span class="line">        <span class="keyword">final</span> TrustManager[] trustAllCerts = <span class="keyword">new</span> TrustManager[]&#123;</span><br><span class="line">                <span class="keyword">new</span> X509TrustManager() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span><br><span class="line">                            <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span><br><span class="line">                            <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[]&#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Install the all-trusting trust manager</span></span><br><span class="line">        <span class="keyword">final</span> SSLContext sslContext = SSLContext.getInstance(<span class="string">"SSL"</span>);</span><br><span class="line">        sslContext.init(<span class="keyword">null</span>, trustAllCerts, <span class="keyword">new</span> java.security.SecureRandom());</span><br><span class="line">        <span class="comment">// Create an ssl socket factory with our all-trusting manager</span></span><br><span class="line">        sslSocketFactory = sslContext.getSocketFactory();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Logger.e(TAG, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">            <span class="comment">// HeadInterceptor实现了Interceptor，用来往Request Header添加一些业务相关数据，如APP版本，token信息</span></span><br><span class="line">            .addInterceptor(<span class="keyword">new</span> HeadInterceptor())</span><br><span class="line">            .addInterceptor(logging)</span><br><span class="line">            <span class="comment">// 连接超时时间设置</span></span><br><span class="line">            .connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            <span class="comment">// 读取超时时间设置</span></span><br><span class="line">            .readTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            .sslSocketFactory(sslSocketFactory)</span><br><span class="line">            <span class="comment">// 信任所有主机名</span></span><br><span class="line">            .hostnameVerifier((hostname, session) -&gt; <span class="keyword">true</span>)</span><br><span class="line">            <span class="comment">// 这里我们使用host name作为cookie保存的key</span></span><br><span class="line">            .cookieJar(<span class="keyword">new</span> CookieJar() &#123;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;HttpUrl, List&lt;Cookie&gt;&gt; cookieStore = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveFromResponse</span><span class="params">(HttpUrl url, List&lt;Cookie&gt; cookies)</span> </span>&#123;</span><br><span class="line">                    cookieStore.put(HttpUrl.parse(url.host()), cookies);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;Cookie&gt; <span class="title">loadForRequest</span><span class="params">(HttpUrl url)</span> </span>&#123;</span><br><span class="line">                    List&lt;Cookie&gt; cookies = cookieStore.get(HttpUrl.parse(url.host()));</span><br><span class="line">                    <span class="keyword">return</span> cookies != <span class="keyword">null</span> ? cookies : <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上包含了大部分你可能需要的特性，可以自由进行组合。</p>
<h2 id="RxJava异步请求">RxJava异步请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MrService <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (MrService.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mInstance = <span class="keyword">new</span> MrService();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MrService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MrService</span><span class="params">(<span class="keyword">boolean</span> useRxJava)</span> </span>&#123;</span><br><span class="line">    Retrofit.Builder builder = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">            .baseUrl(IS_DEV ? API_DEV_URL : API_PRODUCT_URL)</span><br><span class="line">            .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">            .client(getClient());</span><br><span class="line">    <span class="keyword">if</span> (useRxJava) &#123;</span><br><span class="line">        builder.addCallAdapterFactory(RxJavaCallAdapterFactory.create());</span><br><span class="line">    &#125;</span><br><span class="line">    mRetrofit = builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应API请求类如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SystemApi</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"user/feedback"</span>)</span><br><span class="line">    <span class="function">Observable&lt;MrResponse&gt; <span class="title">feedback</span><span class="params">(@Field(<span class="string">"content"</span>)</span> String content,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"model_name"</span>)</span> String modelName,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"system_version"</span>)</span> String systemVersion,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"img_keys"</span>)</span> List&lt;String&gt; imageKeyList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="同步请求">同步请求</h2><p>有时候我们需要做同步请求，比如提供结果给一些第三方库，它们可能需要直接返回对应数据（像我最近碰到的融云….），而我们只需要拉数据同步返回，对其所在线程和调用事件均一脸懵逼。</p>
<p>这时候就需要创建一个同步的retrofit客户端，其实就是不要去使用RxJava的adapter啦。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MrService <span class="title">getSynchronousInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mSyncInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (MrService.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSyncInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mSyncInstance = <span class="keyword">new</span> MrService(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSyncInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应地，我们需要定义请求类，这里我们需要使用Call&lt;&gt;去包一下最终解析对象的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RongCloudApi</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"im/getGroupInfo"</span>)</span><br><span class="line">    <span class="function">Call&lt;MrResponse&gt; <span class="title">getGroupInfoSynchronous</span><span class="params">(@Field(<span class="string">"group_id"</span>)</span> String groupId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"user/nameCardLite"</span>)</span><br><span class="line">    <span class="function">Call&lt;MrResponse&gt; <span class="title">getNameCardLiteSynchronous</span><span class="params">(@Field(<span class="string">"uid"</span>)</span> String userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="数据格式解析">数据格式解析</h2><p>数据的解析当然是必不可少的一环了，常用格式对应的序列化库以retrofit官网为例:</p>
<ul>
<li>Gson: com.squareup.retrofit2:converter-gson</li>
<li>Jackson: com.squareup.retrofit2:converter-jackson</li>
<li>Moshi: com.squareup.retrofit2:converter-moshi</li>
<li>Protobuf: com.squareup.retrofit2:converter-protobuf</li>
<li>Wire: com.squareup.retrofit2:converter-wire</li>
<li>Simple XML: com.squareup.retrofit2:converter-simplexml</li>
<li>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars</li>
</ul>
<p>部分高大上公司可能自己使用内部的二进制格式，自己实现ConverterFactory去解析就行了。</p>
<p>这里以最常用的json为例，使用GsonConverterFactory，良好的数据结构通常都会带有状态码和对应信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line"><span class="keyword">private</span> String statusMessage;</span><br></pre></td></tr></table></figure>
<p>根据statusCode可以快速判断是否出现错误，通常0或者某个正数为正确，负数则根据和服务器的协定做不同处理。<br>这里对Gson的bean，推荐使用插件GsonFormat，生成起来很方便。</p>
<p>至于具体的数据，则有两种方案，一是使用data作为key把具体数据套起来，内部则使用K/V进行存储，保证不存在不规范的直接丢一个array在data里面的情形。</p>
<h3 id="二次的组合解析">二次的组合解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line">    <span class="keyword">private</span> String statusMessage;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"time"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"data"</span>)</span><br><span class="line">    <span class="keyword">public</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二次组合的解析通过将创建一个通用的Response Bean来做泛解析，如果statusCode表明接口请求成功，则继续解析data:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">extractData</span><span class="params">(Observable&lt;MrResponse&gt; observable, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> observable.flatMap(response -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> NetworkConnectionException());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.getStatusCode() == ResponseException.STATUS_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.just(mGson.fromJson(mGson.toJson(response.data), clazz));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.e(TAG, response.data);</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> ResponseException(response));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用则如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;AlbumApiResult&gt; <span class="title">listPhoto</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RepositoryUtils.extractData(mAlbumApi.listPhoto(uid), AlbumApiResult.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有接口都可以通过<code>RepositoryUtils.extractData()</code>进行泛型调用。</p>
<p>如此一来，如果response为空，我们仅在statusCode正确时才会去解析具体的数据，否则抛出对应的异常（基于异常的数据层设计在下面会具体讲）。</p>
<h3 id="单次的继承处理">单次的继承处理</h3><p>上一种处理方式尽管看起来很优雅，但是存在一个问题，就是会重复解析，当statusCode正确时，会对data的object再次进行json处理。如果确实是error，比如statusCode为-1、-2这种，确实节省了开销，因为gson会去反射构造对应类的adapter，解析所有字段，创建对应的BoundField。</p>
<p>但考虑到大部分情况下还是正确的response居多，所以也可以使用继承的结构，我们创建<code>BaseResponse</code>存放通用字段，其他所有Gson Bean则继承该<code>BaseResponse</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line">    <span class="keyword">private</span> String statusMessage;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"time"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteResponse</span> <span class="keyword">extends</span> <span class="title">BaseResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"other_fields"</span>)</span><br><span class="line">    <span class="keyword">private</span> String otherFields;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的判断和error抛出可以参照上小节的，这里就不赘述了。</p>
<h1 id="Repository层组装实现">Repository层组装实现</h1><p>组装即根据组合各个数据源，如此又分为直接在实现方法中组合结果，亦或是通过DataStoreFactory进行封装。根据复杂度和个人喜好而定，毕竟使用后者需要新增好多类，相对来说有一点重。</p>
<h2 id="基于接口的设计实现">基于接口的设计实现</h2><p>拿一个最简单的repository，七牛Repository来作例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QiniuRepository</span> </span>&#123;</span><br><span class="line">    <span class="function">Observable&lt;QiniuToken&gt; <span class="title">getQiniuUploadToken</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuDataRepository</span> <span class="keyword">implements</span> <span class="title">QiniuRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="keyword">protected</span> QiniuApi mQiniuApi;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QiniuDataRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;QiniuToken&gt; <span class="title">getQiniuUploadToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RepositoryUtils.extractData(mQiniuApi.getQiniuUploadToken(), QiniuToken.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DataStoreFactory">DataStoreFactory</h2><p>使用DataStoreFactory封装数据来源：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDataStoreFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserCache mUserCache;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="keyword">protected</span> UserApi mUserApi;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDataStoreFactory</span><span class="params">(Context context, UserCache userCache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context == <span class="keyword">null</span> || userCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Constructor parameters cannot be null!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mContext = context.getApplicationContext();</span><br><span class="line">        mUserCache = userCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create &#123;<span class="doctag">@link</span> UserDataStore&#125; from a user id.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDataStore <span class="title">create</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserDataStore userDataStore;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mUserCache.isExpired() &amp;&amp; mUserCache.isCached(userId)) &#123;</span><br><span class="line">            userDataStore = <span class="keyword">new</span> DiskUserDataStore(mUserCache);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userDataStore = createCloudDataStore();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDataStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create &#123;<span class="doctag">@link</span> UserDataStore&#125; to retrieve data from the Cloud.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDataStore <span class="title">createCloudDataStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CloudUserDataStore(mUserApi, mUserCache);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>老实说这样的话，一来要写很多方法和接口，二来通过Factory判断创建哪种DataStore还是挺麻烦的，比如用户主页数据我们可以判断，但登陆登出这些，就需要直接指定<code>createCloudDataStore()</code>了，所以个人认为意义不大。</p>
<h2 id="在实现方法中组合">在实现方法中组合</h2><p>如下是使用DBFlow和网络Api进行组合的一个list获取接口。</p>
<p>我们使用RxJava的concat组合2个Observable，前者从cache(数据库)获取数据，后者从网络Api获取数据，通常数据库当然会更快。我们还保留了一个参数isForceRefresh来保证在某些情况下可以强制从网络获取数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; getHome(<span class="keyword">final</span> <span class="keyword">boolean</span> isForceRefresh) &#123;</span><br><span class="line">    <span class="keyword">final</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; fromCache = Observable.create(</span><br><span class="line">            <span class="keyword">new</span> Observable.OnSubscribe&lt;List&lt;OperationPosition&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> List&lt;OperationPosition&gt;&gt; subscriber)</span> </span>&#123;</span><br><span class="line">                    List&lt;OperationPosition&gt; dbCache = <span class="keyword">new</span> Select().from(OperationPosition.class).queryList();</span><br><span class="line">                    <span class="keyword">if</span> (dbCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        subscriber.onNext(dbCache);</span><br><span class="line">                    &#125;</span><br><span class="line">                    subscriber.onCompleted();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .map(<span class="keyword">new</span> Func1&lt;List&lt;OperationPosition&gt;, List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;OperationPositionWrapper&gt; <span class="title">call</span><span class="params">(List&lt;OperationPosition&gt; operationPositions)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> OperationPositionMapper.wrap(operationPositions);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .filter(<span class="keyword">new</span> Func1&lt;List&lt;OperationPositionWrapper&gt;, Boolean&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(List&lt;OperationPositionWrapper&gt; operationPositionWrappers)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ListUtils.isNotEmpty(operationPositionWrappers);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; fromNetwork = RepositoryUtils.observableWithApi(<span class="keyword">new</span> GetOperationPositionsForYouleHomeApi())</span><br><span class="line">            .map(<span class="keyword">new</span> Func1&lt;List&lt;OperationPositionPO&gt;, List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;OperationPositionWrapper&gt; <span class="title">call</span><span class="params">(List&lt;OperationPositionPO&gt; operationPositionList)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> OperationPositionMapper.transform(operationPositionList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .doOnNext(<span class="keyword">new</span> Action1&lt;List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;OperationPositionWrapper&gt; operationPositionWrappers)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (ListUtils.isNotEmpty(operationPositionWrappers)) &#123;</span><br><span class="line">                        <span class="keyword">new</span> Delete().from(OperationPosition.class).queryClose();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (OperationPositionWrapper wrapper : operationPositionWrappers) &#123;</span><br><span class="line">                        wrapper.getOperationPosition().save();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isForceRefresh) &#123;</span><br><span class="line">        <span class="keyword">return</span> fromNetwork;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.concat(fromCache, fromNetwork);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1><p>本篇为Repository层的上篇，主要介绍了组合及Retrofit的应用。下篇将会讲述数据库，内存Cache，以及统一的异常处理设计。</p>
<p><strong>另外，打个小广告，本司的新产品Crew已经在各大Android应用市场上线，专注于职场垂直社交。一搜和兴趣相投的人聊天。iOS版本正在审核中。</strong></p>
<p><em>2个字找到志趣相投的职场伙伴，秒搜陌生人同类，智能自动破冰。多关键字叠加，高效率锁定职场同僚。精准匹配兴趣对象，超轻聊天，更能一键组建群聊，加入一群人的狂欢。</em></p>
<p>demo没空写了，反正我也没混淆，直接反编译来黑我吧。哈哈。有bug或者功能上的意见建议欢迎直接反馈给我。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机从业者的技术成长学习之路]]></title>
      <url>http://blog.zhaiyifan.cn/2016/04/28/about-learning/</url>
      <content type="html"><![CDATA[<p>最近因为在学习一些新的东西，所以Android的东西没有怎么更新。趁着有些闲工夫，简单说说技术上的学习，也算是自己对这几年工作来的一个小结和经验吧。</p>
<p>希望这篇东西可以给那些在校的，亦或是才踏入工作没多久的程序员同伴们一些帮助。毕竟我自己也曾经止步不前，不知所措迷茫过。</p>
<h1 id="英语">英语</h1><p>老实说，没有比英语性价比更高的，需要学习的东西了。靠着别人的翻译，或者机翻，终究不是办法的。笔者自己日语英语姑且算是熟练掌握的地步，但在初期直接看那些全英文的书籍，仍然会觉得头痛（谢谢HKUST虐我），但坚持下来就会发现其实计算机的英语还是有一个范围的，多看看熟悉起来，就会觉得并没有什么难，甚至比起很多翻译来说更容易看懂。</p>
<p>混迹GitHub就会发现国内的很多开发者英语上欠缺还是很大的，尤其是一些description和readme直接就上中文的。即便你英语渣，机翻也行啊。毕竟是计算机社区，英语才是通用语言。用中文去一些国外开发者的仓库里提issue或者回复也是一种很粗鲁的行为。</p>
<p>如果让我说一种对技术帮助做大的语言，那必然就是英语。有了英语，才能真正地独立学习。</p>
<h1 id="Google">Google</h1><p>问小白问题之前，你Google过吗？如果让我看到一个开发动不动去搜百度，那我估计会武断地认定他很菜。其实Google是我们最好的老师，只要能正确把握问题的关键字，几乎没有找不到的答案，大部分会在StackOverflow上，其他散落在GitHub、博客等等地方。</p>
<p>如果你要找的知识实在冷门，比如react native的一些深入用法，android上的视频so阉割这种，那恐怕只能找找做这块的朋友或者自己研究了，国内有一些好心的开发者或许会分享在自己的博客。</p>
<p>至于科学上网，这个话题相关的技术太多了，请自行找方法，VPN也好，SS也好，都很简单，相对的投入和产出对程序员来说性价比是很高的。实在不想花钱的去用AWS的免费云服务器搭SS也行。</p>
<h1 id="实践">实践</h1><p>看是没有用的。比如看一篇关于Hybrid App原理的文章，或许它写得很好，但其实就算看完了，让我自己去写一个，或者讲讲怎么去做一个我们应用的版本，Android/iOS端通用的方案，最后也是支支吾吾说的不知所以。最后还是要去实践做一些Hybrid页面才能真正掌握，能说清楚这里面的原理和应用场景。</p>
<p>纸上谈兵终觉浅。</p>
<h1 id="警惕体力劳动">警惕体力劳动</h1><p>当你的工作成为一种体力劳动，而自己无法从中获得新的体验和知识的时候，需要警惕究竟发生了什么。</p>
<h2 id="想得太少">想得太少</h2><p>对做的内容停留在完成的阶段，而不对更好的方案，实现细节去思考更多，比如用了某个API，会不会去仔细看看其究竟是怎么做的。或许你知道Handler，Looper，那你知不知道主线程的一切，四大组件的生命周期，各种View的触摸事件都是消息驱动，在mainLooper里面进行处理的呢？</p>
<h2 id="工作内容重复">工作内容重复</h2><p>当Focus在一块上太久之后，难免会碰到这种瓶颈，这时候可以看看是不是能换一块做，比如做做缓存、Hybrid、启动优化、视频等等。可以做的领域很多，实在发现兴趣不在此，换着做后台或者前端也行。倘若因为个人原因，比如公司不让换或者可能工资会低很多，挤一挤时间在side project里面搞搞也可以，只是有没有心的问题罢了。</p>
<p>我面试过一些做Android 5-6年的程序员，但大部分真的连一些优秀的2-3年经验的开发者都远远不如，问设计不懂设计，问流行的开源项目回答就是“好像听说过”。我不希望我认识的开发者以后变成这样的人。但你若是总是重复劳动，难免像这样1年的工作经验重复了5年。</p>
<p>在额外学习的时候，更多关注的应该是不同的地方，而不是说这个学Python，下个月去学Go，想想语言的差异性在哪里，自己试试看做一些项目，培养全栈工程师的底子。还在念大学的时候，我学了C、C++、Java、Python、Ruby、PHP、HTML、Perl、SQL/Redis/HBase等等等等，但对每个的理解都不够深刻，现在想来那时候是做错了的。</p>
<p>你应该有自己的专长，但也要能从全局的角度思考问题，一个不懂前端的后端老大会导致前端过重不灵活，反正只要自己这儿的模块清晰就好，一个不懂前端的前端老大也会让下面的人不要抱怨，做出来就好。</p>
<h2 id="公司问题">公司问题</h2><p>发生在一些项目经理逼得特别紧，老大又比较无能的地方。项目经理为了向上面交待，对工程师说“这个进度能不能再压一下呀”，或者干脆直接不听工程师的意见强行缩短工期，导致没有时间去深入学习。老大明知这种情况，却睁一只眼闭一只眼。这种公司，还是离开为妙。</p>
<p>一个合格的leader，或者说mentor应该做些什么？至少从我的角度来看，尽管对公司他需要对项目负责，但对团队内的开发者，他更应该做的是观察和指导，看清楚那些团队毒瘤，营造团队氛围，而不是一味Push催进度和表现自己。</p>
<h1 id="记录和总结">记录和总结</h1><p>写博客是为了什么？</p>
<p>至少对我来说，写下的东西更多是对自己的一个总结和交待。如果我能写下来，至少能证明我有信心自己确实是这么去理解的，没有去坑人。另外，姑且也算是一种成长的足迹吧，偶尔自己还会去看看笔记。</p>
<p>分享也是目的之一，希望大家能互相进步，这样才能促进发展。</p>
<p>写博客也好，写一些笔记也好，点点滴滴也是对自己的一种整理。</p>
<h1 id="问自己">问自己</h1><p>想清楚自己要的究竟是什么。</p>
<p>做全还是钻？想做一个超强并发量的后台？想黑别人的系统？想做出精准有效的推荐算法？还是想做别人能实际用到的产品？</p>
<p>笔者正是因为想要的是后者，所以成为了Android开发（为什么没有选iOS，大约是Android的开放性吸引了我）。而现在，因为发现自己欠缺的（对前端驾轻就熟，大部分的事情对我来说只是体力活，而自己想承担一个完整的项目却又不行），所以又重新拾起了Node.js，看起了ES6，思考设计和产品的问题。</p>
<hr>
<p>希望大家都能想清楚自己想做的，要成为的样子。能自主地去学习。毕竟师傅带进门，修行靠个人。我不想鸡汤，大家各自走好，望来日可并肩一起，彼此说一句“很高兴遇见你”。</p>
<p>原文发布于：<a href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/">http://blog.zhaiyifan.cn/2016/04/28/about-learning/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Centos7安装Node.js并搭建Server]]></title>
      <url>http://blog.zhaiyifan.cn/2016/04/25/node-web-server-build-1/</url>
      <content type="html"><![CDATA[<p><strong>未完</strong></p>
<h1 id="安装Node">安装Node</h1><p>我们选择使用<code>nvm</code>安装Node.js:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 使用cnpm的nvm mirror</span><br><span class="line">curl -o- https://raw.githubusercontent.com/cnpm/nvm/master/install.sh | bash</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">nvm list-remote</span><br><span class="line">nvm install v4.<span class="number">4.3</span></span><br><span class="line">nvm use v4.<span class="number">4.3</span></span><br><span class="line">nvm <span class="built_in">alias</span> default v4.<span class="number">4.3</span></span><br></pre></td></tr></table></figure></p>
<p>安装cnpm:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry=https://registry.npm.taobao.org install -g cnpm</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React.js 新手村教程]]></title>
      <url>http://blog.zhaiyifan.cn/2016/04/22/trans-react-newbies-tutorial/</url>
      <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="http://www.leanpanda.com/blog/2016/04/06/react-newbies-tutorial/" target="_blank" rel="external">HOMEBLOG React JS: newbies tutorial</a></li>
<li>原文作者 : Elise Cicognani</li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/JasinYip" target="_blank" rel="external">JasinYip</a>, <a href="https://github.com/malcolmyu" target="_blank" rel="external">malcolmyu</a>, <a href="https://github.com/antonia0912" target="_blank" rel="external">羊羊羊</a></li>
</ul>
</blockquote>
<p>正如你能从标题猜到的，这篇文章的目标是给那些有很少编程经验的读者的。比如，像我这样的人：因为迄今为止，我才探索了编程世界6个月。<strong>所以，这将是一篇新手村教程！</strong> 你只需要拥有对 HTML 和 CSS 的理解，以及基本的 JavaScript（JS）知识就能看懂本文。</p>
<p>注意：在接下来的例子中，我们将会利用 ES6 提供的新能力，来简化写 JS 代码的过程。然而，你也能完全使用 ES5 来写 React。</p>
<p>预计阅读时间9分钟</p>
<h1 id="什么是_React_？">什么是 React ？</h1><p>React 是一个 JS 库，由 Facebook 和 Instagram 创建(<a href="https://facebook.github.io/react/" target="_blank" rel="external">https://facebook.github.io/react/</a>)。它通过将应用分为一些动态的、可复用的 <strong>组件</strong>，来使我们可以创建单页应用(<a href="http://www.leanpanda.com/blog/2015/05/25/single-page-application-development/" target="_blank" rel="external">Single Page Applications (SPA)</a>)。</p>
<p>一个 React 组件是一个继承了由 React 提供的 <strong>Component</strong> 的 JS 类。一个组件代表并定义了一块 HTML 代码，以及任何与这块代码相关的行为，比如点击事件。组件就像是乐高积木，可以用来组建成所需的复杂应用。完全由 JS 代码构成的组件，可以被隔离和复用。基本方法是 <strong>render()</strong>，它简单地返回一片HTML代码。</p>
<p>这种用来定义 React 组件的语法被称为 <strong>JSX</strong>。该语法由 React 的创建者们所开发，被用来简化 JS-HTML 代码的组件内交互。使用该语法写的代码在变成实际 JS 代码前必须被编译。</p>
<h1 id="创建一个组件（component）">创建一个组件（component）</h1><p>为了创建我们的组件并将它渲染为一页 HTML，我们首先在我们的 HTML 文件里需要定义一个有唯一 id 的 div。接着，我们将要在 JSX 文件里写代码，以连接 React 组件到使用其 id 的 div，如下面的例子所示。这样做将会指导浏览器在相关 DOM 标签所在的页面渲染组件。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/XXdmvL/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/XXdmvL/" target="_blank" rel="external">Start</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>JSX 内的 HTML 标签属性和普通 HTML 内的是几乎一样的；唯一不同的是“class”，在 JSX 里面变成了“className”。类 HTML 语法使用圆括号闭合，而包含 JS 的块则使用尖括号闭合。正如你将看到的。render() <em>总</em> 会返回一个 div，而在其中开发者可以自由引入他们认为合适的任意多的标签和元素。</p>
<h2 id="例子：海盗的灭绝">例子：海盗的灭绝</h2><p><img src="http://ww4.sinaimg.cn/large/a490147fjw1f2x94p1ev2j20m80etjtt.jpg" alt=""></p>
<p>如果我们选择使用 React 来创建这张图，我们可以对屏幕上各个日期进行可视化，并在那些日期被点击的时候，才显示对应的温度和海盗数量。</p>
<p>为此我们需要2个组件：第一个用来渲染日期，并将每个日期链接到给定的海盗数量和温度；第二个则需要用来接收日期上的点击事件对应的信息，如海盗的数量和当时的温度，接着基于这些数据渲染选择的元素。</p>
<p>前者相当于是“父亲”的角色，并包含多个后面的“子”组件的链接，而后者则紧密依赖于它们的“父亲”。</p>
<p>React 结构，被称为<a href="https://facebook.github.io/react/docs/working-with-the-browser.html" target="_blank" rel="external">虚拟 DOM</a>，可以使我们在组件的内容发生改变的时候，不需要刷新整个页面，而可以只更新对应组件。为此，组件需要一个内部方法，来保存变量 data 和 赋值给该元素的会被改变的 HTML 属性。这些属性会自行链接到那些我们在组件内定义的，会负责响应变化的方法。</p>
<h2 id="状态(State)和属性(props)">状态(State)和属性(props)</h2><p>在我们的例子里，那个独立的变量 data 是由日期组成的。这些会根据点击事件所集合的 DOM 内连锁反应进而根据对应海盗、温度信息而进行改变。所以我们将会根据每个 “DATA” 对象内的对应日期去保存信息。我们还将利用 React 在父组件内的 <code>this.state={}</code> 属性来以键值对拷贝形式保存变量数据的。</p>
<p>以这种形式组织程序使得我们可以利用 React 提供的方法，来以“状态(state)”的形式和数据交互，并对其进行任意更改。</p>
<p>考虑到我们想要使用 DATA 对象的 key 来渲染 HTML 内的日期，最好可以找到一种方法来在 key 上使用 JS 的 <code>map()</code> 方法(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external">Array.prototype.map()</a>)，以便能直接显示返回到 <code>render()</code> 的 HTML。事实上确实有方法可以做到！我们只需要把 JS 代码包裹在双花括号里，并放置在想要代码输出显示的管理该组件的 DOM 块内，然后就好了。</p>
<p>在这个特殊例子中，我们将在组件内的方法里定义 <code>map()</code> 回调，其将在同一组件的<code>render()</code>内返回一片 HTML 代码。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/XXdmvL/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/qbZbxR/" target="_blank" rel="external">State1</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>为了分配点击事件到每个日期，我们将会分配 <code>onClick</code> 属性给它们。</p>
<p>在该属性中，我们会调用组件的方法，该方法则会定义我们希望在 onClick 事件后触发的状态修改和其他变更。</p>
<p>在我们的例子里，我们定义该函数为 <code>handleClick()</code>。在 handleClick() 中，我们会调用 React 方法 <code>setState()</code>，其允许我们在在每个点击事件中去更改状态数据。我们只需要插入一个包含我们想要修改的状态 key 的对象，并在后者括号内分配给它们新的相关联值。</p>
<p>总的来说，每次一个日期被点击，被选中的div的onClick属性会调用 <code>HandClick()</code> 方法，该方法会调用 setState() 方法来修改组件的状态。</p>
<p>每次状态改变，一旦发生 React 就会自动检查组件的 <code>render()</code> 函数的返回，以寻找基于新状态需要更新的内容。一旦有那样的数据， React 就会自动触发一次新的 <code>render()</code> 来更新那些有变更的 HTML 片段。</p>
<p>(我很抱歉，在接着的例子里，我插入了三行利用了 Classnames 的代码，一个用来基于状态变更来做 CSS 管理的小工具，我这么做只是为了给预览一点颜色。我还会使用它在最终的例子里给预览填充一些海盗变量。你可以找到 GitHub 上 Classnames 仓库的链接，还有一个<a href="https://github.com/JedWatson/classnames" target="_blank" rel="external">简要使用向导</a>)</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/EPKwRo/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/EPKwRo/&quot;&gt;State2&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/EPKwRo/&quot;&gt;State2&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/EPKwRo/" target="_blank" rel="external">State2</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>如此，我们的父组件状态已经被设定好根据选中数据去创建子组件（其将会描述海盗数量和对应温度）。</p>
<p>我们将会在 JSX 文件中创建子组件的实例，正如我们之前对父组件所做的。为了链接子组件到其父亲上，我们只需要在后者的 <code>render()</code> 函数使用同一种语法和一个 HTML 标签去定义关系。如果我们称它为 “Child” ，它将会在我们插入 <code>&lt;Child /&gt;</code>处所在的 HTML 块内出现。</p>
<p>我们的子组件还必须根据现在选中数据所关联的海盗和温度，传递数据到其父亲。为此，我们将利用赋给 Child 标签的属性，其名字可以随便取，其信息只对父组件可见。</p>
<p>如此一来，子组件将可以通过显式访问归属于其父组件的数据，即利用这些 “attribute-bridges”，或者 <strong>属性(props)</strong>，来获取到它自己内部信息的访问权。</p>
<p>所以，每次父组件的状态发生改变，其子组件的属性内容就会自动进行更新。但是，正如子组件的<code>render()</code>方法会显示属性内容，它也会基于单向的数据线性流，根据任何收到的新信息去进行更新。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/EPKbmO/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/EPKbmO/&quot;&gt;Props&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/EPKbmO/&quot;&gt;Props&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/EPKbmO/" target="_blank" rel="external">Props</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>搞定了！组件们会互相交互，并根据我们的点击在 DOM 里渲染不同数据，而不需要单页去进行刷新。以这个为基础，交互的复杂性和组件的数量可以按需增加，使我们能创建复杂高效的应用。</p>
<p>如果你被这个库的潜力启发了，<a href="https://react.rocks/" target="_blank" rel="external">不妨看看 react.rocks 网站</a>，在那里你会找到很多有趣的点子来帮助你开始。(:</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在 Android N 预览版中使用 Java 8 的新特性]]></title>
      <url>http://blog.zhaiyifan.cn/2016/04/20/trans-java-8-in-android-n-preview/</url>
      <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@sergii/java-8-in-android-n-preview-76184e2ab7ad#.ywf5x3l8w" target="_blank" rel="external">Java 8 in Android N Preview</a></li>
<li>原文作者 : <a href="https://medium.com/@sergii" target="_blank" rel="external">Sergii Zhuk</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/narcotics726" target="_blank" rel="external">narcotics726</a>, <a href="https://github.com/MiJack" target="_blank" rel="external">MiJack</a></li>
</ul>
</blockquote>
<p>Android团队最近发布了Android N Preview，带来了很多提升，包括由Jack编译器提供的Java 8支持。在这篇文章中，我们将来看看它究竟对Android开发者意味着什么，以及如何尝试新的语言特性。</p>
<blockquote>
<p><em>免责声明: 本信息在2016年3月30日是有效的，我不确定在下个release版本中，Google团队会增加什么新的没有在此提到的Java 8特性。</em></p>
</blockquote>
<p><img src="https://cdn-images-1.medium.com/max/800/1*0Vex_2H0J7MBBiu1EqMtaw.png" alt=""></p>
<figcaption>图片 by <a href="http://www.androidpolice.com/2016/03/09/android-n-feature-spotlight-jack-compiler-gains-support-for-many-java-8-language-features-including-lambdas-streams-functional-interfaces-and-more/" target="_blank" rel="external">Android Police<sup class="readableLinkFootnote">[1]</sup></a></figcaption>

<h3 id="概览">概览</h3><p>在这篇文章中，去介绍Oracle Java 8的新特性并没有太大意义 —— 很多信息已经在互联网上有了。我个人最喜欢的是Simon Ritter的“<a href="https://www.youtube.com/watch?v=rtAredKhyac" target="_blank" rel="external">Java SE 8的55个新特性<sup class="readableLinkFootnote">[2]</sup></a>”。</p>
<p>另一方面，Android <a href="http://android-developers.blogspot.de/2016/03/first-preview-of-android-n-developer.html" target="_blank" rel="external">官方的Java 8公告<sup class="readableLinkFootnote">[3]</sup></a> 留下了很多开放的问题给开发者们，感觉上并非所有的原生 Java 8 功能都是可用的。更详细的 <a href="http://developer.android.com/intl/ru/preview/j8-jack.html" target="_blank" rel="external">技术公告<sup class="readableLinkFootnote">[4]</sup></a> 确认了这一点。我们可以根据在 Android N 中的可用性，将这些语言特性分类如下：</p>
<p>Android Gingebread (API 9)及以上:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda 表达式</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external">java.util.function</a></li>
</ul>
<p>Android N及以上:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank" rel="external">默认和静态interface方法</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="external">可重复的注解</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html" target="_blank" rel="external">流(Streams)</a></li>
<li>反射APIs</li>
</ul>
<p>所以对Java 8特性和使用的minSdkVersion之间的关联性，开发者必须去精心选择。我们也必须注意到语言向后兼容是由Jack编译器提供的。在概念上，Jack编译器将javac，ProGuard，以及dex的功能 <a href="https://www.guardsquare.com/blog/the_upcoming_jack_and_jill_compilers_in_android" target="_blank" rel="external">合并 <sup class="readableLinkFootnote">[5]</sup></a>到了一个转换步骤中。<a href="http://trickyandroid.com/the-dark-world-of-jack-and-jill/" target="_blank" rel="external">这意味着<sup class="readableLinkFootnote">[6]</sup></a>其中没有中间的Java字节码可用，且像是JaCoCo和Mockito的工具将无法工作，DexGuard也一样 (ProGuard的企业版本)。让我们祈祷这只是一个早期的preview版本，且这些问题将在未来被修复。</p>
<p>Lambda表达式以及相关的函数功能APIs —— 这是一个每个Android开发都会喜欢的东西。这类功能将会对增加代码可读性极为有用 —— 它替代了提供事件监听器的匿名内部类。而之前只能通过 <a href="http://zserge.com/blog/android-lambda.html" target="_blank" rel="external">额外的工具<sup class="readableLinkFootnote">[7]</sup></a> 来实现，或者由Android Studio编辑器去折叠代码。</p>
<p>默认及静态interface方法可以帮助我们减少额外的工具类的数量，但显然不是最需要的特性。还有一些其他的新增功能，我希望去说的更详细一些，因此不在本文的范围内。</p>
<p>对我来说最有趣的事 —— Java 8 流(Streams) —— 在当前的预览版中不可用。我们可以发现事实上它 <a href="https://android.googlesource.com/platform/libcore/+/916b0af2ccdd1bdfc0283b1096b291c40997d05f" target="_blank" rel="external">刚被merge<sup class="readableLinkFootnote">[8]</sup></a> 到AOSP源码，所以期望可以在下个N Preview 或者 Beta release中见到它。如果你实在等不及去浏览 —— 可以试试使用 <a href="https://github.com/aNNiMON/Lightweight-Stream-API" target="_blank" rel="external">Lightweight-Stream-API<sup class="readableLinkFootnote">[9]</sup></a>，目前的一个开源向后兼容。</p>
<h3 id="示例项目">示例项目</h3><p><a href="http://developer.android.com/preview/setup-sdk.html" target="_blank" rel="external">官方手册<sup class="readableLinkFootnote">[10]</sup></a>提供了指示，甚至还有图展示了如何去配置你的项目使用 Android N Preview 和 Java 8。在这儿没什么可以再说的，就跟着指示走吧。</p>
<p><img src="http://ww4.sinaimg.cn/large/a490147fjw1f2w1lxrva9j20m803pt9h.jpg" alt=""></p>
<p>下一步是去配置你的app模块的 build.gradle 文件。你可以在下面看到实例的 build.gradle 文件。从N SDK上的公告来看，似乎可以设置 <em>minSdkVersion</em> 为 Jelly Bean 或者 KitKat。 但… 在将 <em>targetSdkVersion</em> 设为Android N Preview后，<a href="http://stackoverflow.com/questions/36278517/java-8-in-android-n-preview" target="_blank" rel="external">将无法工作在API低于N的设备上<sup class="readableLinkFootnote">[11]</sup></a>。另外，如果你把 <em>minSdkVersion</em> 设置为23或者更低 —— Java 8代码将无法编译。这里是一些在 <a href="http://stackoverflow.com/questions/35929484/android-n-cannot-run-on-lower-api-though-minsdk-set-to-14" target="_blank" rel="external">SO forums<sup class="readableLinkFootnote">[12]</sup></a>的hack，描述了怎么设置minSdk为想要的值并使得app可以工作。我希望你不会在生产代码中使用这种方法 :)</p>
<p>我决定保持实例代码干净，所以没有添加任何hack手段来做低版本兼容，请读者自由去尝试或者使用N的测试设备/模拟器。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">android</span> &#123;</span><br><span class="line">    <span class="title">compileSdkVersion</span> <span class="string">'android-N'</span></span><br><span class="line">    buildToolsVersion <span class="string">'24.0.0 rc1'</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="title">applicationId</span> <span class="string">"org.sergiiz.thermometer"</span></span><br><span class="line">        minSdkVersion <span class="string">'N'</span> // 在 N Preview 中不能使用低于N的版本</span><br><span class="line">        targetSdkVersion <span class="string">'N'</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        jackOptions&#123;</span><br><span class="line">            <span class="title">enabled</span> <span class="built_in">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        <span class="title">targetCompatibility</span> <span class="number">1</span>.<span class="number">8</span></span><br><span class="line">        sourceCompatibility <span class="number">1</span>.<span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意这个设置是跟着新的<a href="http://developer.android.com/preview/j8-jack.html" target="_blank" rel="external">文档<sup class="readableLinkFootnote">[13]</sup></a>来的，使用了新的 Gradle DSL 方法 <em>jackOptions</em> 来配置Jack编译器设置，在更老的版本中，我们使用 <em>useJack true</em> 来达到同样的结果。</p>
<p>所以来试着实现一些Java 8的优雅代码到我们陈旧的Thermometer项目。</p>
<p>这是一个接口，包含了默认方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Thermometer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setCelsius</span><span class="params">(<span class="keyword">final</span> <span class="keyword">float</span> celsiusValue)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">String <span class="title">getSign</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">default</span> String <span class="title">getFormattedValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> String.format(Locale.getDefault(),</span><br><span class="line">            <span class="string">"The temperature is %.2f %s"</span>, getValue(), getSign());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现了这个接口的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FahrenheitThermometer</span> <span class="keyword">implements</span> <span class="title">Thermometer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">float</span> fahrenheitDeg;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FahrenheitThermometer</span><span class="params">(<span class="keyword">float</span> celsius)</span> </span>&#123;</span><br><span class="line">      setCelsius(celsius);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCelsius</span><span class="params">(<span class="keyword">float</span> celsius)</span> </span>&#123;</span><br><span class="line">      fahrenheitDeg = celsius * <span class="number">9</span> / <span class="number">5</span> + <span class="number">32f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fahrenheitDeg;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getSign</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Constants.DEGREE + <span class="string">"F"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加一个点击事件的lambda函数：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">buttonFahrenheit.setOnClickListener(view1 -&gt; &#123;</span><br><span class="line">   fahrenheitThermometer<span class="string">.setCelsius(currentCelsius)</span>;</span><br><span class="line">   String text = fahrenheitThermometer<span class="string">.getFormattedValue()</span>;</span><br><span class="line">   makeText(MainActivity<span class="string">.this</span>, text, Toast<span class="string">.LENGTH_SHORT).show()</span>;</span><br><span class="line">&#125;</span>);</span><br></pre></td></tr></table></figure>
<p>例子的完整源码可见 <a href="https://github.com/sergiiz/AndroidNPreviewJ8" target="_blank" rel="external">GitHub repository<sup class="readableLinkFootnote">[14]</sup></a>。</p>
<h3 id="总结">总结</h3><p>在这篇文章中，我们了解了Java 8的用例，以及目前其在Android N Preview SDK的实现情况。我们也看到了当前Jack编译器的限制，及其在最后发布前可能被修复的功能。在demo项目中我们检验了如何去使用新的Java 8特性，以及它们可以被应用的target SDK版本。</p>
<p>声明：本文已独家授权微信公众号Android程序员（AndroidTrending）在微信公众号平台原创首发。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的Android新项目4 - Dagger2篇]]></title>
      <url>http://blog.zhaiyifan.cn/2016/03/27/android-new-project-from-0-p4/</url>
      <content type="html"><![CDATA[<p>Dagger - 匕首，顾名思义，比ButterKnife这把黄油刀锋利得多。Square为什么这么有自信地给它取了这个名字，Google又为什么会拿去做了Dagger2呢（不都有Guice和基于其做的RoboGuice了么）？希望本文能讲清楚为什么要用Dagger2，又如何用好Dagger2。</p>
<p>本文会从Dagger2的起源开始，途径其初衷、使用场景、依赖图，最后介绍一下我在项目中的具体应用和心得体会。</p>
<h1 id="Origin">Origin</h1><p><a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger2</a>，起源于Square的<a href="http://github.com/square/dagger/" target="_blank" rel="external">Dagger</a>，是一个完全在编译期间进行的依赖注入框架，完全去除了反射。</p>
<p>关于Dagger2的最初想法，来自于2013年12月的<a href="https://github.com/square/dagger/issues/366" target="_blank" rel="external">Proposal: Dagger 2.0</a>，Jake大神在issue里面也有回复哦，而idea的来源者<a href="https://github.com/gk5885" target="_blank" rel="external">Gregory Kick</a>的GitHub个人主页也没多少follower，自己也没几个项目，主要都在贡献其他的repository，可见海外重复造轮子的风气比我们这儿好多了。</p>
<p>扯远了，Dagger2的诞生就是源于开发者们对Dagger1半静态化半运行时的不满（尤其是在服务端的大型应用上），想要改造成完整的静态依赖图生成，完全的代码生成式依赖注入解决方案。在权衡了什么对Android更适合，以及对大型应用来说什么更有意义（往往有可怕数量的注入）两者后，Dagger2诞生了。</p>
<h1 id="初衷">初衷</h1><p>Dagger2的初衷就是装逼，啊，不对，是通过依赖注入让你少些很多公式化代码，更容易测试，降低耦合，创建可复用可互换的模块。你可以在Debug包，测试运行包以及release包优雅注入三种不同的实现。</p>
<h2 id="依赖注入">依赖注入</h2><p>说到依赖注入，或许很多以前做过JavaEE的朋友会想到Spring（SSH在我本科期间折磨得我欲生欲死，最后Spring MVC拯救了我）。</p>
<p>我们看个简单的比较图，左边是没有依赖注入的实现方式，右边是手动的依赖注入：<br><img src="/images/android-new-project-from-0-dagger-di.png" alt="Without DI and with Maunl DI"></p>
<p>我们想要一个咖啡机来做一杯咖啡，没有依赖注入的话，我们就需要在咖啡机里自己去new泵(pump)和加热器(heater)，而手动依赖注入的实现则将依赖作为参数，然后传入，而不是自己去显示创建。在没有依赖注入的时候，我们丧失了灵活性，因为一切依赖是在内部创建的，所以我们根本没有办法去替换依赖实例，比如想把电加热器换成火炉或者核加热器，看一看下图，是不是更清晰了：<br><img src="/images/android-new-project-from-0-dagger-di-picture.png" alt="Without DI and with Maunl DI"></p>
<h2 id="为什么我们需要DI库">为什么我们需要DI库</h2><p>但问题在于，在大型应用中，把这些依赖全都分离，然后自己去创建的话，会是一个很大的工作量——毫无营养的公式化代码，一堆Factory类。不仅仅是工作量的问题，这些依赖可能还有顺序的问题，A依赖B，B依赖C，B依赖D，如此一来C、D就必须在A、B的后面，手动去做这些工作简直是一个噩梦 =。=（哈哈，是不是想到了appliation初始化那些依赖）。Google的工程师碰到的问题就是在Android上有3000行这样的代码，而在服务器上的大型程序则是100000行。</p>
<p>你会想自己维护这样的代码吗？</p>
<h2 id="Why_Dagger2">Why Dagger2</h2><p>先来看看如果用Spring实现上面提到的咖啡机依赖，我们需要做什么：<br><img src="/images/android-new-project-from-0-dagger-spring.png" alt="DI with Spring"><br>不错，就是xml，当然，我们也不需要去关心顺序了，Spring会帮我们解决前后顺序的依赖问题。</p>
<p>但仔细想想，你会想去自己写这样的xml代码吗？layout.xml已经写得我很烦了。而且Spring是在运行时验证配置和依赖图的，你不会想在外网运行的app里让用户发现你的依赖注入出了问题的（比如bean名字打错了）。再加上xml和Java代码分离，很难追踪应用流。</p>
<p>Guice虽然较Spring进了一步，干掉了xml，通过Java声明依赖注入比起Spring好找多了，但其跟踪和报错（运行时的图验证）实在令人抓狂，而且在不同环境注入不同实例的配置也挺恶心的（if else各种判断），感兴趣的可以去看看，项目就在GitHub上，Android版本的叫RoboGuice。</p>
<p>而Dagger2和Dagger1的差别在上节已经提到了，更专注于开发者的体验，从半静态变为完全静态，从Map式的API变成申明式API（@Module），生成的代码更优雅，更高的性能（跟手写一样），更简单的debug跟踪，所有的报错也都是在编译时发生的。</p>
<p>Dagger2使用了JSR 330的依赖注入API，其实就是Provider了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line">Provider&lt;T&gt; coffeeMakerProvider = ...;</span><br><span class="line">CoffeeMaker coffeeMaker = coffeeMakerProvider.get();</span><br></pre></td></tr></table></figure></p>
<p>Dagger2基于Component注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Component</span>(modules = DripCoffeModule.class)</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CoffeeMakerComponet</span> </span>&#123;</span><br><span class="line">  <span class="function">CoffeeMaker <span class="title">getCoffeeMaker</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会生成这样的代码，Dagger_CoffeeMakerComponent里面就是一堆Provider，</span></span><br><span class="line"><span class="comment">// 或者是单例，或者是通过DripCoffeeModule申明new的方式，开发者不必关心依赖顺序</span></span><br><span class="line">CoffeeMakerComponent component = Dagger_CoffeeMakerComponent.create();</span><br><span class="line">CoffeeMaker coffeeMaker = component.getCoffeeMaker();</span><br></pre></td></tr></table></figure></p>
<p>除了上面提到的各种好处，不得不提的是也有对应问题：丧失了动态性，在之后的实践中我会举个例子描述一下，但相对于那些好处来说，我觉得是可接受的。Everything has a Price to Pay。啊，对了，还有另一点，没法自动升级，从Dagger1到Dagger2，当然如果你的app是没有历史负担的（本系列的前提），那这不算问题。</p>
<p>如果对性能感兴趣的话，可以去看看<a href="http://blog.nimbledroid.com/2016/03/07/performance-of-dependency-injection-libraries.html" target="_blank" rel="external">Comparing the Performance of Dependency Injection Libraries</a>，RoboGuice:Dagger1:Dagger2差不多是50:2:1的一个性能差距。</p>
<p>如果你用了Dagger2，而你的服务端还在用Spring，你可以自豪地说，我们比你们领先5年。而Google的服务端确实已经用了Dagger2。</p>
<h1 id="使用场景">使用场景</h1><p>上面也曾经提到了，因为手动去维护那些依赖关系、范围很麻烦，就连单例我都懒得写，何况是各种Factory类，老在那synchroized烦不烦。而如果不去写那些Factory，直接new，则会导致后期维护困难，比如增加了一个参数，为了保证兼容性，就只能留着原来的构造函数（习惯好一点的标一下deprecated），再新增一个构造函数。</p>
<p>Dagger2解决了这些问题，帮助我们管理实例，并进行解耦。new只需要写在一个地方，getInstance也再也不用写了。而需要使用实例的地方，只需要简简单单地来一个@inject，而不需要关心是如何注入的。Dagger2会在编译时通过apt生成代码进行注入。</p>
<p>想想你所有可能在多个地方使用的类实例依赖，比如lbs服务，比如你的cache，比如用户设置，比起getInstance，比起new，比起自己用注释去注明必须维持这种先后关系（说到此处，想到上个东家的android app初始化时候，必须保持正确顺序不然立马crash，singleton还必须只能init一次的糟糕代码），为什么不用dagger来做管理？Without any performance overhead。</p>
<p>Dagger2基于编译时的静态依赖图构建还能避免运行时再出现一些坑，比如循环依赖，编译的时候就会报错，而不会在运行时死循环。</p>
<p>生动点来说的话。有一场派对：</p>
<p>Android开发A说，有妹子我才来。<br>美女前端B说，有帅哥设计师，我才来。<br>iOS开发C说，有Android开发，我才来。<br>帅哥设计师说，只有礼拜天我才有空。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndroidDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndroidDeveloper</span><span class="params">(PartyMember female)</span> <span class="keyword">throws</span> NotMeizhiSayBB</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontEndDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FrontEndDeveloper</span><span class="params">(Designer designer)</span> <span class="keyword">throws</span> NotHandsomeBoySayBB</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOSDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IOSDeveloper</span><span class="params">(AndroidDeveloper dev)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Designer</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Designer</span><span class="params">(Date date)</span> throw CannotComeException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSex = <span class="number">0</span>; <span class="comment">// 1 for male, 2 for female.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动DI，要自己想怎么设计顺序，还不能轻易改动</span></span><br><span class="line">Designer designer = <span class="keyword">new</span> Designer(<span class="string">"礼拜天"</span>)；</span><br><span class="line">FrontEndDeveloper dev1 = <span class="keyword">new</span> FrontEndDeveloper(designer);</span><br><span class="line">dev1.setSex(<span class="number">2</span>);</span><br><span class="line">AndroidDeveloper dev2 = <span class="keyword">new</span> AndroidDeveloper(dev1);</span><br><span class="line">IOSDeveloper dev3 = <span class="keyword">new</span> IOSDeveloper(dev2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// With Dagger2</span></span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">Designer designer;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">FrontEndDeveloper dev1;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">AndroidDeveloper dev2;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">IOSDeveloper dev3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用DI太可怕了...自己想象一下会是什么样吧</span></span><br><span class="line">...我懒</span><br></pre></td></tr></table></figure>
<h2 id="Scope">Scope</h2><p>Dagger2的Scope，除了Singleton（root），其他都是自定义的，无论你给它命名PerActivity、PerFragment，其实都只是一个命名而已，真正起作用的是inject的位置，以及dependency。</p>
<p>Scope起的更多是一个限制作用，比如不同层级的Component需要有不同的scope，注入PerActivity scope的component后activity就不能通过@Inject去获得SingleTon的实例，需要从application去暴露接口获得（getAppliationComponent获得component实例然后访问，比如全局的navigator）。</p>
<p>当然，另一方面则是可读性和方便理解，通过scope的不同很容易能辨明2个实例的作用域的区别。</p>
<h1 id="依赖图例子">依赖图例子</h1><p><img src="/images/android-new-project-from-0-dagger-simple-graph.png" alt="Simple Graph"></p>
<p>如上是一个我现在使用的Dagger2的依赖图的简化版子集。</p>
<p>ApplicationComponent作为root，拆分出了3个module</p>
<ul>
<li>ApplicationModule（application context，lbs服务，全局设置等）</li>
<li>ApiModule（Retrofit那堆Api在这里）</li>
<li>RepositoryModule（各种repository）。<br>这里为了妥协内聚和简洁所以保持了这三个module。你不会想看到自己的di package下有一大堆module类，或者某个module里面掺杂着上百个实例注入的。</li>
</ul>
<p>UserComponent用在用户主页、登录注册，以及好友列表页。所以你能看到UserModule（用户系统以及那些UseCase）以及需要的赞Module、相册Module。</p>
<p>TagComponent是标签系统，有自己的标签Module以及赞Module（module重用），用在了标签搜索、热门标签等页面。</p>
<p>是不是很好理解？位于上层的component是看不到下层的，而下层则可以使用上层的，但不能引用同一层相邻component内的实例。</p>
<p>如果你的应用是强登录态的，则更可以只把UserComponent放在第二层，Module构造函数传入uid（PerUser scope，没有uid则为游客态，供deeplink之类使用），而所有需要登录态的则都放在第三层。</p>
<p>一个简单的应用就是这样了，而Component继承，SubComponent（共享的放在上层父类），不同component的module复用（一样可以生成实例绑定，只是没法共享component中暴露的接口罢了）这些则是不同场景下的策略，如果有必要我会再开一篇讲讲这些深入的使用。</p>
<h1 id="具体应用和心得体会">具体应用和心得体会</h1><ul>
<li><p>No Proguard rules need。因为0反射，所以完全不需要去配置proguard规则。</p>
</li>
<li><p>因为需要静态地去inject，如果一些参数需要运行时通过用户行为去获得，就只能使用set去设置注入实例的参数（因为我们的injection通常在最早，比如onCreate就需要执行）。这就是上文提到过的，因为完全静态而丧失了一定的动态性。</p>
</li>
<li><p>Singleton是线程安全的，请放心，如果实在怀疑，可以去检查生成的源码，笔者已经检查过了…</p>
</li>
<li><p>粒度的问题，如果基于页面去划分的话，老实说笔者觉得实在太细太麻烦，建议稍微粗一点，按照大功能去分，完全可以通过拆分module或者SubComponent的形式去解决复用的问题，而不用拆分出一大堆component，module只要足够内聚就可以，而不需要拆分到某个页面使用的那些。</p>
</li>
<li><p>fragment的问题，因为其诡异的生命周期，所以建议在实在需要fragment的时候，让activity去创建component，fragment通过接口（比如HasComponent）去获得component（一个activity只能inject一个component哦）。</p>
</li>
<li><p>举一个我遇到的例子来说说方便的地方，有一个UseCase叫做SearchTag，原先只需要TagRepository，ThreadExecutor，PostThreadExecutor三个参数。现在需求改变了，需要在发起请求前先进行定位，然后把位置信息也作为请求的参数。我们只需要简单地在构造函数增加一个LbsRepository，然后在buildUseCaseObservable通过RxJava组合一下，这样既避免了底层repository的耦合，又对上层屏蔽了复杂性。</p>
</li>
<li><p>再讲讲之前提到的依赖吧，我们有很多同级的实例，以Singleton为例，比如有一个要提供给第三方sdk的Provider依赖了某个Repository，直接在构造函数里加上那个Repository，然后加上@Inject，完全不需要关心前后顺序了，省不省心？还可以随时在单元测试的包注入一个不需要物理环境的模拟repository。想想以前你怎么做，或者在调用这个的初始化前init依赖的实例，或者在初始化里去使用依赖类的getInstance()，是不是太土鳖？</p>
</li>
<li><p>强烈推荐你在自己的项目里使用上，初期可能怀着装逼的心情觉得有点麻烦，熟练后你会发现简直太方便了，根本离不开（其实是我的亲身经历 哈哈）。</p>
</li>
</ul>
<h1 id="总结">总结</h1><p>本篇讲了讲Dagger2，主要还是在安利为什么要用Dagger2，以及一些正确的使用姿势，因为时间原因来不及写个demo来说说具体实现，欢迎大家提出意见和建议。<br>有空的话我最近会在GitHub上写一下demo，你如果有兴趣可以follow一下等等更新: <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a>（希望在4月能完成，哈哈…）。</p>
<h1 id="下集预告">下集预告</h1><p>怎么用Retrofit、Realm和RxJava搭建data层。</p>
<h1 id="参考文献">参考文献</h1><ul>
<li>DAGGER 2 - A New Type of dependency injection: <a href="https://youtu.be/oK_XtfXPkqw" target="_blank" rel="external">https://youtu.be/oK_XtfXPkqw</a></li>
<li>Dagger 2 Official Site: <a href="http://google.github.io/dagger/" target="_blank" rel="external">http://google.github.io/dagger/</a></li>
<li>Dagger 2 Design Doc: <a href="http://goo.gl/mW474Z" target="_blank" rel="external">http://goo.gl/mW474Z</a></li>
</ul>
<h1 id="扩展阅读">扩展阅读</h1><ul>
<li><a href="http://stackoverflow.com/questions/28411352/what-determines-the-lifecycle-of-a-component-object-graph-in-dagger-2" target="_blank" rel="external">What determines the lifecycle of a component (object graph) in Dagger 2?</a></li>
<li><a href="http://frogermcs.github.io/dependency-injection-with-dagger-2-custom-scopes/" target="_blank" rel="external">Dependency injection with Dagger 2 - Custom scopes</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的Android新项目3 - MVPVM in Action, 谁告诉你MVP和MVVM是互斥的]]></title>
      <url>http://blog.zhaiyifan.cn/2016/03/16/android-new-project-from-0-p3/</url>
      <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>去年5月左右的时候，笔者在逛GitHub的时候，看到了一个MVP的项目，叫做mosby，仔细看了源码和作者介绍的文章后，发现确实有点意思，虽然会需要多写几个类和方法，但是解决了activity/fragment过重的问题，通过V/P分离能够帮助提高可维护性。时至去年年底，今年年初，MVP才逐渐被大家所知，也不时看到些文章介绍其概念和实践。</p>
<p>再说说MVVM (Model-View-ViewModel)，在Android上对应data binding。即ViewModel到View的映射，不需要再去自己找到view，然后更新字段，而是在映射建立后直接更新ViewModel然后反映到View上。</p>
<p>值得一提的是，MVP和MVVM都是微软提出的理念，最早都是在WPF里面被应用的，只是时至今日才在Android上被真正用起来。本文不是来介绍这两个的，所以不再赘述，讲讲正题。</p>
<p>在本系列<a href="http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/">首篇</a>中我曾经提到过在我设计的新应用中，采用了MVP+MVVM的混合（当初也考虑过Flux，但感觉并不合适Android），后来有一次CJJ同学和我探讨这个架构的时候，问到了我有没有什么正式的名字，我就有楞，因为这个组合和应用是我自己设计的，所以还真没想过这个问题，Google一搜，还真有这么个东西（见参考资料，文章写得很棒，建议英文不错的同学读一读）！</p>
<p>这就是本文我要介绍的东西，MVPVM (Model-View-Presenter-ViewModel)。</p>
<h1 id="Quick_glance">Quick glance</h1><p>以下所有Model，并不单单指的是Bean，而是Model层，更像是repository或者business logic。</p>
<p><img src="/images/android-new-project-from-0-mvc.png" alt="MVC"></p>
<p>MVC: View持有Controller，传递事件给Controller，Controller由此去触发Model层事件，Model更新完数据（如从网络或者数据库获得数据后）触发View的更新事件。</p>
<p><img src="/images/android-new-project-from-0-mvp.png" alt="MVP"></p>
<p>乍一看，MVP似乎是MVC的变种，即C的位置被P取代了，但如果我们再看一看下图：</p>
<p><img src="/images/android-new-project-from-0-mvpc.png" alt="MVCP"></p>
<p>其实MVP是MVC的一个wrap，C层仍然可以在那里，代替View处理点击事件、数据绑定、扮演ListView的观察者，从而View可以专注于处理纯视觉的一些东西。而Presenter则避免了Model直接去触发View的更新，View彻底成为了一个被动的东西，只有Presenter告知其更新视觉，它才会去更新，比如showLoading(), showEmpty()。</p>
<p><img src="/images/android-new-project-from-0-mvvm.png" alt="MVVM"></p>
<p>MVVM通过View和ViewModel的双向绑定，让我们可以</p>
<ul>
<li>直接更新ViewModel，View会进行对应刷新</li>
<li>View的事件直接传递到ViewModel，ViewModel去对Model进行操作并接受更新。</li>
</ul>
<h1 id="Why_MVPVM">Why MVPVM</h1><p>如果你仔细读过Clean architecture的源码，会发现其中已经有了ViewModel这一层。如果你熟悉DO（Domain Object），PO（Persistent Object），VO（View Object），或许了解visibility这个概念，各层只需要知道其应该知道的。这些Object代表了完全独立不同的概念。</p>
<p>ViewModel层的必要性，简单举个例子，服务器传来一个Date String，但我们需要显示的是该Date到现在的相对时间描述，比如1分钟前，2天前，为了避免在view中绑定数据时去做这个逻辑，ViewModel会代替来进行这个的转换。</p>
<p>MVVM尽管确实省去了绑定数据到View的boilerplate，但</p>
<ul>
<li>ViewModel引用了View，从而导致ViewModel无法重用于其他View。</li>
<li>并没有解决View层过重的问题，仅仅去掉了数据绑定，尤其对一些复杂业务逻辑的页面。</li>
</ul>
<p>模式的引入都是为了通过可拔插化以提高可复用性，松耦合和尽量小的接口可以给予最大的可复用性，使得组件能重组使用。</p>
<p>所以有了MVPVM：</p>
<p><img src="/images/android-new-project-from-0-mvpvm.png" alt="MVPVM"></p>
<p>在我的个人实践中:</p>
<ul>
<li>Model: data和domain模块组成，包含了Interactor（UseCase）、Repository、Datastore、Retrofit、Realm、DO、部分PO等。</li>
<li>View: Activity/Fragment。</li>
<li>Presenter：Presenter，包含了Subscriber，并通过Dagger2注入UseCase从而减轻耦合。</li>
<li>ViewModel：由Model转换而成，继承BaseObservable或SortedList，大部分直接wrap了model，从而去掉了mapper的boilerplate。通过Data Binding绑定到xml。</li>
</ul>
<p>从Presenter的Subscriber往下都是RxJava的流世界，stream in stream out。如果你原来就应用了MVP或者Clean Architecture，那会发现再加上ViewModel简直太简单了，同时让代码库更小，逻辑更清晰。</p>
<p>接着看看各个组件在MVPVM中的standing。</p>
<h2 id="MVPVM:_Model">MVPVM: Model</h2><p>实际对应的是Repository层，即第一篇文章中提到的data/domain module。具体的Model理论上应该是PO，但我们大部分场景并不需要PO，所以也可以是domain层的DO。</p>
<h2 id="MVPVM:_View">MVPVM: View</h2><p>View对ViewModel不需要了解太多，这样才能保持两者的解耦，两者之间的协议只需要：</p>
<ul>
<li>ViewModel支持View需要展示的properties。</li>
<li>View实现了ViewModel的观察者模式接口（如Listener）。</li>
</ul>
<p>所以这里ViewModel到View是一条虚线，而不是MVVM中的双向实线。</p>
<h2 id="MVPVM:_Presenter">MVPVM: Presenter</h2><p>和在MVP一样，Presenter站在View和Model层之间。这里值得一提的是Presenter到ViewModel是有耦合的，因为Presenter需要把model更新到ViewModel中，也就是map行为，然后调用View的对应接口进行binding。</p>
<p>Presenter是MVPVM中唯一不需要解耦的，它紧紧地与View、ViewModel、Model层耦合。如果你的Presenter被多个View重用了，那你可能需要考虑它是不是更应该作为一个module，比如（第三方）登陆。</p>
<h2 id="MVPVM:_ViewModel">MVPVM: ViewModel</h2><p>MVPVM让ViewModel可以重用，因为它再也不是直接和特定View绑定，而仅仅作为数据到View的一个绑定用展示。ViewModel因为用户操作而触发的事件不再直接对Model进行操作，而由View去负责任务流。ViewModel本身基本没有field，而是通过暴露get方法来让data binding找到对应要显示的property，get方法中直接调用持有的model的对应属性get方法。</p>
<p>理想化的架构是通过一个mapper类进行转换，但我想大部分的程序员面对这个工作都会抓狂，毕竟很多字段其实就是一个复制，而且对性能也有一些影响（遍历list，new对象，一个个字段转换，添加到新的list）。所以折中地，让ViewModel持有Model，在get方法中直接返回对应model的具体字段，在一些特殊的field如相对时间、添加一些描述性字符的地方再去进行拼接和特殊处理。</p>
<p>啊，对了，说到ViewModel，Data Binding现在支持双向绑定了哦，见<a href="https://halfthought.wordpress.com/2016/03/23/2-way-data-binding-on-android/，语法如：" target="_blank" rel="external">https://halfthought.wordpress.com/2016/03/23/2-way-data-binding-on-android/，语法如：</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:text</span>=<span class="value">"@=&#123;user.firstName&#125;"</span> <span class="attribute">...</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>不同于单向绑定的@{}，使用了@={}，毕竟双向绑定这个东西还是慎用，一方面早成数据流混乱不好理解，另一方面容易出现死循环。</p>
<h2 id="NO_Presenter">NO Presenter</h2><p>在MVP中，我们有时候碰到的问题是，Presenter真的有必要存在吗，尤其是一些较为静态，没什么业务逻辑，只需要纯展示的页面，结果就是为了MVP而特意去创建一个Presenter。</p>
<p>所以Presenter不应该被强求，正如MVP中，V和C其实被并在了一起，在某些情况下（确实就是个纯展示，或者很少的业务逻辑），应该允许去Presenter，并让View承担其任务。比如注册页面，我真的就只是想把用户的输入发到服务器验证一下，何必非得去搞一个presenter套着呢？</p>
<p>我们不能永远理想化地去选择所谓最好的设计，在现实的必要情况下，我们要敢于舍弃，最合适的设计才是最好的设计。为此，Presenter不是强制的；为此，ViewModel并不一定通过mapper生成，而可以返回持有的DO对象对应字段。</p>
<h1 id="总结">总结</h1><p>本篇讲了讲MVPVM及其在Android的实践，因为时间原因来不及写个demo来说说具体实现，欢迎大家提出意见和建议。有空的话我最近会在GitHub上写一下demo，你如果有兴趣可以follow一下等等更新: <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a>。</p>
<h1 id="下集预告">下集预告</h1><p>Dagger匕首，比ButterKnife黄油刀锋利得多。Square为什么这么有自信地给它取了这个名字，Google又为什么会拿去做了Dagger2呢？笔者看了很多国内Dagger2的文章，但发现它们都保留在介绍API和官网翻译的层面，无法让读者能明白究竟为什么用Dagger2，又如何用好Dagger2。希望能在下一次为大家讲清楚。</p>
<h1 id="参考资料">参考资料</h1><ul>
<li><a href="https://msdn.microsoft.com/en-us/magazine/hh580734.aspx" target="_blank" rel="external">MVPVM Design Pattern - The Model-View-Presenter-ViewModel Design Pattern for WPF</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的Android新项目2 - Gradle篇]]></title>
      <url>http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/</url>
      <content type="html"><![CDATA[<p>相信大家的项目用上gradle都已经很久了，但用得如何呢？这里分享一下我的gradle脚本，大部分都是去年6月左右就开始用上的，有一部分比如签名的安全保存则是最近才自己动手，做了令自己觉得还不错的方案。</p>
<h1 id="module类型的区分">module类型的区分</h1><p>科普小结，可能有些同学不太明白Java library module和Android library module是怎么区分的，其实就是个plugin的区别，在module的build.gradle中:</p>
<p>Android application module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br></pre></td></tr></table></figure></p>
<p>Android library module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br></pre></td></tr></table></figure></p>
<p>Java library module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br></pre></td></tr></table></figure></p>
<h1 id="版本号管理">版本号管理</h1><p>如果只有一个application module还好，如果我们有多个module怎么办呢？每次改版本号累不累？</p>
<p>解决方案就是在root里申明全局变量，可以在单独的gradle里（比如新建一个dependency.gradle）申明然后apply from引用进来，或者直接定义在root的build.gradle中。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">project.ext &#123;</span><br><span class="line">    applicationId = <span class="string">"com.xxx"</span></span><br><span class="line">    buildToolsVersion = <span class="string">"23.0.2"</span></span><br><span class="line">    compileSdkVersion = <span class="number">23</span></span><br><span class="line">    minSdkVersion = <span class="number">14</span></span><br><span class="line">    targetSdkVersion = <span class="number">23</span></span><br><span class="line">    versionCode = <span class="number">1</span></span><br><span class="line">    versionName = <span class="string">"1.0.0"</span></span><br><span class="line">    abortOnLintError = <span class="literal">false</span></span><br><span class="line">    checkLintRelease = <span class="literal">false</span></span><br><span class="line">    useJack = <span class="literal">false</span></span><br><span class="line">    abortOnLintError = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    javaVersion = JavaVersion.VERSION_1_8</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在子module里面则使用rootProject.ext去进行引用:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId rootProject.ext.applicationId</span><br><span class="line">        minSdkVersion rootProject.ext.minSdkVersion</span><br><span class="line">        targetSdkVersion rootProject.ext.targetSdkVersion</span><br><span class="line">        versionCode rootProject.ext.versionCode</span><br><span class="line">        versionName rootProject.ext.versionName</span><br><span class="line">        multiDexEnabled <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">        exclude <span class="string">'LICENSE.txt'</span></span><br><span class="line">        exclude <span class="string">'META-INF/DEPENDENCIES'</span></span><br><span class="line">        exclude <span class="string">'META-INF/ASL2.0'</span></span><br><span class="line">        exclude <span class="string">'META-INF/NOTICE'</span></span><br><span class="line">        exclude <span class="string">'META-INF/LICENSE'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError rootProject.ext.abortOnLintError</span><br><span class="line">        checkReleaseBuilds rootProject.ext.checkLintRelease</span><br><span class="line">        quiet <span class="literal">true</span></span><br><span class="line">        ignoreWarnings <span class="literal">true</span></span><br><span class="line">        <span class="comment">// Some libraries have issues with this.</span></span><br><span class="line">        disable <span class="string">'InvalidPackage'</span></span><br><span class="line">        <span class="comment">// Lint gives this warning but SDK 20 would be Android L Beta.</span></span><br><span class="line">        disable <span class="string">'OldTargetApi'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="依赖管理">依赖管理</h1><p>那么多第三方库的引用，在多个module里引用，修改起版本号来好辛苦，万一有一个漏改了（比如gson）结果导致了异常行为，搞不好查原因查个半天，结果摔键盘竟然是版本号导致的。</p>
<p>so，和上节类似，我们需要统一定义依赖:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> daggerVersion = <span class="string">"2.0.2"</span></span><br><span class="line"><span class="keyword">def</span> retrofitVersion = <span class="string">"2.0.0-beta4"</span></span><br><span class="line"><span class="keyword">def</span> supportVersion = <span class="string">"23.2.1"</span></span><br><span class="line"><span class="keyword">def</span> rxBindingVersion = <span class="string">'0.4.0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> leakCanaryVersion = <span class="string">"1.3.1"</span></span><br><span class="line"><span class="keyword">def</span> blockCanaryVersion = <span class="string">'1.1.4'</span></span><br><span class="line"></span><br><span class="line">project.ext &#123;</span><br><span class="line">    ...</span><br><span class="line">    libSupportAppcompat = <span class="string">"com.android.support:appcompat-v7:$&#123;supportVersion&#125;"</span></span><br><span class="line">    libSupportDesign = <span class="string">"com.android.support:design:$&#123;supportVersion&#125;"</span></span><br><span class="line">    libSupportRecyclerview = <span class="string">"com.android.support:recyclerview-v7:$&#123;supportVersion&#125;"</span></span><br><span class="line">    libSupportV4 = <span class="string">"com.android.support:support-v4:$&#123;supportVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    libRxAndroid = <span class="string">"io.reactivex:rxandroid:1.1.0"</span></span><br><span class="line">    libRxJava = <span class="string">"io.reactivex:rxjava:1.1.1"</span></span><br><span class="line">    libEventBus = <span class="string">"org.greenrobot:eventbus:3.0.0"</span></span><br><span class="line">    libJavaxAnnotation = <span class="string">"javax.annotation:jsr250-api:1.0"</span></span><br><span class="line"></span><br><span class="line">    libGson = <span class="string">"com.google.code.gson:gson:2.4"</span></span><br><span class="line">    libRetrofit = <span class="string">"com.squareup.retrofit2:retrofit:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitConverterGson = <span class="string">"com.squareup.retrofit2:converter-gson:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitAdapterRxJava = <span class="string">"com.squareup.retrofit2:adapter-rxjava:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libOkHttpLoggingInterceptor = <span class="string">"com.squareup.okhttp3:logging-interceptor:3.0.0-RC1"</span></span><br><span class="line"></span><br><span class="line">    libDagger = <span class="string">"com.google.dagger:dagger:$&#123;daggerVersion&#125;"</span></span><br><span class="line">    libDaggerCompiler = <span class="string">"com.google.dagger:dagger-compiler:$&#123;daggerVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    libGlide = <span class="string">"com.github.bumptech.glide:glide:3.7.0"</span></span><br><span class="line"></span><br><span class="line">    libRxBinding = <span class="string">"com.jakewharton.rxbinding:rxbinding:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingSupportV4 = <span class="string">"com.jakewharton.rxbinding:rxbinding-support-v4:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingAppcompatV7 = <span class="string">"com.jakewharton.rxbinding:rxbinding-appcompat-v7:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingDesign = <span class="string">"com.jakewharton.rxbinding:rxbinding-design:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingRecyclerview = <span class="string">"com.jakewharton.rxbinding:rxbinding-recyclerview-v7:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    libRealm = <span class="string">"io.realm:realm-android:0.87.5"</span></span><br><span class="line"></span><br><span class="line">    debugDependencies = [</span><br><span class="line"><span class="label">            leakCanary:</span> <span class="string">"com.squareup.leakcanary:leakcanary-android:$&#123;leakCanaryVersion&#125;"</span>,</span><br><span class="line"><span class="label">            blockcanary:</span> <span class="string">"com.github.moduth:blockcanary-ui:$&#123;blockCanaryVersion&#125;"</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    releaseDependencies = [</span><br><span class="line"><span class="label">            leakCanary:</span> <span class="string">"com.squareup.leakcanary:leakcanary-android-no-op:$&#123;leakCanaryVersion&#125;"</span>,</span><br><span class="line"><span class="label">            blockcanary:</span> <span class="string">"com.github.moduth:blockcanary-no-op:$&#123;blockCanaryVersion&#125;"</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里也可以根据个人喜好把版本号也全都抽出去，我个人的实践原则是除非引用超出1处，否则还是定义在一起。</p>
<p>module中使用:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">include:</span> [<span class="string">'*.jar'</span>], <span class="string">dir:</span> <span class="string">'libs'</span>)</span><br><span class="line">    ...</span><br><span class="line">    apt rootProject.ext.libDaggerCompiler</span><br><span class="line">    compile rootProject.ext.libDagger</span><br><span class="line">    compile rootProject.ext.libRxJava</span><br><span class="line">    compile rootProject.ext.libRxAndroid</span><br><span class="line">    compile rootProject.ext.libRxBinding</span><br><span class="line">    compile rootProject.ext.libGlide</span><br><span class="line">    provided rootProject.ext.libJavaxAnnotation</span><br><span class="line">    compile rootProject.ext.libSupportAppcompat</span><br><span class="line">    compile rootProject.ext.libSupportDesign</span><br><span class="line">    compile rootProject.ext.libSupportRecyclerview</span><br><span class="line">    compile rootProject.ext.libSupportV4</span><br><span class="line">    debugCompile rootProject.ext.debugDependencies.leakCanary</span><br><span class="line">    releaseCompile rootProject.ext.releaseDependencies.leakCanary</span><br><span class="line">    debugCompile rootProject.ext.debugDependencies.blockCanary</span><br><span class="line">    releaseCompile rootProject.ext.releaseDependencies.blockCanary</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里我还特地为一些debug和release compile不同包的定义了2个map，见leakCanary和blockCanary引用。</p>
<h1 id="签名管理">签名管理</h1><p>签名是一个很敏感的东西，只要有了签名文件和对应的密码信息，就能轻易反编译修改源码然后再签名进行发布，因此如何保存这些敏感信息是很重要的。</p>
<p>在我的个人实践中，主要做了这么几点：</p>
<p>local.properties定义keystore信息文件路径:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keystore<span class="class">.props</span><span class="class">.file</span>=../keystore.properties</span><br></pre></td></tr></table></figure></p>
<p>keystore.properties保存keystore信息:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">store=<span class="value">../buildsystem/release.jks</span></span></span><br><span class="line"><span class="setting">alias=<span class="value">xxx</span></span></span><br><span class="line"><span class="setting">storePass=<span class="value">xxx</span></span></span><br><span class="line"><span class="setting">pass=<span class="value">xxx</span></span></span><br></pre></td></tr></table></figure></p>
<p>buildsystem下保存了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">ci.gradle</span><br><span class="line">debug.keystore</span><br><span class="line">release.jks</span><br></pre></td></tr></table></figure></p>
<p>application module的signingConfigs:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> Properties localProps = <span class="keyword">new</span> Properties()</span><br><span class="line">    localProps.load(<span class="keyword">new</span> FileInputStream(file(<span class="string">'../local.properties'</span>)))</span><br><span class="line">    <span class="keyword">def</span> Properties keyProps = <span class="keyword">new</span> Properties()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果读取不到'keystore.props.file'属性，就使用debug keystore</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (localProps[<span class="string">'keystore.props.file'</span>]) &#123;</span><br><span class="line">        keyProps.load(<span class="keyword">new</span> FileInputStream(file(localProps[<span class="string">'keystore.props.file'</span>])))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        keyProps[<span class="string">"store"</span>] = <span class="string">'../buildsystem/debug.keystore'</span></span><br><span class="line">        keyProps[<span class="string">"alias"</span>] = <span class="string">'android'</span></span><br><span class="line">        keyProps[<span class="string">"storePass"</span>] = <span class="string">'androiddebugkey'</span></span><br><span class="line">        keyProps[<span class="string">"pass"</span>] = <span class="string">'android'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    debug &#123;</span><br><span class="line">        storeFile file(keyProps[<span class="string">"store"</span>])</span><br><span class="line">        keyAlias keyProps[<span class="string">"alias"</span>]</span><br><span class="line">        storePassword keyProps[<span class="string">"storePass"</span>]</span><br><span class="line">        keyPassword keyProps[<span class="string">"pass"</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    release &#123;</span><br><span class="line">        <span class="comment">// release版本使用assert确保存在该属性否则报错，避免错误打包</span></span><br><span class="line">        <span class="keyword">assert</span> localProps[<span class="string">'keystore.props.file'</span>];</span><br><span class="line">        storeFile file(keyProps[<span class="string">"store"</span>])</span><br><span class="line">        keyAlias keyProps[<span class="string">"alias"</span>]</span><br><span class="line">        storePassword keyProps[<span class="string">"storePass"</span>]</span><br><span class="line">        keyPassword keyProps[<span class="string">"pass"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Java8支持">Java8支持</h1><p>对Android的module<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'me.tatarka.retrolambda'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对Java的module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line">targetCompatibility = <span class="number">1.8</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Split_APK">Split APK</h1><p>详细的可以看看Google的官方文档<a href="http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits" target="_blank" rel="external">Apk Splits</a></p>
<p>我的使用:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">splits &#123;</span><br><span class="line">    abi &#123;</span><br><span class="line">        enable <span class="literal">true</span></span><br><span class="line">        reset()</span><br><span class="line">        include <span class="string">'armeabi'</span>, <span class="string">'x86'</span> <span class="comment">//, 'x86', 'armeabi-v7a', 'mips'</span></span><br><span class="line">        universalApk <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>大致来说，就是可以根据脚本的配置，将apk以abi、density进行分包。再也不用为了缩小包的体积而专门去只留下一个arm的jni文件夹了，想怎么分怎么分，搞不定哪天就要传一个x86的包了，而且有的模拟器也只支持x86。</p>
<p>当然如果市场能支持这些配置，那就更好了，用户下载apk的流量就小多了。</p>
<h1 id="Module_aar依赖">Module aar依赖</h1><p>怎么能在使用aar依赖提升编译速度的同时，又能兼顾灵活性，随时可以修改源码呢？</p>
<p>解决方案就是module式aar依赖。</p>
<p>在你的library module目录下, 打开build/outputs/aar，是不是有aar文件（编译过后就会生成）？把它放到module目录下面，然后在build.gradle里面:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configurations.maybeCreate(<span class="string">"default"</span>)</span><br><span class="line">artifacts.add(<span class="string">"default"</span>, file(<span class="string">'lib_authorize-debug.aar'</span>))</span><br></pre></td></tr></table></figure>
<p>再把原来那些脚本给注释了，就搞定了。是不是特别简单？如果想再使用源码依赖，反注释一下就好了。</p>
<h1 id="总结">总结</h1><p>本篇主要讲了开发阶段gradle的各种实践，下一篇是什么暂时我也没有想法，哈哈。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的Android新项目1 - 架构搭建篇]]></title>
      <url>http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/</url>
      <content type="html"><![CDATA[<p>最近一直在忙新项目的事情，所以有的坑一直没填。。现在看来可能一时半会儿还填不了，倒不如记录一下新项目的搭建。</p>
<p>试想一下，如果没有历史负担，没有KPI压力，去新搭建一个项目，你会怎么设计和实现呢？</p>
<p>本系列文章不是教你怎么从0开始学Android，从0开始怎么建一个项目，而定位于零负担的情况下，在2016年怎么去创建一个好的Android项目，其中一部分技术并不太适合刚入门的初学者。</p>
<p><img src="/images/android-new-project-from-1-p1-1.png" alt="architecture"></p>
<h1 id="Application_specific">Application specific</h1><p>类似clean architecture，分为三层 presentation - data - domain。</p>
<p>关于Clean Architecture由于国内的一些文章和项目都多少有偏离和错误，建议直接看</p>
<ul>
<li><a href="http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/" target="_blank" rel="external">http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/</a></li>
<li><a href="http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/" target="_blank" rel="external">http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/</a></li>
</ul>
<p>两篇文章。</p>
<p>domain为纯领域模型，是Java library，包含了use case(Interactor)、DO、repository接口等domain package，目标是在任何Java语言的平台上都能直接使用，所以必须是平台无关，对平台没有任何依赖，能使用Java的方法（JUnit + Mockito）来直接进行测试。</p>
<p>data为domain的实现，是Android library，从MVP的角度来说，即是M层，内部隐藏所有数据细节，cache、数据库、网络、PO、exception（根据业务特点自定义的exception）、repository的具体实现（内部屏蔽数据细节，可能来自网络、数据库、缓存等）。使用Robolectric 3 + JUnit + Mockito进行集成测试。</p>
<p>presentation即展示层，是Android application module，对data不存在实际感知，依赖仅仅是Dagger注入的实例化，所有访问都通过接口进行，可见的是domain里的接口。包含了error message factory(所有exception都会被factory生成对应的message)、DI、mapper（vo转换）、VO（data binding进行MVVM）、navigation、presenter（不强制，仅在一些特别复杂的场景引入）、usersystem、utils（业务相关）、view（activity、fragment、adapter等）、application实现、业务常量等。可以使用Espresso和Android Instrumentation进行UI测试。</p>
<p>整个项目类似MVP+MVVM的混合（谁跟你说的MVP和MVVM是互斥的？），不过P层不一定存在，以避免为了模式而模式所导致的开发压力。</p>
<h1 id="Common_libraries">Common libraries</h1><p>aar依赖以避免对编译速度造成影响，不过这里比较巧妙的是依赖作为module引入，所以当需要源码依赖的时候在build.gradle里进行注释/反注释就能迅速切换，十分方便。</p>
<p>lib_uiframework: UI framework，包含了各种Base类，如BaseActivity、BaseFragment、Navigator（应用中的一切通过scheme跳转）、ActivityManager、FragmentBackHelper等。</p>
<p>lib_uikit: 各种自定义view、第三方view的gradle或者源码依赖。</p>
<p>lib_im: 即时通讯库。</p>
<p>lib_component: 组件库，如cache、gif、ClassLoaderInjecter、Log、SP、Web等。</p>
<p>lib_authorize: 第三方认证(登陆)，目前包括QQ、微信、微博、LinkedIn。</p>
<p>lib_share: 第三方分享，目前包括QQ、微信、微博。</p>
<p>…等等</p>
<h1 id="Third_party_libraries">Third party libraries</h1><p>Dagger, jsr250: 依赖注入框架让我们省了很多代码，jsr250则是Dagger注入时的一个annotation根据，我们的domain依赖了jsr250。</p>
<p>Rx大家族: RxJava, RxAndroid, RxBinding。新时代Android开发必备，还用说吗？</p>
<p>Retrofit: 装逼，喔，不对，高效率开发必备的网络框架。使用注解生成API，方便极了。我这里的实践是根据业务划分多个API接口，然后通过Dagger module进行实例化注入。</p>
<p>EventBus: 有了RxJava还要EventBus？当然，事件并不总是一对一的，也不总是流式的（可能是持续被动的）。举个简单的例子，feed详情信息更新后（比如点赞数据），外部可能有2个timeline页面也需要更新这个数据，这个时候EventBus就可以优雅地进行事件广播。</p>
<p>Realm：一个不依赖于SqlLite的ORM库，特点就是…快。还有同时有多个平台的方案: ReactNative, OC, Swift, Java…</p>
<p>Google Support库, data binding: Google家的，不用说了吧。</p>
<p>LeakCanary, <a href="https://github.com/moduth/blockcanary" target="_blank" rel="external">BlockCanary</a>: 开发阶段必备工具，前者是square家检测内存泄露的，后者是我自己做的卡顿检测工具。</p>
<p>Glide, Glide Transformation: 不折腾fresco，乖乖用Glide。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android逆向分析(3) Android可执行文件之谜 - DEX与ODEX, OAT与ELF]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/24/android-reverse-3/</url>
      <content type="html"><![CDATA[<p><strong>WORKING - 未完</strong></p>
<h1 id="前言">前言</h1><p>米娜桑，是时候揭开DEX的面纱了！我们都知道multidex，都知道65535方法数超标，那DEX到底是个什么东西呢？或许又有些同学知道DEX会优化为ODEX，那ODEX又是什么鬼，优化了什么呢？为什么ClassLoader热补丁方案插入构造函数导致CLASS_ISPREVERIFIED为false后，会对性能造成影响，和ODEX又有什么关系呢？</p>
<p>我们又知道5.0以上Android虚拟机变成了Art，那DEX在art上变成了什么呢？为什么安装特别耗时间？有时候我看着我的Nexus6安装一个应用在那进度条读啊读的好像卡住了，有一种想砸了它的想法，所以当我拿到Nexus 5测试机的时候，第一件事就是刷到4.4，不然每次安装的效率实在不能忍（捂脸）。</p>
<h1 id="DEX是什么">DEX是什么</h1><p>直接把apk当成zip打开后，第一级目录你就会看见有classes.dex，这就是我们要揭开面纱的东西了。</p>
<h2 id="Why_DEX">Why DEX</h2><p>为什么需要DEX，jar不行吗？相应地，为什么需要Dalvik虚拟机，JVM不行吗？</p>
<p>Dalvik虚拟机是专门为了Android移动平台设计的。目标系统的RAM有限，数据存储在缓慢的内部闪存上，而且性能和上个世纪的周免系统相当。它们运行Linux，来提供虚拟内存，进程和线程，以及基于UID的安全机制。</p>
<p>这些特征和限制使我们聚焦在这些目标上：</p>
<ul>
<li>类数据，尤其是字节码，必须被多个进程共享，以最小化系统内存使用。</li>
<li>启动一个新app的开销必须最小化，来保证设备的可响应。</li>
<li>在独立的文件存储类数据可能导致很多冗余，尤其是字符串。为了保证磁盘空间，我们需要把这些因子提出来。</li>
<li>解析类数据的fields在类加载的时候增加了很多不必要的开销。把数据值直接当成C类型（比如整数或字符串）使用会更好。</li>
<li>字节码验证是必要的，却也是缓慢的。所以我们想在app执行外尽量验证更多，以便不要影响app本身体验。</li>
<li>字节码优化（加速指令，精简方法）对速度和电池生命很重要。</li>
<li>为了安全原因，进程不能编辑共享代码。</li>
</ul>
<p>典型的虚拟机执行从压缩文件解压独立的类，然后把它们存到heap上。这就导致了每个类可能在每个进程有独立的拷贝，从而使得应用启动变慢，因为代码必须被解压（或者至少需要从磁盘的很多小片段去读取）。另一方面，在本地heap放置字节码简化了首次使用时的指令重写，从而可能导致一些不同的优化。</p>
<p>这些目标指引了一些基本决定：</p>
<ul>
<li>多个类被聚集到一个单个的DEX文件。</li>
<li>DEX文件被映射为只读，并且在进程间共享。</li>
<li>针对本地系统调整字节码顺序和词对齐。</li>
<li>字节码验证对所有类都是强制的，但我们想要对一切可能的进行”预验证(pre-verify)”。</li>
<li>需要重写字节码的优化必须提前执行。</li>
</ul>
<p>而Dalvik虚拟机和DEX也就应运而生。</p>
<h2 id="Hello_DEX">Hello DEX</h2><p>让我们手动来生成一个java，编译成javac，然后转换为dex看看:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'class Foo &#123;'</span>\</span><br><span class="line"><span class="string">'public static void main(String[] args) &#123;'</span>\</span><br><span class="line"><span class="string">'System.out.println("Hello, world"); &#125;&#125;'</span> &gt; Foo.java</span><br><span class="line">javac Foo.java</span><br><span class="line">dx --dex --output=foo.jar Foo.class</span><br><span class="line">adb push foo.jar /sdcard/</span><br><span class="line">adb shell dalvikvm -cp /sdcard/foo.jar Foo</span><br></pre></td></tr></table></figure></p>
<p>当我们在dx命令的output中指定输出文件后缀为.jar，.zip，或者.apk，名为classes.dex的文件就会被创建并保存在压缩包内。解开Foo.jar你就会看到classes.dex和META-INF文件夹（里面只有一个MANIFEST.MF文件）。</p>
<p>我们创建完该jar后直接push到设备上，并通过shell直接让dalvik虚拟机去运行它，如果操作无误，会看到命令行的反馈 - Hello, world。</p>
<h2 id="DEX_in_file_system">DEX in file system</h2><p>这次我打算多画点图，所以看图说话吧:<br><img src="http://blog.zhaiyifan.cn/images/android-reverse-3-1.png" alt="DEX in file system"></p>
<h2 id="DEX_in_memory">DEX in memory</h2><p>为什么DEX不能被内存映射，或者说，不能直接从zip去执行呢？因为数据是压缩的，文件头也不保证是词对齐的。这些问题可以通过不压缩直接保存为classes.dex和填充zip文件来解决，但会导致数据网络间传输的包体积变大。</p>
<p>我们需要在使用前把zip包里的classes.dex解压。当我们拿到文件的时候，我们可能还会做些之前提到的其他操作（对齐、优化、验证）。这又引出了另一个问题：谁去负责做这些，我们又该把输出放在哪儿？</p>
<h1 id="ODEX是什么">ODEX是什么</h1><p>ODEX，全名Optimized DEX，即优化过的DEX。</p>
<p>有至少3种方法去创建一个“准备好的”DEX文件，即ODEX：</p>
<ol>
<li>虚拟机“即时(just in time)”执行。输出会跑到一个特殊的dalvik-cache目录。这只在一些特殊的桌面和工程机的设备上使用（这些机器的build中，dalvik-cache目录的权限不是严格的）。在生产机器上这是不被允许的。</li>
<li>系统的安装器在程序首次安装时候执行，它有写dalvik-cache的权限。</li>
<li>构建(build)系统预先执行。相关的 jar / apk 文件还在，但classes.dex被剥离出来了。ODEX和原来的zip包保存在一起，不在dalvik-cache，而是系统镜像的一部分。</li>
</ol>
<p>dalvik-cache目录更准确地说是$ANDROID_DATA/data/dalvik-cache。里面的文件的名字来源于源DEX的完整路径。在设备上该目录被system所拥有，而system拥有0771权限，保存在那里的ODEX被系统和应用的组所拥有，权限为0644。数字权限保护的应用会使用640权限来防止其他应用去检测它们。底线是你可以读取自己的与其他大部分应用的DEX文件，但你不能创建、修改，或删除它们。</p>
<p>前两种方法的执行分为以下三个步骤：</p>
<p>首先，dalvik-cache文件被创建。这必须在一个有恰当权限的进程进行，所以在“系统安装器”的场景，是在运行为root的installd进程执行的。</p>
<p>接着，classes.dex从zip包中解压出来。文件头部留出一小块空间给ODEX header。</p>
<p>最后，文件被内存映射以便访问，并被为当前系统使用进行调整。这包括了字节交换（byte-swapping），结构重新排列（structure realigning），但并没有对DEX文件做有意义的改变。还做了一些其他的基本结构检查，比如确保文件偏移量和数据索引落在有效范围内。</p>
<p>构建系统不在桌面上运行工具，而宁愿去启动模拟器，强制所有相关DEX文件的即时优化，然后从dalvik-cache把结果提取出来。这样做的原因，在解释完优化后会变得更显而易见。</p>
<p>一旦代码被字节替换和对齐，我们就可以继续了。我们添加了一些预计算的数据，在文件头填写ODEX header，然后开始执行。然而，如果我们对验证和优化有兴趣，就需要在初始准备后再插入一个步骤。</p>
<h1 id="dexopt的魔法">dexopt的魔法</h1><p>在Android 2.3版本以前，系统源码中提供了生成odex的工具dexopt-wrapper，位于Android 2.2系统源码的 build/tools/dexpreopt/dexopt-wrapper/ 目录下，查看<code>DexOptWrapper.cpp</code>文件会发现实际调用的是 /system/bin/dexopt 程序。在5.0及以上版本的设备上，你可能已经再也找不到dexopt了，取而代之的是dex2oat。</p>
<p>我们想要验证和优化DEX文件里的所有类。最简单和安全的方法就是把所有类加载到虚拟机，然后跑一遍。任何加载失败的就是验证/优化失败的。不幸的是，这可能导致一些资源的分配难以释放（比如native共享库的加载），所以我们不想执行在应用运行的虚拟机里。</p>
<p>解决方案就是起一个叫做dexopt的程序（事实上就是虚拟机的后门）。它会执行一个简短的虚拟机初始化，从引导的类路径加载0个或多个DEX文件，然后开始做一切从目标DEX可以做的验证和优化。结束后，进程退出，释放所有资源。</p>
<p>因为多个虚拟机可能同时需求同一个DEX文件，文件锁被用来确保dexopt仅被执行一次。</p>
<h2 id="验证">验证</h2><p>字节码验证过程包含了扫描DEX文件中每一个类每个方法的指令。目的是为了识别非法指令序列以便不会在运行时才发现它们。涉及到的很多运算对“准确的”GC也是必要的。更多信息见<a href="http://crypto.nknu.edu.tw/AOSP/AOSP/dalvik/docs/verifier.html" target="_blank" rel="external">Dalvik字节码验证器笔记</a>。</p>
<p>为了性能原因，（下节描述的）优化器假设验证器已经运行成功，还会做一些其他可能不安全的假设。默认地，Dalvik会坚持验证所有类，并只优化那些被验证过的类。可以使用命令行flags去禁用验证器。怎么在Android应用框架中控制这些功能的指令见<a href="http://security.nknu.edu.tw/AOSP/AOSP/dalvik/docs/embedded-vm-control.html" target="_blank" rel="external">控制嵌入式虚拟机</a>。</p>
<p>验证失败的报告是一个复杂的问题。例如，在不同的package中，调用一个package内可见的方法是非法的，会被验证器捕捉到。但我们未必想要在验证期报告它 —— 事实上我们想要在试图调用方法的时候抛出异常。在每个方法调用上检查这些访问flags也是很昂贵的，<a href="http://crypto.nknu.edu.tw/AOSP/AOSP/dalvik/docs/verifier.html" target="_blank" rel="external">Dalvik字节码验证器笔记</a>提到了这个问题。</p>
<p>成功被验证的类在ODEX有一个flag被设置了，在加载的时候就不会被重新验证。ODEX文件有一个32位的checksum，但那是主要是用来快速检查数据损坏的。</p>
<h2 id="优化">优化</h2><p>虚拟机解释器通常会在一段代码被首次使用的时候执行某些优化。常量池引用被指向内部数据结构的指针所替代，总是成功的操作或是那些总会以某种方式工作的，会被更简单的形式所替代。这些的一部分需要仅在运行时可用的信息，另一部分在某些特定假设下可以被静态推论出。</p>
<p>Dalvik优化器做了这些：</p>
<ul>
<li>对于虚方法调用，把方法索引替换为vtable索引。</li>
<li>对于实例变量（field）的get/put，把变量索引替换为字节偏移。另外，把 boolean / byte / char / short 基本变量（variants）合并到单个的32位形式（解释器里更少的代码意味着CPU I-cache里更少的空间）。</li>
<li>替换一些高频次调用，比如把 String.length() 替换成”内联“的。这可以跳过一些常见的方法调用消耗，直接从解释器切换到native实现。</li>
<li>删除空方法。最简单的例子就是Object.<init>，啥都没干，但却必须在任何对象被分配的时候执行。指令会被替换为一个新版本的空指令（no-op）形式，除非调试器被attach上去了。</init></li>
<li>附加预计算数据。例如，虚拟机想要一个类名的哈希表以便查找。不同于在加载DEX文件时候去计算这个，我们可以先计算，以节省堆（heap）空间和所有加载该DEX文件的虚拟机的计算时间。</li>
</ul>
<p>大部分的优化显然都会更好。</p>
<h2 id="Hello_ODEX">Hello ODEX</h2><p>我们继续玩耍之前生成的dex，来做一个odex:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">adb push dexopt-wrapper /sdcard/</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line"><span class="comment"># 不然没权限去/data/local</span></span><br><span class="line">su</span><br><span class="line">chmod <span class="number">777</span> dexopt-wrapper</span><br><span class="line"><span class="comment"># 直接在sdcard执行会提示权限错误</span></span><br><span class="line">cp dexopt-wrapper /data/<span class="built_in">local</span>/</span><br><span class="line">cp foo.jar /data/<span class="built_in">local</span>/</span><br><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span></span><br><span class="line">/dexopt-wrapper foo.jar foo.odex                        </span><br><span class="line">--- BEGIN <span class="string">'foo.jar'</span> (bootstrap=<span class="number">0</span>) ---</span><br><span class="line">--- waiting <span class="keyword">for</span> verify+opt, pid=<span class="number">5220</span></span><br><span class="line">--- would reduce privs here</span><br><span class="line">--- END <span class="string">'foo.jar'</span> (success) ---</span><br><span class="line">cp foo.odex /sdcard</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">adb pull /sdcard/foo.odex .</span><br></pre></td></tr></table></figure></p>
<p>这样子就拿到了优化后的odex，赶紧把手机还给同事。</p>
<h1 id="oat与elf">oat与elf</h1><h1 id="下期预告">下期预告</h1><p>下一次让我们利用本次讲到的这些知识，来改一改apktool，让它能重返19岁，反编译腾讯的apk。最后代码会丢到GitHub上。</p>
<hr>
<p>参考资料</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Android_Runtime" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Android_Runtime</a></li>
<li><a href="http://blog.csdn.net/luoshengyang/article/details/18006645" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/18006645</a></li>
<li>AOSP: dalvik/docs</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[世界级的Android测试开发流程（二）]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/23/world-class-testing-development-pipeline-for-android-part-2/</url>
      <content type="html"><![CDATA[<ul>
<li>原文链接 : <a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android-part-2/" target="_blank" rel="external">World-Class Testing Development Pipeline for Android - Part 2.</a></li>
<li>原文作者 : <a href="hello@karumi.com">Karumi</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/lfkdsk" target="_blank" rel="external">JustWe</a>, <a href="https://github.com/xcc3641" target="_blank" rel="external">Hugo Xie</a></li>
</ul>
<p>在我们的上一篇博客文章，<a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android/" target="_blank" rel="external">“世界级的Android测试开发流程（一）”，我们开始讨论一个Android的测试开发流程</a>。我们讨论了一个软件工程师从开始写测试到找到测试开发的一些问题的演化过程。我们获得了以下结论，概括如下：</p>
<ul>
<li><ul>
<li>自动化测试是成功的软件开发的关键。</li>
</ul>
</li>
<li><ul>
<li>为了写特定类型的测试，可测试的代码是必须的。</li>
</ul>
</li>
<li><ul>
<li>一些开发者对测什么与怎么测一无所知，就开始写测试。</li>
</ul>
</li>
<li><ul>
<li>我们的测试的质量与可读性并不总是能达到预期。</li>
</ul>
</li>
<li><ul>
<li>一个测试开发流程对定义测什么与怎么测来说是必须的。</li>
</ul>
</li>
</ul>
<p>相应地，任何应用的测试关键部分是：</p>
<ul>
<li><ul>
<li>独立于框架或者库去测试业务逻辑。</li>
</ul>
</li>
<li><ul>
<li>测试服务器端的API集成。</li>
</ul>
</li>
<li><ul>
<li>在黑盒场景测试下，从用户角度写的的接收准则。</li>
</ul>
</li>
</ul>
<p>在这篇文章中，我们将会看到几个测试方法，它们覆盖了上述部分并保证了一个稳若盘石的测试开发流程。</p>
<h3 id="独立于框架或者库去测试业务逻辑："><strong>独立于框架或者库去测试业务逻辑：</strong></h3><p>至关重要的是检查<a href="http://c2.com/cgi/wiki?BusinessLogicDefinition" target="_blank" rel="external">业务逻辑</a>是否确实实现了预定的产品需求。我们需要隔离想要测试的代码，模拟不同的初始场景，以设置运行时的一些组件的行为。接着，我们将会通过选择想要练习的部分来测试代码。一旦完成，我们需要检查软件状态在训练该测试主题后是否正确。</p>
<p>这个测试方法的关键是 <a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">依赖倒置原则</a>。通过写依赖于抽象的代码，我们将可以把我们的软件分离为不同的层次。为了获得一个依赖的实例，我们需要从某个地方去请求它。或者，我们可以在实例被创建的时候获得它。我们软件的一部分要求我们创建代码来获取协作者的实例。在这些点，我们将会引入测试替身(Test Double)来模拟初始场景或编写不同行为来设计我们的测试。通过使用 <a href="http://martinfowler.com/articles/mocksArentStubs.html" target="_blank" rel="external">测试替身</a>，我们将能模拟生产环境代码的行为与状态。同时，它能帮助我们选择测试的范围（从根本上代表了要测试的代码的数量）。如果没有依赖倒置，所有类就需要各自去获得它们的依赖。从而导致类实现和依赖的实现相互耦合，进而无法引入测试替身来切断生产环境代码的执行流。</p>
<p>通常在构造中传递类依赖是最有效的应用依赖倒置的机制。该机制足够用来引入测试替身。在构造中传递类依赖会帮助我们创建实例来替代对应测试替身的依赖。<strong>尽管并不是强制的，记住<a href="http://martinfowler.com/articles/injection.html" target="_blank" rel="external">服务定位器(Service Locator)或者依赖注入</a>框架的用法对帮助减少样板代码以应用依赖倒置仍然很重要。</strong></p>
<p><strong>我们将会用一个具体的例子 (</strong>关于 <a href="https://github.com/pedrovgs/AndroidGameBoyEmulator" target="_blank" rel="external">我几个月前开始做的Android GameBoy模拟器</a> 的测试<strong>) 来展示如何测试我们的业务需求。</strong></p>
<p>以下测试有关于GameBoy内存管理单元和GameBoy BIOS执行。我们将会检查产品需求（硬件模拟）是否被正确实现。</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MMUTest</span> </span>{  
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MMU_SIZE = <span class="number">65536</span>;
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ANY_ADDRESS = <span class="number">11</span>;
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> ANY_BYTE_VALUE = <span class="number">0x11</span>;

  <span class="annotation">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldInitializeMMUFullOfZeros</span><span class="params">()</span> </span>{
    MMU mmu = givenAMMU();

    assertMMUIsFullOfZeros(mmu);
  }

  <span class="annotation">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldFillMMUWithZerosOnReset</span><span class="params">()</span> </span>{
    MMU mmu = givenAMMU();

    mmu.writeByte(ANY_ADDRESS, ANY_BYTE_VALUE);
    mmu.reset();

    assertMMUIsFullOfZeros(mmu);   
  }

  <span class="annotation">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldWriteBigBytesValuesAndRecoverThemAsOneWord</span><span class="params">()</span> </span>{
    MMU mmu = givenAMMU();

    mmu.writeByte(ANY_ADDRESS, (<span class="keyword">byte</span>) <span class="number">0xFA</span>);
    mmu.writeByte(ANY_ADDRESS +<span class="number">1</span>, (<span class="keyword">byte</span>) <span class="number">0xFB</span>);

    assertEquals(<span class="number">0xFBFA</span>, mmu.readWord(ANY_ADDRESS));
  }
}
</code></pre><p>前三个测试是检查GameBoy MMU（内存管理单元）是否正确实现。成功的关键在于检查测试执行的最后MMU状态是否正确。所有的测试检查MMU是否被正确初始化。如果reset后，MMU被清理了，或者写了2个字节后和期望的词相等，则最后的读取是正确的。为了测试模拟器软件的这部分，我们缩小了测试范围，仅有一个类作为测试对象。</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameBoyBIOSExecutionTest</span> </span>{

  <span class="annotation">@Test</span>
  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldIndicateTheBIOSHasBeenLoadedUnlockingTheRomMapping</span><span class="params">()</span> </span>{
    GameBoy gameBoy = givenAGameBoy();

    tickUntilBIOSLoaded(gameBoy);

    assertEquals(<span class="number">1</span>, mmu.readByte(UNLOCK_ROM_ADDRESS) &amp; <span class="number">0xFF</span>);
  }

  <span class="annotation">@Test</span>
  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldPutTheNintendoLogoIntoMemoryDuringTheBIOSThirdStage</span><span class="params">()</span> </span>{
    GameBoy gameBoy = givenAGameBoy();

    tickUntilThirdStageFinished(gameBoy);

    assertNintendoLogoIsInVRAM();
  }

  <span class="function"><span class="keyword">private</span> GameBoy <span class="title">givenAGameBoy</span><span class="params">()</span> </span>{
    z80 = <span class="keyword">new</span> GBZ80();
    mmu = <span class="keyword">new</span> MMU();
    gpu = <span class="keyword">new</span> GPU(mmu);
    GameLoader gameLoader = <span class="keyword">new</span> GameLoader(<span class="keyword">new</span> FakeGameReader());
    GameBoy gameBoy = <span class="keyword">new</span> Gameboy(z80, mmu, gpu, gameLoader);
    <span class="keyword">return</span> gameboy;
  }

}
</code></pre><p>在这两个测试中，我们检查了跨越不同阶段的BIOS是否执行正确。在BIOS执行的最后，内存中具体位置的一个字节必须被初始化为具体的一个值。接着，在第三阶段的最后，任天堂的logo必须被读取到VRAM。我们决定扩大测试的范围，因为整个BIOS执行是任何模拟器开发的关键部分之一。关于该测试的主题是CPU，CPU指令集的部分（只包括BIOS执行相关的指令），以及MMU。为了检查执行的状态是否正确，我们必须在MMU状态上进行assert。<strong>一个能显著提升测试质量的关键就是检查执行最后的软件状态，而避免去验证和其他组件的交互。这是因为即便和你的组件交互正确，状态仍然可能错误。</strong> 知道这些测试的部分是独立的也很重要，像是CPU指令。</p>
<p>这些测试的另一个主要亮点是使用了测试替身，以模拟Android SDK使用相关的那些代码。在执行BIOS之前，GameBoy游戏必须被读取到GameBoy MMU里。然后，在测试期间，Android SDK将会变得不可用，作为一种变通方法，我们将不得不替换为从测试环境读取GameBoy rom。<em>* 我们使用了依赖倒置原则不仅仅是为了隐藏实现细节或者定义边界，—</em><em> 也是为了替代实际生产环境的AndroidGameReader为FakeGameReader，一个测试替身，<em>*从而不依赖于框架和库去测试代码。这样，我们创建了一个隔离的测试环境，并调整了测试范围。</em></em></p>
<h3 id="范围："><strong>范围：</strong></h3><p>调整测试范围是极其重要的。在写测试前，我们必须记住测试范围会帮助我们认识代码里的缺陷（取决于测试范围的大小）。简化的范围将会给我们更丰富的错误反馈，而大范围的测试则无法提供bug位置的准确信息。<strong>测试的粒度必须跟考虑中的测试范围一样小。</strong></p>
<h3 id="基础："><strong>基础：</strong></h3><p>写这些测试的基础很明确。我们需要写出在依赖倒置原则下可测试的代码，并结合mocking库使用测试框架。mocking库将会帮助我们创建模拟场景下的测试替身，或替换我们部分的生产代码。请注意这些框架和库的使用不是必须的，但我们推荐使用。</p>
<h3 id="结果："><strong>结果：</strong></h3><p>这个方法的结果很有趣。<strong>在遵循依赖倒置原则后，我们可以独立于框架或库去测试我们的业务逻辑</strong>。我们可以创建一个具有可重复性的 <strong>隔离环境</strong> 来实现和设计测试。另外，我们可以简单地 <strong>选择需要测试的生产环境代码的量</strong> 并把它们替换为 <strong>测试替身来模拟行为和不同场景</strong>。</p>
<p>既然我们已经可以测试产品需求是否被正确实现，我们便需要继续致力于测试开发流程。下个我们要测试的是与被测试替身替换的外部组件的集成是否正确。这是我们将会在下一篇博客文章中回顾的东西，敬请期待！;)</p>
<p>参考：</p>
<ul>
<li><ul>
<li>世界级的Android测试开发流程（一）by Pedro Vicente Gómez Sánchez. <a href="http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android" target="_blank" rel="external">http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android</a></li>
</ul>
</li>
<li><ul>
<li>Android GameBoy 模拟器 GitHub Repository by Pedro Vicente Gómez Sánchez. <a href="https://github.com/pedrovgs/AndroidGameBoyEmulator" target="_blank" rel="external">https://github.com/pedrovgs/AndroidGameBoyEmulator</a></li>
</ul>
</li>
<li><ul>
<li>控制反转容器和依赖注入模式 by Martin Fowler. <a href="http://martinfowler.com/articles/injection.html" target="_blank" rel="external">http://martinfowler.com/articles/injection.html</a></li>
</ul>
</li>
<li><ul>
<li>在野外的DIP by Martin Fowler.<a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">http://martinfowler.com/articles/dipInTheWild.html</a></li>
</ul>
</li>
<li><ul>
<li>测试替身 by Martin Fowler. <a href="http://www.martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">http://www.martinfowler.com/bliki/TestDouble.html</a></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[世界级的Android测试开发流程（一）]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/23/world-class-testing-development-pipeline-for-android-part-1/</url>
      <content type="html"><![CDATA[<ul>
<li>原文链接 : <a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android/" target="_blank" rel="external">World-Class Testing Development Pipeline for Android - Part 1.</a></li>
<li>原文作者 : <a href="hello@karumi.com">Karumi</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/lfkdsk" target="_blank" rel="external">JustWe</a>, <a href="https://github.com/xcc3641" target="_blank" rel="external">Hugo Xie</a></li>
</ul>
<h1 id="世界级的_Android_测试开发流程（一）">世界级的 Android 测试开发流程（一）</h1><p>在开发完移动应用并和手动QA团队合作了数年后，我们决定开始写测试。作为工程师，我们知道，<strong>自动化测试是成功的移动开发之关键。</strong> 在这篇博客里，我将会分享我们的故事——Karumi启动于几年前的测试故事。这是系列博客的第一篇，我们将会囊括世界级的 Android测试流程的所有方面。</p>
<p>几年前，我们开始为移动应用写测试。我们对测试了解有限，所以我们致力于接受测试并使用最常用的框架来做单元测试，一个简单的test runner和mocking库。过了一段时间我们遇到了问题：</p>
<ul>
<li>我们不知道测试什么和如何去测试它。</li>
<li>我们的代码还没准备好被测试。</li>
<li>我们沉迷于Mike Cohn的测试金字塔，却没有考虑到我们在写的软件类型。</li>
<li>即使我们的测试通过了，也不意味着代码没有问题。</li>
</ul>
<p>是不是很可怕? 我们花了很多时间去克服这些挑战，在某个时刻我们意识到是方法错了。即便测试覆盖率很高，我们的软件仍然在出错。最坏的是，从我们的测试中，无法得到任何反馈。<strong>解决我们的问题的关键是识别出我们一直碰到的问题所在：</strong></p>
<ul>
<li>我们的接受测试太难写了，因为我们需要提供配置API来模拟接受测试的初始状态。</li>
<li>大部分时候，我们的测试会随机失败，而我们不知道为什么。只能用重复编译来通过测试。</li>
<li>我们有大量的单元测试和高覆盖率，但我们的单元测试从未失败。即便应用出问题了，我们的测试仍然能通过。</li>
<li>我们用很多时间去验证mock的调用。</li>
<li>我们不得不使用一些“魔法”测试工具来测试代码，一个私有方法或者模拟静态方法的调用结果。</li>
</ul>
<p>这是我们决定停下，并开始思考为什么我们对自己的测试感觉不爽。我们快速需要找到问题的解决方案。我们的项目告诉说我们做错了，我们需要解决方案，<strong>我们需要一个测试开发流程</strong>。话虽如此，为了改善程序质量，测试开发流程不总是第一件要完善的事。</p>
<p><strong>一个测试开发流程定义了测什么、怎么测</strong>。用什么工具，为什么用？测试的范围是什么？<strong>即便有良好的测试开发流程，可测试的代码对有自信去写测试仍然是必须的</strong>，因为大部分的测试是不可能的，或者至少，很难去写。如果你的代码没有准备好，与代码以及单元或集成范围最贴近的测试并不是那么容易去写的。因此，我们决定带着这些目标，首先识别出应用中的问题，然后去解决它们。那么问题来了，如果我们的代码能够是完美的，我们对它有何期望呢？期望是：</p>
<ul>
<li>应用必须是可测试的。</li>
<li>代码必须是可读的。</li>
<li>职责必须是清晰而有结构的。</li>
<li>低耦合高内聚。</li>
<li>代码必须是诚实的。</li>
</ul>
<p>在重构之前代码一团糟。软件职责丢失在代码的行与行之间。实现细节是完全暴露的，activities和fragments负责处理软件的状态，到处都是软件状态。另外，我们的业务逻辑和框架是耦合的。带着这些问题，我们决定把应用架构改成其他更有结构的东西。<strong>我们使用的架构是 <a href="https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">“Clean Architecture”</a>。除了架构的核心内容，我们还应用了一些和GUI应用相关模式像是MVP和MMVM，以及数据处理相关的模式像是Repository模式</strong>。架构详情和这篇博客没有关系（我们会在未来的博文中讨论到它），“Clean Architecture”的<strong>核心元素</strong>与<strong>最重要的SOLID原则之一，<a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">依赖倒置原则</a></strong>相关。</p>
<p><strong>依赖倒置原则提出你的代码必须依赖于抽象而不是具体实现</strong>。这个原则，仅仅是这个原则就是通向成功的钥匙。它是<strong>改变我们的代码并适配测试策略以有效克服我们手上问题的关键</strong>。依赖于抽象既无关于依赖注入框架，也无关于使用Java接口来定义类的API。然而，它与隐藏细节有关。根据不同角色，软件职责改变的点，引入<a href="http://www.martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">测试替身(TestDouble)</a>的点去创建层，大大限制了测试的范围。</p>
<p><strong>通过依赖倒置原则，我们能够去选择正确数量的代码去测试</strong>。一旦这些点清晰了，我们就停下为所有的mocks去写测试。我们能够使用准确数字的mocks去覆盖一个测试用例，并确保我们在测试软件状态而不仅仅是组件之间的交互。</p>
<p>一旦应用架构清晰了，我们开始 <strong>定义我们的测试开发流程。我们的目标是回答2个问题：我们想要测试什么？我们如何去测试它？</strong> 在尝试找出如何分割测试，并用简单又可读的方式去写以后，我们注意到层次分离是最完美的出发点。结果，解决方案变得清晰：</p>
<p>我们想要测试什么?</p>
<ul>
<li>独立于任何框架或者库去测试我们的业务逻辑。</li>
<li>测试我们的API集成。</li>
<li>持久化框架的集成。</li>
<li>一些通用UI组件。</li>
<li>测试黑盒场景下，从用户视角写的的接收准则。</li>
</ul>
<p>我们想要怎么去测试?</p>
<ul>
<li>这是我们在下一博客文章要说的东西，敬请期待！;)</li>
</ul>
<p>参考:</p>
<ul>
<li>世界级的Android测试开发流程幻灯片 by Pedro Vicente Gómez Sánchez. <a href="http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android" target="_blank" rel="external">http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android</a></li>
<li>Mike Cohn的测试金字塔 by Martin Fowler. <a href="http://martinfowler.com/bliki/TestPyramid.html" target="_blank" rel="external">http://martinfowler.com/bliki/TestPyramid.html</a></li>
<li>Clean架构 by Uncle Bob. <a href="https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html</a></li>
<li>在野外的DIP by Martin Fowler.<a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">http://martinfowler.com/articles/dipInTheWild.html</a></li>
<li>测试替身 by Martin Fowler. <a href="http://www.martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">http://www.martinfowler.com/bliki/TestDouble.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编译时替换资源 - Android重叠包与资源合并一见]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/18/android-resource-overlay/</url>
      <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>在<a href="http://blog.zhaiyifan.cn/2016/02/13/android-reverse-2/">Android逆向分析(2) APK的打包与安装</a>一文中对资源编译过程的介绍中，笔者提到了overlay（重叠包）这个概念，一位每天都被自己帅醒的好友看了那篇东西后，来问我这个重叠包究竟是个什么东西，笔者想了想，确实这个概念有很多同学们都不甚了解，搜索了一下网上了介绍，也几乎没有看到任何对这个的讲解，只有<a href="http://blog.csdn.net/luoshengyang/article/details/8744683" target="_blank" rel="external">老罗的博客</a>提到过</p>
<blockquote>
<p>–mOverlay：表示当前正在编译的资源的重叠包。重叠包是什么概念呢？假设我们正在编译的是Package-1，这时候我们可以设置另外一个Package-2，用来告诉aapt，如果Package-2定义有和Package-1一样的资源，那么就用定义在Package-2的资源来替换掉定义在Package-1的资源。通过这种Overlay机制，我们就可以对资源进行定制，而又不失一般性。</p>
</blockquote>
<p>那我们应该怎么怎么去使用重叠包呢？它又能用在什么地方，带来什么便利呢？</p>
<p>本文从aapt overlay切入，介绍其用法和在gradle的实践，并接着介绍了gradle plugin提供的资源合并机制和实践。</p>
<p>测试源码: <a href="https://github.com/markzhai/ResourceOverlayDemo" target="_blank" rel="external">ResourceOverlayDemo</a>。</p>
<h1 id="aapt_overlay">aapt overlay</h1><p>我们看看aapt的命令help里是怎么描述的，省略版:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line"> aapt l[ist] [-v] [<span class="operator">-a</span>] file.&#123;zip,jar,apk&#125;</span><br><span class="line">   List contents of Zip-compatible archive.</span><br><span class="line"></span><br><span class="line"> aapt d[ump] [--values] [--include-meta-data] WHAT file.&#123;apk&#125; [asset [asset ...]]</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line"> aapt p[ackage] [<span class="operator">-d</span>][<span class="operator">-f</span>][-m][-u][-v][-x][-z][-M AndroidManifest.xml] \</span><br><span class="line">        ...</span><br><span class="line">        [--utf16] [--auto-add-overlay] \</span><br><span class="line">        ...</span><br><span class="line">        [-S resource-sources [-S resource-sources ...]] \</span><br><span class="line">        [-F apk-file] [-J R-file-dir] \</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">   Package the android resources.  It will <span class="built_in">read</span> assets and resources that are</span><br><span class="line">   supplied with the -M -A -S or raw-files-dir arguments.  The -J -P -F and -R</span><br><span class="line">   options control <span class="built_in">which</span> files are output.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> Modifiers:</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment"># 特别说明下，这就是前一篇我们说到的include的base set啦，比如android.jar</span></span><br><span class="line">   -I  add an existing package to base include <span class="built_in">set</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="comment"># overlay通过-S指定，可以指定多个目录，</span></span><br><span class="line">   -S  directory <span class="keyword">in</span> <span class="built_in">which</span> to find resources.  Multiple directories will be scanned</span><br><span class="line">       and the first match found (left to right) will take precedence.</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment"># 自动添加overlays包里的资源</span></span><br><span class="line">   --auto-add-overlay</span><br><span class="line">       Automatically add resources that are only <span class="keyword">in</span> overlays.</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure></p>
<p>举个例子</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aapt package \</span><br><span class="line">-M AndroidManifest.xml \</span><br><span class="line">-m -J gen \</span><br><span class="line">-S src/com/example/res \</span><br><span class="line">-S src/com/example/ui/res</span><br></pre></td></tr></table></figure>
<p>假如我们有如上的aapt命令输入，那么当<code>src/com/example/res</code>与<code>src/com/example/ui/res</code>有相同资源的时候，就会使用前者的，这里对资源替换的粒度是resource而不是文件，比如两个文件夹的values/string.xml都有对同一个string id的描述，最后就会使用前者的字符串。</p>
<p>然后我们再来看看<code>--auto-add-overlay</code>有什么用，</p>
<p>假如我们在<code>src/com/example/ui/res</code>定义了资源string a，但是在<code>src/com/example/res</code>却没有这个string，那就会报错，因为基础包里是没有那个资源的，这时候就需要加上<code>--auto-add-overlay</code>，于是就会自动把新的资源都添加进去。</p>
<p>overlay大致就是这么一回事啦。</p>
<h1 id="Gradle实践">Gradle实践</h1><h2 id="aaptOptions">aaptOptions</h2><p>google的官方文档简直说了和没说一样。还是自己来吧，用AS的模板新建一个Testapp工程，随便建两个res文件夹，各放两个strings.xml，结构为：</p>
<pre><code>├── res
│   ├── drawable
│   ├── layout
│   │   ├── activity_main<span class="class">.xml</span>
│   │   └── content_main<span class="class">.xml</span>
│   ├── <span class="tag">menu</span>
│   │   └── menu_main<span class="class">.xml</span>
│   ├── mipmap-xxxhdpi
│   │   └── ic_launcher<span class="class">.png</span>
│   └── values
│       ├── colors<span class="class">.xml</span>
│       ├── dimens<span class="class">.xml</span>
│       ├── strings<span class="class">.xml</span>
│       └── styles<span class="class">.xml</span>
├── res2
│   └── values
│       └── strings<span class="class">.xml</span>
└── res3
    └── values
        └── strings.xml
</code></pre><p>res2和res3分别定义了一个string <code>hehe</code>，value分别为<code>hehe res2</code>和<code>hehe res3</code>。</p>
<p>content_main.xml的TextView使用了<code>hehe</code>（原来就是那个Hello World）。当然这里as会报错，因为res2和res3并没有标示为资源文件夹。</p>
<p>在module的build.gradle里:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  aaptOptions &#123;</span><br><span class="line">      additionalParameters <span class="string">'-S'</span>,</span><br><span class="line">              <span class="string">'/Users/yifan/dev/github/Testapp/app/src/main/res3'</span>,</span><br><span class="line">              <span class="string">'-S'</span>,</span><br><span class="line">              <span class="string">'/Users/yifan/dev/github/Testapp/app/src/main/res2'</span>,</span><br><span class="line">              <span class="string">'--auto-add-overlay'</span></span><br><span class="line">      noCompress <span class="string">'foo'</span>, <span class="string">'bar'</span></span><br><span class="line">      ignoreAssetsPattern <span class="string">'!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~'</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后我们试图编译:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">All input files are considered out-of-date <span class="keyword">for</span> incremental task <span class="string">':app:processDebugResources'</span>.</span><br><span class="line">Starting process <span class="string">'command '</span>/Users/yifan/dev/sdk/adt-bundle-mac-sdk/build-tools/<span class="number">23.0</span>.<span class="number">2</span>/aapt<span class="string">''</span>. Working directory: /Users/yifan/dev/github/Testapp/app Command: /Users/yifan/dev/sdk/adt-bundle-mac-sdk/build-tools/<span class="number">23.0</span>.<span class="number">2</span>/aapt package <span class="operator">-f</span> --no-crunch -I /Users/yifan/dev/sdk/adt-bundle-mac-sdk/platforms/android-<span class="number">23</span>/android.jar -M /Users/yifan/dev/github/Testapp/app/build/intermediates/manifests/full/debug/AndroidManifest.xml -S /Users/yifan/dev/github/Testapp/app/build/intermediates/res/merged/debug -A /Users/yifan/dev/github/Testapp/app/build/intermediates/assets/debug -m -J /Users/yifan/dev/github/Testapp/app/build/generated/<span class="built_in">source</span>/r/debug -F /Users/yifan/dev/github/Testapp/app/build/intermediates/res/resources-debug.ap_ --debug-mode --custom-package cn.zhaiyifan.testapp -<span class="number">0</span> apk -S /Users/yifan/dev/github/Testapp/app/src/main/res2 --output-text-symbols /Users/yifan/dev/github/Testapp/app/build/intermediates/symbols/debug</span><br><span class="line">Successfully started process <span class="string">'command '</span>/Users/yifan/dev/sdk/adt-bundle-mac-sdk/build-tools/<span class="number">23.0</span>.<span class="number">2</span>/aapt<span class="string">''</span></span><br><span class="line">/Users/yifan/dev/github/Testapp/app/build/intermediates/res/merged/debug/values-af/values-af.xml:<span class="number">3</span> : AAPT: Resource at abc_action_bar_home_description appears <span class="keyword">in</span> overlay but not <span class="keyword">in</span> the base package; use &lt;add-resource&gt; to add.</span><br><span class="line">...</span><br><span class="line">...各种类似报错</span><br><span class="line">/usr/<span class="built_in">local</span>/google/buildbot/src/googleplex-android/mnc-supportlib-release/frameworks/support/v7/appcompat/res/color/switch_thumb_material_light.xml:<span class="number">19</span> : AAPT: No resource found that matches the given name (at <span class="string">'color'</span> with value <span class="string">'@color/switch_thumb_normal_material_light'</span>).</span><br><span class="line"></span><br><span class="line">:app:processDebugResources FAILED</span><br><span class="line">:app:processDebugResources (Thread[main,<span class="number">5</span>,main]) completed. Took <span class="number">10.493</span> secs.</span><br></pre></td></tr></table></figure>
<p>看到<code>&lt;add-resource&gt;</code>这个，大概知道啥问题了…于是在<code>additionalParameters</code>最后又加上了<code>--auto-add-overlay</code>，成功编译运行。</p>
<p>在屏幕中央，显示了hehe res3，交换-S顺序后则变成了hehe res2，符合我们第一节中说到的，选择首个匹配原则。</p>
<p>不仅是string，anim，layout等等资源都可以使用重叠包来进行动态指定。</p>
<h2 id="资源合并">资源合并</h2><p>和aapt的overlay有关，但使用场景略有不同，也介绍一下。</p>
<p>Google在Android Tools Project Site专门为此开了一个页面：<a href="http://tools.android.com/tech-docs/new-build-system/resource-merging" target="_blank" rel="external">Resource Merging(资源合并)</a>。</p>
<p>在过去的编译系统中，资源合并是通过传给aapt一个作为重叠包的资源文件夹列表来做的，再加上–auto-add-overlay来确保在重叠包里的新资源会被自动添加（默认行为只会重载既有资源）。</p>
<p>基础Gradle的编译系统的一个目标就是提供更大的灵活性，而另一个经常并问到的功能要求则是能拥有多个资源文件夹。aapt无法去处理这个，所以新的编译系统引进了一种新的超越aapt的合并机制，生成一个单独的，合并的，资源文件夹并提供给aapt。这个合并机制拥有增量的优点，既因为Gradle的输入/输出变更检测，又因为其实现方式（可以只使用唯一一个变更文件来做重新merge）。</p>
<p>合并的资源来自3种来源：</p>
<ol>
<li>主资源，和main sourceSet相关联，大多位于src/main/res</li>
<li>Variant重叠包，来自Build Type和Flavor(s).</li>
<li>Library项目依赖，通过它们的aar bundle提供资源。</li>
</ol>
<h3 id="优先级">优先级</h3><p>优先级为：BuildType -&gt; Flavor -&gt; main -&gt; Dependencies.</p>
<p>这意味着如果一个资源同时在Build Type和main存在，会使用Build Type里的。</p>
<p>需要注意的是合并的scope，同样（类型，名字）的资源但标示符不同的，是分开处理的。</p>
<p>即如果src/main/res有:</p>
<ul>
<li>res/layout/foo.xml</li>
<li>res/layout-land/foo.xml<br>而src/debug/res有：</li>
<li>res/layout/foo.xml</li>
</ul>
<p>则合并后的资源文件夹会包含默认的来自src/debug/res的foo.xml，但横屏版本则会选择src/main/res下的。</p>
<p>PS: android的资源有19个维度，见<a href="http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources" target="_blank" rel="external">Grouping Resource Types</a>的Table 2，这19个维度会唯一指定1个资源（qualifier标示符）。在老罗的资源介绍博客中曾经提到过18个维度，现在变成了19是因为多了Round screen这个维度，用于描述Android Wear，添加于API 23.</p>
<h3 id="处理多个资源文件夹">处理多个资源文件夹</h3><p>每个sourceSet可以定义多个资源文件夹，举个例子:</p>
<pre><code><span class="xml">android.sourceSets </span><span class="expression">{
   <span class="variable">main.res.srcDirs</span> = ['<span class="variable">src</span><span class="end-block">/main</span><span class="end-block">/res</span>', '<span class="variable">src</span><span class="end-block">/main</span><span class="end-block">/res</span>2']
}</span><span class="xml"></span>
</code></pre><p>这种情况下，两个资源文件夹具有相同优先级，即如果一个资源在两个文件夹都声明了，合并会报错。</p>
<h3 id="Library依赖的优先级顺序">Library依赖的优先级顺序</h3><p>根据传递的依赖，Library项目的实际集被工程视为一个图，而不是平铺的列表，然后合并机制只会处理一个平优先级列表。</p>
<p>如果我们考虑如下例子的依赖关系：<br>项目 -&gt; A, B (意味着A的优先级高于B)<br>A -&gt; C, D<br>B -&gt; C<br>则最后的优先级list为A, D, B, C，同时保证了A和B可以重载C。</p>
<h3 id="小测试">小测试</h3><p>继续在之前我们建立的工程的基础上做个小测试吧。在sourceSet加上res2文件夹，最后build.gradle的android域如下:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.2"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"cn.zhaiyifan.testapp"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    aaptOptions &#123;</span><br><span class="line">        additionalParameters <span class="string">'-S'</span>,</span><br><span class="line">                <span class="string">'/Users/yifan/dev/github/Testapp/app/src/main/res3'</span>,</span><br><span class="line">                <span class="string">'-S'</span>,</span><br><span class="line">                <span class="string">'/Users/yifan/dev/github/Testapp/app/src/main/res2'</span>,</span><br><span class="line">                <span class="string">'--auto-add-overlay'</span></span><br><span class="line">        noCompress <span class="string">'foo'</span>, <span class="string">'bar'</span></span><br><span class="line">        ignoreAssetsPattern <span class="string">'!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~'</span></span><br><span class="line">    &#125;</span><br><span class="line">    android.sourceSets &#123;</span><br><span class="line">        main.res.srcDirs = [<span class="string">'src/main/res'</span>, <span class="string">'src/main/res2'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行后发现界面显示了 hehe res2，符合预期，因为res2已经和res合并了，所以先找到了build/intermediates/res/merged/debug下的string，没有用res3的。</p>
<h1 id="使用场景">使用场景</h1><p>重叠包可以让我们在不同的buildType、渠道下的包，使用不同的资源，做一些定制，而不用侵入代码本身的逻辑。</p>
<p>资源合并则可以帮助资源分组，比如按业务分组之类的，当然也能做重叠包能做的事（比如在不同的buildType申明不同的res.srcDirs）…所以你问我有了resource merge之后重叠包还有什么用…我还真没法回答，可能有什么奇异的场景会用到吧，毕竟Google也说了，这是一种超越aapt的合并机制。</p>
<h1 id="总结">总结</h1><p>我们了解了Android aapt overlay的机制，gradle下的资源合并是怎么一回事，并编写运行demo验证了资源应用两种机制后的结果。</p>
<h1 id="参考文献">参考文献</h1><ul>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/jb-dev/libs/utils/README" target="_blank" rel="external">https://android.googlesource.com/platform/frameworks/native/+/jb-dev/libs/utils/README</a></li>
<li><a href="http://blog.csdn.net/luoshengyang/article/details/8744683" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/8744683</a></li>
<li><a href="http://tools.android.com/tech-docs/new-build-system/resource-merging" target="_blank" rel="external">http://tools.android.com/tech-docs/new-build-system/resource-merging</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android逆向分析(2) APK的打包与安装]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/13/android-reverse-2/</url>
      <content type="html"><![CDATA[<p>2/18日增加对aidl和java编译的描述。</p>
<h1 id="前言">前言</h1><p>上一次我们反编译了手Q，并遇到了Apktool反编译直接crash的问题，虽然笔者很想在这次解决这个问题，但在解决途中，发现该保护依赖于很多知识，所以本次先插入一下，正所谓知其然知其所以然，授之鱼不如授之以渔，只有知道一些基本原理，才能让我们以后能自行解决更多问题。</p>
<p>那么，你知道么？从我们在Android Studio中，点击run，到app运行在手机上，之间究竟发生了什么，代码和资源是怎么变成APK的，而APK又是怎么安装上去，并能执行的呢。</p>
<p><img src="http://img.blog.csdn.net/20160212233210732" alt="build-simple-overview"></p>
<p>我们或许都能说出来像<a href="http://developer.android.com/tools/building/index.html" target="_blank" rel="external">上图</a>这样一个简单的过程：Android工程编译打包为APK，签名后通过ADB push到设备或者模拟器上安装。但是再深入就蒙了。</p>
<p>希望看完下文，大家能对整个过程有一定了解。</p>
<p>源码：资源部分为Android 4.4，后半段改为了6.0_r2</p>
<h1 id="打包">打包</h1><p>APK是Android Package的缩写，实际上APK就是一个zip压缩包，使用zip解压软件直接就能对其进行解压，解压后会发现就是由各种资源文件、一或多个dex文件（odex过的apk除外）、AndroidManifest.xml、resources.arsc以及其他一些文件组成的。</p>
<p>我们先看看从Android在线文档找来的<a href="http://developer.android.com/sdk/installing/studio-build.html#detailed-build" target="_blank" rel="external">APK文件构建流程图</a>，如下（方形为对象，圆形为动作）。</p>
<p><img src="http://img.blog.csdn.net/20160212233741455" alt="apk-build"></p>
<p>从该图来看，整个打包过程可以分为以下七个步骤：</p>
<h2 id="第1步：aapt">第1步：aapt</h2><p>打包资源文件，生成R.java和编译后的资源。aapt的可执行文件位于sdk的build-tools下，而源码则在frameworks\base\tools\aapt目录下。打包过程主要是调用了<code>Resources.cpp</code>下的<code>buildResources()</code>。</p>
<p>路径为<code>Main.cpp</code>下的<code>handleCommand(Bundle* bundle)</code>到<code>Command.cpp</code>下的<code>doPackage(Bundle* bundle)</code>，经过一些初始化和检查后调用了我们要深入看的<code>buildResources(Bundle* bundle, const sp&lt;AaptAssets&gt;&amp; assets)</code>。因为代码都比较长，这里不贴了，主要说一下大概的逻辑和流程。</p>
<h3 id="检查AndroidManifest-xml">检查AndroidManifest.xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String8是android framework源码定义的数据格式，用来保存UTF-8字符的字符串，类似的还有一个String16，用来放UTF-16字符串的。</span></span><br><span class="line">sp&lt;AaptGroup&gt; androidManifestFile =</span><br><span class="line">        assets-&gt;getFiles().valueFor(String8(<span class="string">"AndroidManifest.xml"</span>));</span><br><span class="line"><span class="keyword">if</span> (androidManifestFile == NULL) &#123;</span><br><span class="line">    fprintf(stderr, <span class="string">"ERROR: No AndroidManifest.xml file found.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status_t err = parsePackage(bundle, assets, androidManifestFile);</span><br><span class="line"><span class="keyword">if</span> (err != NO_ERROR) &#123;</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NOISY(printf(<span class="string">"Creating resources for package %s\n"</span>,</span><br><span class="line">             assets-&gt;getPackage().string()));</span><br></pre></td></tr></table></figure>
<p>主要做一些检查并使用<code>parsePackage</code>初始化并设置一些attribute，比如<code>package</code>, <code>minSdkVersion</code>, <code>uses-sdk</code>。</p>
<h3 id="添加被引用资源包">添加被引用资源包</h3><p>使用<code>table.addIncludedResources(bundle, assets)</code>添加被引用资源包，比如系统的那些android:命名空间下的资源。</p>
<h3 id="收集资源文件">收集资源文件</h3><p>收集资源文件:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collect_files</span><span class="params">(<span class="keyword">const</span> sp&lt;AaptDir&gt;&amp; dir,</span><br><span class="line">        KeyedVector&lt;String8, sp&lt;ResourceTypeSet&gt; &gt;* resources)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>处理overlay（重叠包，如果指定的重叠包有和当前编译包重名的资源，则使用重叠包的）:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply the overlay files to the base set</span></span><br><span class="line"><span class="keyword">if</span> (!applyFileOverlay(bundle, assets, &amp;drawables, <span class="string">"drawable"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;layouts, <span class="string">"layout"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;anims, <span class="string">"anim"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;animators, <span class="string">"animator"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;interpolators, <span class="string">"interpolator"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;transitions, <span class="string">"transition"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;xmls, <span class="string">"xml"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;raws, <span class="string">"raw"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;colors, <span class="string">"color"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;menus, <span class="string">"menu"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;mipmaps, <span class="string">"mipmap"</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="将收集到的资源文件加到资源表(ResourceTable)">将收集到的资源文件加到资源表(<code>ResourceTable</code>)</h3><p>对res目录下的各个资源子目录进行处理，函数为<code>makeFileResources</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> status_t <span class="title">makeFileResources</span><span class="params">(Bundle* bundle, <span class="keyword">const</span> sp&lt;AaptAssets&gt;&amp; assets,</span><br><span class="line">                                  ResourceTable* table,</span><br><span class="line">                                  <span class="keyword">const</span> sp&lt;ResourceTypeSet&gt;&amp; <span class="built_in">set</span>,</span><br><span class="line">                                  <span class="keyword">const</span> <span class="keyword">char</span>* resType)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p><code>makeFileResources</code>会对资源文件名做合法性检查，并将其添加到ResourceTable内。</p>
<h3 id="编译values资源并添加到资源表">编译values资源并添加到资源表</h3><p>在上一步添加过程中，其实并没有对values资源进行处理，因为values比较特殊，需要经过编译之后，才能添加到资源表中。</p>
<p>编译会调用<code>ResourceTable</code>的<code>compileResourceFile</code>进行:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">status_t</span> compileResourceFile(Bundle* bundle,</span><br><span class="line">                             <span class="keyword">const</span> sp&lt;AaptAssets&gt;&amp; assets,</span><br><span class="line">                             <span class="keyword">const</span> sp&lt;AaptFile&gt;&amp; in,</span><br><span class="line">                             <span class="keyword">const</span> ResTable_config&amp; defParams,</span><br><span class="line">                             <span class="keyword">const</span> <span class="keyword">bool</span> overwrite,</span><br><span class="line">                             ResourceTable* outTable);</span><br></pre></td></tr></table></figure></p>
<h3 id="给bag资源分配id">给bag资源分配id</h3><p>在继续编译其他资源之前，我们需要先给bag资源（attrs，比如orientation这种属性的取值范围定义的子元素）分配id，因为其他资源可能对它们有引用。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">status_t</span> ResourceTable::assignResourceIds();</span><br></pre></td></tr></table></figure>
<h3 id="编译xml资源文件">编译xml资源文件</h3><p>最后我们终于可以编译xml文件了，因为我们已经为它准备好了一切可能引用到的东西（value, drawable等）。</p>
<p>程序会对layouts, anims, animators等逐一调用<code>ResourceTable.cpp</code>的:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">status_t</span> compileXmlFile(<span class="keyword">const</span> sp&lt;AaptAssets&gt;&amp; assets,</span><br><span class="line">                        <span class="keyword">const</span> sp&lt;AaptFile&gt;&amp; target,</span><br><span class="line">                        ResourceTable* table,</span><br><span class="line">                        <span class="keyword">int</span> options);</span><br></pre></td></tr></table></figure></p>
<p>进行编译，内部流程又可以分为：解析xml文件，赋予属性名称资源id，解析属性值，扁平化为二进制文件（调用<code>flatten(Bundle* bundle, const sp&lt;AaptFile&gt;&amp; dest)</code>）。</p>
<h3 id="编译AndroidManifest-xml文件">编译AndroidManifest.xml文件</h3><p>该步骤其实也可以归为上一步，但由于manifest文件的特殊，所以姑且抽了出来。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 拿到AndroidManifest.xml文件</span><br><span class="line">const sp&lt;AaptFile&gt; manifestFile(androidManifestFile-&gt;getFiles().valueAt(0));</span><br><span class="line">String8 manifestPath(manifestFile-&gt;getPrintableSource());</span><br><span class="line"></span><br><span class="line">// 生成最终编译后的manifest文件</span><br><span class="line"></span><br><span class="line">// 清空原来的数据，重新解析</span><br><span class="line">manifestFile-&gt;clearData();</span><br><span class="line">sp&lt;XMLNode&gt; manifestTree = XMLNode::parse(manifestFile);</span><br><span class="line">if (manifestTree == NULL) &#123;</span><br><span class="line">    return UNKNOWN_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">// 马杀鸡manifest（从bundle读取必要的tag并写到manifestTree，</span><br><span class="line">// 处理package name重载，把各种相对路径的名字改为绝对路径）</span><br><span class="line">err = massageManifest(bundle, manifestTree);</span><br><span class="line">if (err &lt; NO_ERROR) &#123;</span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br><span class="line">// 编译manifest xml文件</span><br><span class="line">err = compileXmlFile(assets, manifestTree, manifestFile, &amp;table);</span><br><span class="line">if (err &lt; NO_ERROR) &#123;</span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="生成最终资源表">生成最终资源表</h3><p>生成我们解压后看到的那个<code>resources.arsc</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (table.hasResources()) &#123;</span><br><span class="line">    <span class="comment">// 生成资源符号表</span></span><br><span class="line">    sp&lt;AaptSymbols&gt; symbols = assets-&gt;getSymbolsFor(String8(<span class="string">"R"</span>));</span><br><span class="line">    err = table.addSymbols(symbols);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成资源索引表resources.arsc</span></span><br><span class="line">    resFile = getResourceFile(assets);</span><br><span class="line">    <span class="keyword">if</span> (resFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: unable to generate entry for resource data\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = table.flatten(bundle, resFile);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可能有一些同学用到过，这就是public.xml里定义的固定资源id</span></span><br><span class="line">    <span class="keyword">if</span> (bundle-&gt;getPublicOutputFile()) &#123;</span><br><span class="line">        FILE* fp = fopen(bundle-&gt;getPublicOutputFile(), <span class="string">"w+"</span>);</span><br><span class="line">        <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR: Unable to open public definitions output file %s: %s\n"</span>,</span><br><span class="line">                    (<span class="keyword">const</span> <span class="keyword">char</span>*)bundle-&gt;getPublicOutputFile(), strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bundle-&gt;getVerbose()) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"  Writing public definitions to %s.\n"</span>, bundle-&gt;getPublicOutputFile());</span><br><span class="line">        &#125;</span><br><span class="line">        table.writePublicDefinitions(String16(assets-&gt;getPackage()), fp);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把资源读回来到最终资源表</span></span><br><span class="line">    finalResTable.add(resFile-&gt;getData(), resFile-&gt;getSize(), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 生成完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而具体的<strong>resources.arsc</strong>生成则在<code>ResourceTable.cpp</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个400行的函数，具体的生成实现在这里</span></span><br><span class="line"><span class="keyword">status_t</span> ResourceTable::flatten(Bundle* bundle, <span class="keyword">const</span> sp&lt;AaptFile&gt;&amp; dest);</span><br></pre></td></tr></table></figure></p>
<p>写入顺序为 索引资源表头部(ResourceTypes:ResTable_header) -&gt; 资源项的值字符串资源池 -&gt; Package数据块。</p>
<h3 id="验证AndroidManifest-xml文件">验证AndroidManifest.xml文件</h3><p>验证manifest各个属性对应值的合法性，即value中能出现的字符，完成后资源正式处理完毕，添加到<code>AaptAssets</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (resFile != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// These resources are now considered to be a part of the included resources, for others to reference.</span></span><br><span class="line">    err = assets-&gt;addIncludedResources(resFile);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; NO_ERROR) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR: Unable to parse generated resources, aborting.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="生成R-java">生成R.java</h3><p>终于，我们已经读取并处理好了需要的一切，是时候开始写文件了，于是又回到了<code>Command.cpp</code>的<code>doPackage</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新那些需要被作为Java符号的符号</span></span><br><span class="line">assets-&gt;applyJavaSymbols();</span><br><span class="line"><span class="keyword">if</span> (SourcePos::hasErrors()) &#123;</span><br><span class="line">    goto bail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要则在这里生成.d依赖文件</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写R.java常量</span></span><br><span class="line"><span class="keyword">if</span> (!assets-&gt;havePrivateSymbols()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (bundle-&gt;getCustomPackage() == NULL) &#123;</span><br><span class="line">        <span class="comment">// 将R.java文件写到恰当的目录下</span></span><br><span class="line">        <span class="comment">// 如 gen/com/foo/app/R.java</span></span><br><span class="line">        err = writeResourceSymbols(bundle, assets, assets-&gt;getPackage(), <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">const</span> String8 <span class="title">customPkg</span><span class="params">(bundle-&gt;getCustomPackage()</span>)</span>;</span><br><span class="line">        err = writeResourceSymbols(bundle, assets, customPkg, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        goto bail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有library文件，则需要把R.java也写到那些libraries的对应class目录下</span></span><br><span class="line">    <span class="comment">// 如 gen/com/foo/app/lib/R.java</span></span><br><span class="line">    <span class="keyword">if</span> (bundle-&gt;getExtraPackages() != NULL) &#123;</span><br><span class="line">        <span class="comment">// 冒号分割</span></span><br><span class="line">        <span class="function">String8 <span class="title">libs</span><span class="params">(bundle-&gt;getExtraPackages()</span>)</span>;</span><br><span class="line">        <span class="keyword">char</span>* packageString = strtok(libs.lockBuffer(libs.length()), <span class="string">":"</span>);</span><br><span class="line">        <span class="keyword">while</span> (packageString != NULL) &#123;</span><br><span class="line">            err = writeResourceSymbols(bundle, assets, String8(packageString), <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                goto bail;</span><br><span class="line">            &#125;</span><br><span class="line">            packageString = strtok(NULL, <span class="string">":"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        libs.unlockBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 有不对外开放的私有符号</span></span><br><span class="line">    err = writeResourceSymbols(bundle, assets, assets-&gt;getPackage(), <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        goto bail;</span><br><span class="line">    &#125;</span><br><span class="line">    err = writeResourceSymbols(bundle, assets, assets-&gt;getSymbolsPrivatePackage(), <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        goto bail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="生成ProGuard文件">生成ProGuard文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err = writeProguardFile(bundle, assets);</span><br><span class="line"><span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">goto</span> bail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而<code>writeProguardFile(bundle, assets)</code>则会调用</p>
<ul>
<li>writeProguardForAndroidManifest(&amp;keep, assets);</li>
<li>writeProguardForLayouts(&amp;keep, assets);</li>
</ul>
<p>将规则更新到ProguardKeepSet中，然后打开proguard文件进行写入（proguard文件由-G命令指定）。</p>
<h3 id="生成apk">生成apk</h3><p>又是一个洋洋洒洒150多行的函数，浓缩一下看看删减版<code>Package.cpp</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">status_t</span> writeAPK(Bundle* bundle, <span class="keyword">const</span> sp&lt;AaptAssets&gt;&amp; assets, <span class="keyword">const</span> String8&amp; outputFile)</span><br><span class="line">&#123;</span><br><span class="line">    ... 计时，初始化状态变量</span><br><span class="line">    <span class="comment">// so，apk就是作为一个zip包创建的</span></span><br><span class="line">    ZipFile* zip = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * 准备Zip文件，如果文件存在，则根据bundle设置的"update"或者"force"进行对应处理</span><br><span class="line">     */</span></span><br><span class="line">    FileType fileType = getFileType(outputFile.<span class="built_in">string</span>());</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备完毕，new ZipFile并打开准备开始写</span></span><br><span class="line">    <span class="keyword">status_t</span> status;</span><br><span class="line">    zip = <span class="keyword">new</span> ZipFile;</span><br><span class="line">    status = zip-&gt;open(outputFile.<span class="built_in">string</span>(), ZipFile::kOpenReadWrite | ZipFile::kOpenCreate);</span><br><span class="line">    <span class="keyword">if</span> (status != NO_ERROR) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR: unable to open '%s' as Zip file for writing\n"</span>,</span><br><span class="line">                outputFile.<span class="built_in">string</span>());</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先把assets丢进去（即第10步我们准备好的东西，包括了assets目录, res目录下values以外的子目录 - 因为values已经被编译到资源索引表了, resources.arsc）</span></span><br><span class="line">    count = processAssets(bundle, zip, assets);</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR: unable to process assets while packaging '%s'\n"</span>,</span><br><span class="line">                outputFile.<span class="built_in">string</span>());</span><br><span class="line">        result = count;</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再把用-j指定的包含classes的jar或者zip包给丢进去</span></span><br><span class="line">    count = processJarFiles(bundle, zip);</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR: unable to process jar files while packaging '%s'\n"</span>,</span><br><span class="line">                outputFile.<span class="built_in">string</span>());</span><br><span class="line">        result = count;</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 走到这儿算是处理成功了</span></span><br><span class="line">    result = NO_ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * 各种标记删除，然后flush zip</span><br><span class="line">     */</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 没东西要你何用，删 */</span></span><br><span class="line">    <span class="keyword">if</span> (zip-&gt;getNumEntries() == <span class="number">0</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果被要求生成依赖文件，则在这里进行，最后写到指定apk输出目录下，如bin/resources.ap_.d</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    assert(result == NO_ERROR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面任何一部出错则goto跑来这儿，删除文件</span></span><br><span class="line">bail:</span><br><span class="line">    <span class="keyword">delete</span> zip;        <span class="comment">// must close before remove in Win32</span></span><br><span class="line">    <span class="keyword">if</span> (result != NO_ERROR) &#123;</span><br><span class="line">        ...删除并unlink</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == NO_ERROR &amp;&amp; bundle-&gt;getVerbose())</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Done!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="第2步：aidl">第2步：aidl</h2><p>处理aidl文件，调用build-tools下的<strong>aidl</strong>可执行文件生成对应的Java文件。该工具的源码位于frameworks\base\tools\aidl。</p>
<p>aidl，全名Android Interface Definition Language，即Android接口定义语言。</p>
<p>输入：aidl后缀的文件。<br>输出：可用于进程通信的C/S端java代码，位于build/generated/source/aidl。</p>
<p>对于这块，推荐Android开发艺术一书，其在跨进程一章对AIDL有比较详尽的描述。其实我们也完全可以自己去实现AIDL生成的那套，这里不进行赘述。</p>
<h2 id="插入_-_RenderScript_&amp;_BuildConfig">插入 - RenderScript &amp; BuildConfig</h2><p>插入一下官网图里没说到的。</p>
<p>编译RenderScript，生成BuildConfig。</p>
<h2 id="第3步：Java源码编译">第3步：Java源码编译</h2><p>我们有了R.java和aidl生成的Java文件，再加上工程的源代码，现在可以使用javac进行正常的java编译生成class文件了。</p>
<p>输入：java source的文件夹（另外还包括了build/generated下的：R.java, aidl生成的java文件，以及BuildConfig.java）。<br>输出：对于gradle编译，可以在build/intermediates/classes里，看到输出的class文件。</p>
<h2 id="第4步：dex">第4步：dex</h2><p>调用dx.bat将所有的class文件（上一步生成的以及第三方库的）转化为classes.dex文件，实际调用的是build-tools\lib\dx.jar，其源码位于libcore\dex（描述Dex文件的格式）及dalvik\dx（包含dx及multidex打包）下。</p>
<p>dx会将class转换为Dalvik字节码，生成常量池，消除冗余数据等。</p>
<p>关于dex，我们下一篇会单独去细说。</p>
<h2 id="第5步：apkbuilder">第5步：apkbuilder</h2><p>打包生成APK文件。旧的apkbuilder脚本已经废弃，现在都已经通过<code>sdklib.jar</code>的<code>ApkBuilder</code>类进行打包了。输入为我们之前生成的包含resources.arcs的.ap_文件，上一步生成的dex文件，以及其他资源如jni、jar包内的资源。</p>
<p>大致步骤为</p>
<ol>
<li>以包含resources.arcs的.ap_文件为基础，new一个ApkBuilder，设置debugMode</li>
<li>apkBuilder.addZipFile(f);</li>
<li>apkBuilder.addSourceFolder(f);</li>
<li>apkBuilder.addResourcesFromJar(f);</li>
<li>apkBuilder.addNativeLibraries(nativeFileList);</li>
<li>apkBuilder.sealApk();    // 关闭apk文件</li>
<li>generateDependencyFile(depFile, inputPaths, outputFile.getAbsolutePath());</li>
</ol>
<h2 id="第6步：Jarsigner">第6步：Jarsigner</h2><p>对apk文件进行签名。APK需要签名才能在设备上进行安装，源码在build\tools\signapk下。</p>
<p>很多时候我们在逆向改完后，会因为没有签名文件导致最后的apk无法正常使用，又细分为本地验证和服务器验证。</p>
<h2 id="第7步：zipalign">第7步：zipalign</h2><p>调用buildtools\zipalign，对签名后的apk文件进行对齐处理，使apk中所有资源文件距离文件起始偏移为4字节的整数倍，从而在通过内存映射访问apk文件时会更快。</p>
<p>这样我们的最终apk就生成完毕了，对gradle是如何在输入gradle assembleDebug之后打包的，可以参见aosp下builder/src/main/java/com/android/builder目录，这样你可以更了解整个流程和每个gradle子任务做了什么（像是BuildConfig是怎么生成的）。</p>
<h1 id="ADB">ADB</h1><p>ADB, 全名 Android Debug Bridge，不仅仅是命令行我们输入的adb xxx命令，<a href="http://developer.android.com/tools/debugging/index.html" target="_blank" rel="external">Debug</a>, <a href="http://developer.android.com/tools/help/monitor.html" target="_blank" rel="external">Device Monitor</a>, <a href="http://developer.android.com/tools/debugging/ddms.html" target="_blank" rel="external">DDMS</a>也都是通过adb来完成设备与我们的开发机器的通信的。</p>
<p>比如当我们在命令行输入<br><img src="http://blog.zhaiyifan.cn/images/android-reverse-2-2.png" alt="adb daemon start"></p>
<p>实际上就会有2个进程被起起来（这就是下文提到的组件中的client和server了）<br><img src="http://blog.zhaiyifan.cn/images/android-reverse-2-1.png" alt="adb ps"></p>
<h2 id="角色">角色</h2><p>ADB扮演了2个角色</p>
<ul>
<li>传输。host和设备间的通信路径。可能是USB，也可能是TCP，但host不需要关心。</li>
<li>服务。通过传输提供服务，在目标设备上执行指定命令。</li>
</ul>
<h2 id="组件">组件</h2><p>ADB中有3个组件</p>
<ul>
<li>adb clients。其实就是那个子命令的可执行文件。比如起了3个adb shell，那就是3个clients。</li>
<li>adb server（<strong>就是那个动不动卡死要restart的东西</strong>）。在开发机器的后台运行，扮演着adb clients和adbd之间的中介，让彼此可以通信。</li>
<li>adb daemon(adbd)。在目标设备上运行的后台进程；由init启动，死掉后会由init重启。</li>
</ul>
<h2 id="server的启动">server的启动</h2><p>当启动adb client的时候，client首先会检查是否有adb server进程在运行中，如果没有则启动进程。</p>
<p>server启动后会绑定到TCP端口5037，并监听来自adb clients的命令。接着server会通过扫描5555到5585之间的奇数端口（被模拟器和物理设备所使用），建立到所有运行中设备实例的连接。一旦server找到adb daemon，就会建立到那个端口的连接（而未开启USB调试的设备则没有adb daemon运行）。</p>
<p>每个设备实例都需要一对连续的端口（这就是为什么刚才只扫描奇数端口），一个偶数端口用于控制连接，一个奇数端口用于adb连接，例如：</p>
<p>模拟器1，控制: 5554<br>模拟器2，adb: 5555<br>Nexus6，控制: 5556<br>Nexus6, adb: 5557<br>…</p>
<p>如上，5554和5555其实都是被同一台设备所使用。</p>
<h2 id="内部实现">内部实现</h2><p>源码位于aosp的system/core/adb目录下，adb和adbd都是从这儿编译出来的。<br>有一部分文件是共用的：adb.c, fdevent.c, transort.c, transport_local.c, tansport_usb.c, service.c, sockets.c, util.c。</p>
<p>举个例子<code>adb.c</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">get_trace_setting</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> ADB_HOST</span></span><br><span class="line">    <span class="keyword">return</span> get_trace_setting_from_env();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> get_trace_setting_from_prop();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过ADB_HOST这个宏编译不同的代码。其他大部分文件则由server和client后缀可以区分。</p>
<p>跟我们的主题息息相关的主要就是install系列的命令了，先看看命令使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">adb install [-lrtsdg] &lt;file&gt;</span><br><span class="line">                             - 把安装包文件push到设备并安装</span><br><span class="line">                               (<span class="operator">-l</span>: forward lock application)</span><br><span class="line">                               (-r: replace existing application)</span><br><span class="line">                               (-t: allow <span class="built_in">test</span> packages)</span><br><span class="line">                               (<span class="operator">-s</span>: install application on sdcard)</span><br><span class="line">                               (<span class="operator">-d</span>: allow version code downgrade)</span><br><span class="line">                               (-g: grant all runtime permissions)</span><br><span class="line"></span><br><span class="line">adb install-multiple [-lrtsdpg] &lt;file...&gt;</span><br><span class="line">                             - 把安装包文件push到设备并安装</span><br><span class="line">                               (<span class="operator">-l</span>: forward lock application)</span><br><span class="line">                               (-r: replace existing application)</span><br><span class="line">                               (-t: allow <span class="built_in">test</span> packages)</span><br><span class="line">                               (<span class="operator">-s</span>: install application on sdcard)</span><br><span class="line">                               (<span class="operator">-d</span>: allow version code downgrade)</span><br><span class="line">                               (-p: partial application install)</span><br><span class="line">                               (-g: grant all runtime permissions)</span><br><span class="line"></span><br><span class="line">adb uninstall [-k] &lt;package&gt; - 从设备上卸载该app</span><br><span class="line">                               (<span class="string">'-k'</span> means keep the data and cache directories)</span><br></pre></td></tr></table></figure></p>
<p>分别对应<code>commandline.cpp</code>下的三个方法:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">install_app</span><span class="params">(transport_type t, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">install_multiple_app</span><span class="params">(transport_type t, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uninstall_app</span><span class="params">(transport_type t, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="adb_install">adb install</h2><p>这里以install命令为例看看adb做了什么:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">install_app</span><span class="params">(transport_type transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc,</span><br><span class="line">                       <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> DATA_DEST = <span class="string">"/data/local/tmp/%s"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> SD_DEST = <span class="string">"/sdcard/tmp/%s"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* where = DATA_DEST;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析-s参数，有则把where改成SD_DEST</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到最后的APK参数，检查是否是APK，不是则提示"Invalid APK file"，然后直接退出</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* apk_file = argv[last_apk];</span><br><span class="line">    <span class="keyword">char</span> apk_dest[PATH_MAX];</span><br><span class="line">    <span class="comment">// apk_dest这样就是最终要拷贝过去的完整路径了，比如"/data/local/tmp/app.apk"</span></span><br><span class="line">    <span class="built_in">snprintf</span>(apk_dest, <span class="keyword">sizeof</span> apk_dest, where, get_basename(apk_file));</span><br><span class="line">    <span class="comment">// 把文件push上去</span></span><br><span class="line">    <span class="keyword">int</span> err = do_sync_push(apk_file, apk_dest, <span class="number">0</span> <span class="comment">/* no show progress */</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup_apk;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        argv[last_apk] = apk_dest; <span class="comment">/* destination name, not source location */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过pm安装</span></span><br><span class="line">    err = pm_command(transport, serial, argc, argv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// push出错了就删了文件</span></span><br><span class="line">cleanup_apk:</span><br><span class="line">    delete_file(transport, serial, apk_dest);</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pm命令</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pm_command</span><span class="params">(transport_type transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial,</span><br><span class="line">                      <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> cmd = <span class="string">"shell:pm"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cmd += <span class="string">" "</span> + escape_arg(*argv++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> send_shell_command(transport, serial, cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="彩蛋">彩蛋</h2><p>还有几个有趣的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跟adb shell差不多，不过颜色很hell</span></span><br><span class="line">adb hell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 笑你妹</span></span><br><span class="line">adb lolcat</span><br></pre></td></tr></table></figure></p>
<h1 id="安装">安装</h1><p>为什么有时候会安装不上apk呢？安装的界面是怎么弹出来的？抱着这些疑问，我们看下去。</p>
<h2 id="安装方式">安装方式</h2><p>大致上有四种</p>
<ol>
<li>系统程序安装，开机时安装，没有安装界面。<br>由开机时启动的<code>PackageManagerService</code>服务完成，会在启动时扫描<code>/system/app</code>, <code>vender/app</code>, <code>/data/app</code>, <code>/data/app-private</code>并安装。</li>
<li>通过Android市场安装，Google Play可以直接安装，其他市场除非root，否则需要自己点击安装（除非定制rom），即和第4种一样。</li>
<li>ADB安装，即上一节说的，也没有安装界面。shell:pm是<code>PackageManagerService</code>的Shell客户端，源码位于<br>/frameworks/base/cmds/pm</li>
</ol>
<p>执行路径大致是从main -&gt; run -&gt; runInstall，挑一段最后的核心代码<code>Pm.java</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runInstall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        VerificationParams verificationParams = <span class="keyword">new</span> VerificationParams(verificationURI,</span><br><span class="line">                originatingURI, referrerURI, VerificationParams.NO_UID, null);</span><br><span class="line">        <span class="comment">// 通过IPackageManager</span></span><br><span class="line">        mPm.installPackageAsUser(apkFilePath, obs.getBinder(), installFlags,</span><br><span class="line">                installerPackageName, verificationParams, abi, userId);</span><br><span class="line"></span><br><span class="line">        synchronized (obs) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!obs.finished) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    obs.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 我们看到的成功失败返回信息</span></span><br><span class="line">            <span class="keyword">if</span> (obs.result == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Success"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">"Failure ["</span></span><br><span class="line">                        + installFailureToString(obs)</span><br><span class="line">                        + <span class="string">"]"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>手机自行通过文件浏览器打开安装，有安装界面。</li>
</ol>
<h2 id="PackageInstaller">PackageInstaller</h2><p>当我们在手机的文件管理器或者notification点击apk文件，就会出现如下图所示（Nexus6 Android 6.0.1）的界面，点击安装按钮即可开始安装，点击取消按钮返回。</p>
<p><img src="http://blog.zhaiyifan.cn/images/android-reverse-2-3.jpg" alt="安装界面"></p>
<p>这个安装界面是Android系统程序PackageInstaller的PackageInstallerActivity，dump一下可以看到如下图信息</p>
<p><img src="http://blog.zhaiyifan.cn/images/android-reverse-2-4.png" alt="PackageInstallerActivity"></p>
<p>当Android系统请求安装apk程序时，会启动这个Activity，并通过Intent读取传来的apk信息，我们来简单看看该Activty onCreate的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageInstallerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnCancelListener</span>, <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿到pm和installer</span></span><br><span class="line">        mPm = getPackageManager();</span><br><span class="line">        mInstaller = mPm.getPackageInstaller();</span><br><span class="line">        mUserManager = (UserManager) getSystemService(Context.USER_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Intent intent = getIntent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查permission，初始化读取mSessionId，mPackageURI，mOriginatingURI，mReferrerURI</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否允许未知来源</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查scheme是否支持，不支持则直接结束</span></span><br><span class="line">        <span class="keyword">final</span> String scheme = mPackageURI.getScheme();</span><br><span class="line">        <span class="keyword">if</span> (scheme != <span class="keyword">null</span> &amp;&amp; !<span class="string">"file"</span>.equals(scheme) &amp;&amp; !<span class="string">"package"</span>.equals(scheme)) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"Unsupported scheme "</span> + scheme);</span><br><span class="line">            setPmResult(PackageManager.INSTALL_FAILED_INVALID_URI);</span><br><span class="line">            mInstallFlowAnalytics.setFlowFinished(</span><br><span class="line">                    InstallFlowAnalytics.RESULT_FAILED_UNSUPPORTED_SCHEME);</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PackageUtil.AppSnippet as;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"package"</span>.equals(mPackageURI.getScheme())) &#123;</span><br><span class="line">            <span class="comment">// package scheme</span></span><br><span class="line">            mInstallFlowAnalytics.setFileUri(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mPkgInfo = mPm.getPackageInfo(mPackageURI.getSchemeSpecificPart(),</span><br><span class="line">                        PackageManager.GET_PERMISSIONS | PackageManager.GET_UNINSTALLED_PACKAGES);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 无法获得PackageInfo，直接退出</span></span><br><span class="line">            <span class="keyword">if</span> (mPkgInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            as = <span class="keyword">new</span> PackageUtil.AppSnippet(mPm.getApplicationLabel(mPkgInfo.applicationInfo),</span><br><span class="line">                    mPm.getApplicationIcon(mPkgInfo.applicationInfo));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// file scheme</span></span><br><span class="line">            mInstallFlowAnalytics.setFileUri(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">final</span> File sourceFile = <span class="keyword">new</span> File(mPackageURI.getPath());</span><br><span class="line">            PackageParser.Package parsed = PackageUtil.getPackageInfo(sourceFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查解析错误，显示错误对话框，直接退出</span></span><br><span class="line">            <span class="keyword">if</span> (parsed == <span class="keyword">null</span>) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 生成PackageInfo</span></span><br><span class="line">            mPkgInfo = PackageParser.generatePackageInfo(parsed, <span class="keyword">null</span>,</span><br><span class="line">                    PackageManager.GET_PERMISSIONS, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">new</span> PackageUserState());</span><br><span class="line">            <span class="comment">// manifest校验</span></span><br><span class="line">            mPkgDigest = parsed.manifestDigest;</span><br><span class="line">            <span class="comment">// 设置apk的程序名和图标</span></span><br><span class="line">            as = PackageUtil.getAppSnippet(<span class="keyword">this</span>, mPkgInfo.applicationInfo, sourceFile);</span><br><span class="line">        &#125;</span><br><span class="line">        mInstallFlowAnalytics.setPackageInfoObtained();</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.install_start);</span><br><span class="line">        mInstallConfirm = findViewById(R.id.install_confirm_panel);</span><br><span class="line">        mInstallConfirm.setVisibility(View.INVISIBLE);</span><br><span class="line">        PackageUtil.initSnippetForNewApp(<span class="keyword">this</span>, as, R.id.app_snippet);</span><br><span class="line"></span><br><span class="line">        mOriginatingUid = getOriginatingUid(intent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果必要则禁止来自未知来源的安装</span></span><br><span class="line">        <span class="keyword">if</span> (!requestFromUnknownSource) &#123;</span><br><span class="line">            <span class="comment">// 进行一些其他的初始化工作</span></span><br><span class="line">            initiateInstall();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 未知来源检查，如果admin禁止则直接提示错误退出。否则显示选项提示用户去设置里修改该设置。</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isManagedProfile = mUserManager.isManagedProfile();</span><br><span class="line">        <span class="keyword">if</span> (!unknownSourcesAllowedByAdmin || (!unknownSourcesAllowedByUser &amp;&amp; isManagedProfile)) &#123;</span><br><span class="line">            showDialogInner(DLG_ADMIN_RESTRICTS_UNKNOWN_SOURCES);</span><br><span class="line">            mInstallFlowAnalytics.setFlowFinished(</span><br><span class="line">                    InstallFlowAnalytics.RESULT_BLOCKED_BY_UNKNOWN_SOURCES_SETTING);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!unknownSourcesAllowedByUser) &#123;</span><br><span class="line">            showDialogInner(DLG_UNKNOWN_SOURCES);</span><br><span class="line">            mInstallFlowAnalytics.setFlowFinished(</span><br><span class="line">                    InstallFlowAnalytics.RESULT_BLOCKED_BY_UNKNOWN_SOURCES_SETTING);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            initiateInstall();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个方法有2个重点函数。</p>
<p>1)  <code>PackageUtil.getPackageInfo(sourceFile)</code></p>
<p><code>getPackageInfo</code>会构造<code>PackageParser</code>，调用<code>Package parseMonolithicPackage(File apkFile, int flags)</code>去解析该apk程序包，然后记录下manifest的校验码。</p>
<p><code>parseMonolithicPackage()</code>对于我们普通的app又会调用<code>parseBaseApk(File apkFile, AssetManager assets, int flags)</code>去做真正的解析并获得Package对象（该类里有很多给split apk用的方法和逻辑）。</p>
<p>解析过程会首先读取AndroidManifest.xml获取程序包名以构建Package对象，然后再处理manifest的其他标签包括四大组件，并把信息全都存到Package对象里面。</p>
<p>2) <code>initiateInstall()</code></p>
<p>首先检测该程序是否已安装，是则弹框提示是否替换程序，否则直接调用<code>startInstallConfirm()</code>，做UI初始化和事件绑定，于是当我们点击安装的时候则会触发onClick下的OK按钮事件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mOkCanInstall || mScrollView == <span class="keyword">null</span>) &#123;</span><br><span class="line">    mInstallFlowAnalytics.setInstallButtonClicked();</span><br><span class="line">    <span class="keyword">if</span> (mSessionId != -<span class="number">1</span>) &#123;</span><br><span class="line">        mInstaller.setPermissionsResult(mSessionId, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We're only confirming permissions, so we don't really know how the</span></span><br><span class="line">        <span class="comment">// story ends; assume success.</span></span><br><span class="line">        mInstallFlowAnalytics.setFlowFinishedWithPackageManagerResult(</span><br><span class="line">                PackageManager.INSTALL_SUCCEEDED);</span><br><span class="line">        finish();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        startInstall();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mScrollView.pageScroll(View.FOCUS_DOWN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对于本地app则会继续走<code>startInstall</code>的逻辑，开启一个新的activity，InstallAppProgress，该activity判断scheme进行不同的安装:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"package"</span>.equals(mPackageURI.getScheme())) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        pm.installExistingPackage(mAppInfo.packageName);</span><br><span class="line">        observer.packageInstalled(mAppInfo.packageName,</span><br><span class="line">                PackageManager.INSTALL_SUCCEEDED);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        observer.packageInstalled(mAppInfo.packageName,</span><br><span class="line">                PackageManager.INSTALL_FAILED_INVALID_APK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pm.installPackageWithVerificationAndEncryption(mPackageURI, observer, installFlags,</span><br><span class="line">            installerPackageName, verificationParams, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>installPackageWithVerificationAndEncryption()</code>其实还是会调用<code>installPackage()</code>，结果和adb安装殊途同归，整个转的路径为<code>installPackage()</code> -&gt; <code>installPackageAsUser()</code>(这儿会先检查调用者是否有安装的权限) -&gt; processPendingInstall() -&gt; installPackageLI():<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">if</span> (replace) &#123;</span><br><span class="line">        <span class="comment">// 替换已有程序</span></span><br><span class="line">        replacePackageLI(pkg, parseFlags, scanFlags | SCAN_REPLACING, args.user,</span><br><span class="line">                installerPackageName, volumeUuid, res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 安装新程序</span></span><br><span class="line">        installNewPackageLI(pkg, parseFlags, scanFlags | SCAN_DELETE_DATA_ON_FAILURES,</span><br><span class="line">                args.user, installerPackageName, volumeUuid, res);</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>无论是替换还是新安装，都会调用<code>scanPackageLI()</code>，然后跑去<code>scanPackageDirtyLI</code>，它会判断是否为系统程序，解析apk程序包，检查依赖库，验证签名，检查sharedUser签名、权限冲突、ContentProvider冲突，更新native库目录文件（检测abi），进行dexopt，杀掉现有进程（仅对覆盖安装的场景）等等，最后调用createDataDirsLI()进行实际安装:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">createDataDirsLI</span><span class="params">(String volumeUuid, String packageName, <span class="keyword">int</span> uid, String seinfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] users = sUserManager.getUserIds();</span><br><span class="line">    <span class="keyword">int</span> res = mInstaller.install(volumeUuid, packageName, uid, uid, seinfo);</span><br><span class="line">    <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> user : users) &#123;</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="number">0</span>) &#123;</span><br><span class="line">            res = mInstaller.createUserData(volumeUuid, packageName,</span><br><span class="line">                    UserHandle.getUid(user, uid), user, seinfo);</span><br><span class="line">            <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>mInstaller</code>为<code>Installer</code>类的实例，但实际安装并不是在java做的，而会通过<code>InstallerConnection</code>把命令使用socket通信发到/system/bin/installd。</p>
<p>在这里第一次call的<code>install()</code>对应命令为<br><code>install uuid name uid gid seinfo</code><br>而第二次call的<code>createUserData</code>则会使用命令<br><code>mkuserdata uuid name uid userId seinfo</code></p>
<p>installd是一个常驻进程，可以在adb shell通过<code>ps | grep installd</code>查看进程信息。源码位于frameworks/native/cmd/installd/installd.cpp下（dexopt也在这里哦），处理install命令的函数为do_install(), do_install调用了<code>Command.cpp</code>的<code>install()</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">install</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *uuid, <span class="keyword">const</span> <span class="keyword">char</span> *pkgname, uid_t uid, gid_t gid, <span class="keyword">const</span> <span class="keyword">char</span> *seinfo)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((uid &lt; AID_SYSTEM) || (gid &lt; AID_SYSTEM)) &#123;</span><br><span class="line">        ALOGE(<span class="string">"invalid uid/gid: %d %d\n"</span>, uid, gid);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> _pkgdir(create_data_user_package_path(uuid, <span class="number">0</span>, pkgname));</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* pkgdir = _pkgdir.c_str();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mkdir(pkgdir, <span class="number">0751</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot create dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (chmod(pkgdir, <span class="number">0751</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot chmod dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selinux_android_setfilecon(pkgdir, pkgname, seinfo, uid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot setfilecon dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chown(pkgdir, uid, gid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot chown dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.0支持多用户后把用户数据和app数据的创建分开了，完成install后，</span></span><br><span class="line"><span class="comment">// java层会调用这儿依次为所有用户创建用户数据，而过去这两个函数是合并的一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">make_user_data</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *uuid, <span class="keyword">const</span> <span class="keyword">char</span> *pkgname, uid_t uid, userid_t userid, <span class="keyword">const</span> <span class="keyword">char</span>* seinfo)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> _pkgdir(create_data_user_package_path(uuid, userid, pkgname));</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* pkgdir = _pkgdir.c_str();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mkdir(pkgdir, <span class="number">0751</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot create dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (chmod(pkgdir, <span class="number">0751</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot chmod dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selinux_android_setfilecon(pkgdir, pkgname, seinfo, uid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot setfilecon dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chown(pkgdir, uid, uid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot chown dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行完毕后，通过socket回传结果，而<code>PackageInstaller</code>根据返回结果做对应处理并显示给用户，至此为止，整个apk安装过程结束。</p>
<h1 id="总结和下期预告">总结和下期预告</h1><p>我们了解了一个android工程是怎么变成apk的，apk是怎么跑到设备上，而最后又是如何安装的。下一次我们来看看dex和odex，art上的elf和oat都是什么，而dexopt又做了什么优化。dex加壳技术大多就是在dex上面做了手脚。</p>
<hr>
<p>参考文献：</p>
<ul>
<li><a href="http://developer.android.com/tools/building/index.html" target="_blank" rel="external">http://developer.android.com/tools/building/index.html</a></li>
<li><a href="http://developer.android.com/sdk/installing/studio-build.html" target="_blank" rel="external">http://developer.android.com/sdk/installing/studio-build.html</a></li>
<li><a href="http://blog.csdn.net/luoshengyang/article/details/8744683" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/8744683</a></li>
<li>《Android软件安全与逆向分析》，作者：丰生强，人民邮电出版社</li>
<li><a href="https://events.linuxfoundation.org/images/stories/pdf/lf_abs12_kobayashi.pdf" target="_blank" rel="external">https://events.linuxfoundation.org/images/stories/pdf/lf_abs12_kobayashi.pdf</a></li>
<li><a href="http://developer.android.com/tools/help/adb.html" target="_blank" rel="external">http://developer.android.com/tools/help/adb.html</a></li>
</ul>
<p>原文：<a href="http://blog.zhaiyifan.cn/2016/02/13/android-reverse-2/">http://blog.zhaiyifan.cn/2016/02/13/android-reverse-2/</a></p>
<p><em>写的途中还不慎看到csdn上某排名500多的百度大V声称自己看老罗的博客并结合参考资料写的整理，实则完全就是照抄书上的，连错误的地方都照抄了，也没有说是人家的，我也是呵呵哒。更有趣的是该作者还在新的文章里提到觉得网上的文章内容重复太多。恩恩，不愧是伟大的百度公司的开发。实在忍不住喷一下。果然还是太年轻。</em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android逆向分析(1) 反编译看看手Q口令红包的实现原理]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/09/android-reverse-1/</url>
      <content type="html"><![CDATA[<p>本系列文章是《Android软件安全与逆向分析》的实践笔记（一些工具的版本和用法已经不同了），同时笔者希望系统性地记录一下逆向方面的文字和想法。犹记得在大学的时候，曾经学过一段时间的逆向工程，现在只记得那时候用OD跳来跳去看汇编代码，找到破解处时兴奋的感觉了。</p>
<blockquote>
<p>逆向工程（又称反向工程），是一种技术过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是，在不能轻易获得必要的生产信息下，直接从成品的分析，推导出产品的设计原理。</p>
<p>逆向工程可能会被误认为是对知识产权的严重侵害，但是在实际应用上，反而可能会保护知识产权所有者。例如在集成电路领域，如果怀疑某公司侵犯知识产权，可以用逆向工程技术来寻找证据。    —— <a href="https://zh.wikipedia.org/wiki/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B" target="_blank"> [ 维基百科 ]</a></p>
</blockquote>
<p>首篇作为开始，先讲讲简单的反编译。反编译通常有几种目的：互相学习、借来用用、嘿嘿（干你，又分为小干干类似微信红包，和大干干改别人的apk帮他上架）。</p>
<p>因为没带kvm回来，mbpr屏幕太小，所以下文环境为windows。</p>
<h1 id="反编译">反编译</h1><p>让我们从实战开始，先实践一下怎么去反编译一个apk，看看某些功能的实现。毕竟没有实践的原理都是耍流氓。<br>这里我们保留互相学习的心态，所以是友善的第一种目的，嘻嘻。</p>
<h2 id="准备">准备</h2><p>工具</p>
<ul>
<li><a href="http://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">Apktool</a></li>
<li><a href="https://github.com/skylot/jadx" target="_blank" rel="external">jadx</a>（新一代反编译大杀器）</li>
</ul>
<p>安装包</p>
<ul>
<li><a href="https://qd.myapp.com/myapp/qqteam/AndroidQQ/mobileqq_android.apk" target="_blank" rel="external">手机QQ 6.2.3</a> (目标就设定为看看口令红包是怎么做的吧)</li>
</ul>
<h3 id="Apktool的使用">Apktool的使用</h3><p>首先确保你安装了java 7或以上，并能直接在命令行调用<code>java</code>。</p>
<ol>
<li>下载 <a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat" target="_blank" rel="external">windows用wrapper脚本</a> (<a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/osx/apktool" target="_blank" rel="external">mac使用这个</a>)。</li>
<li>下载最新的<a href="https://bitbucket.org/iBotPeaches/apktool/downloads" target="_blank" rel="external">apktool</a>。</li>
<li>重命名上面下载的apktool jar文件为<code>apktool.jar</code>。</li>
<li>把apktool.bat和apktool.jar放在同一个目录下，并加入PATH环境变量。</li>
<li>现在你可以直接通过命令行调用<code>apktool</code>并查看使用方式了。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Apktool v2.<span class="number">0.3</span> - a tool <span class="keyword">for</span> reengineering Android apk files</span><br><span class="line">with smali v2.<span class="number">1.0</span> and baksmali v2.<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">usage: apktool</span><br><span class="line"> -advance,--advanced   prints advance information.</span><br><span class="line"> -version,--version    prints the version <span class="keyword">then</span> exits</span><br><span class="line"></span><br><span class="line">usage: apktool <span class="keyword">if</span>|install-framework [options] &lt;framework.apk&gt;</span><br><span class="line"> -p,--frame-path &lt;dir&gt;   Stores framework files into &lt;dir&gt;.</span><br><span class="line"> -t,--tag &lt;tag&gt;          Tag frameworks using &lt;tag&gt;.</span><br><span class="line"></span><br><span class="line">usage: apktool d[ecode] [options] &lt;file_apk&gt;</span><br><span class="line"> <span class="operator">-f</span>,--force              Force delete destination directory.</span><br><span class="line"> -o,--output &lt;dir&gt;       The name of folder that gets written. Default is apk.out</span><br><span class="line"> -p,--frame-path &lt;dir&gt;   Uses framework files located <span class="keyword">in</span> &lt;dir&gt;.</span><br><span class="line"> -r,--no-res             Do not decode resources.</span><br><span class="line"> <span class="operator">-s</span>,--no-src             Do not decode sources.</span><br><span class="line"> -t,--frame-tag &lt;tag&gt;    Uses framework files tagged by &lt;tag&gt;.</span><br><span class="line"></span><br><span class="line">usage: apktool b[uild] [options] &lt;app_path&gt;</span><br><span class="line"> <span class="operator">-f</span>,--force-all          Skip changes detection and build all files.</span><br><span class="line"> -o,--output &lt;dir&gt;       The name of apk that gets written. Default is dist/name.apk</span><br><span class="line"> -p,--frame-path &lt;dir&gt;   Uses framework files located <span class="keyword">in</span> &lt;dir&gt;.</span><br></pre></td></tr></table></figure>
<h3 id="jadx的使用">jadx的使用</h3><ol>
<li>下载<a href="https://github.com/skylot/jadx/releases" target="_blank" rel="external">jadx</a>。</li>
<li>运行gradlew dist编译。</li>
<li><code>jadx\jadx-gui\build\install\jadx-gui\bin</code>下有可运行的gui</li>
<li><code>jadx\jadx-cli\build\install\jadx\bin</code>是命令行程序</li>
<li>可以都加入PATH环境变量，以便直接命令行调用。</li>
</ol>
<h2 id="分析APK文件">分析APK文件</h2><h3 id="First_Try">First Try</h3><p>虽然我们可以用jadx直接打开apk傻瓜式地去查看源代码，但是为了更理解反编译的过程和工作原理，以便以后在碰到一些问题（比如加壳）的时候可以自己解决，这里我们先装逼一下，使用Apktool去进行分析。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\reverse&gt;apktool d -o qq mobileqq_android_6.<span class="number">2.3</span>.apk</span><br><span class="line">I: Using Apktool <span class="number">2.0</span>.<span class="number">3</span> on mobileqq_android_6.<span class="number">2.3</span>.apk</span><br><span class="line">I: Loading resource table...</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> brut.androlib.AndrolibException: Multiple res specs: attr/name</span><br><span class="line">        at brut.androlib.res.data.ResTypeSpec.addResSpec(ResTypeSpec.java:<span class="number">78</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.readEntry(ARSCDecoder.java:<span class="number">248</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.readTableType(ARSCDecoder.java:<span class="number">212</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.readTableTypeSpec(ARSCDecoder.java:<span class="number">154</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.readTablePackage(ARSCDecoder.java:<span class="number">116</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.readTableHeader(ARSCDecoder.java:<span class="number">78</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.decode(ARSCDecoder.java:<span class="number">47</span>)</span><br><span class="line">        at brut.androlib.res.AndrolibResources.getResPackagesFromApk(AndrolibResources.java:<span class="number">544</span>)</span><br><span class="line">        at brut.androlib.res.AndrolibResources.loadMainPkg(AndrolibResources.java:<span class="number">63</span>)</span><br><span class="line">        at brut.androlib.res.AndrolibResources.getResTable(AndrolibResources.java:<span class="number">55</span>)</span><br><span class="line">        at brut.androlib.Androlib.getResTable(Androlib.java:<span class="number">66</span>)</span><br><span class="line">        at brut.androlib.ApkDecoder.setTargetSdkVersion(ApkDecoder.java:<span class="number">198</span>)</span><br><span class="line">        at brut.androlib.ApkDecoder.decode(ApkDecoder.java:<span class="number">96</span>)</span><br><span class="line">        at brut.apktool.Main.cmdDecode(Main.java:<span class="number">165</span>)</span><br><span class="line">        at brut.apktool.Main.main(Main.java:<span class="number">81</span>)</span><br></pre></td></tr></table></figure>
<p>竟然报错了，Multiple res specs: attr/name，在网上找了找资料，应该是腾讯利用Apktool的bug去进行了加壳，除了添加同名id外还做了若干加固，好，你狠，我们下篇文章针对腾讯的壳来分析并修改Apktool，这次先用jadx来试试。</p>
<h3 id="Second_Try">Second Try</h3><p>如果直接用jadx-gui打开QQ的apk，你会发现，卡死了。不错，就是卡死了，因为太大了…</p>
<p>我们打开jadx-gui文件（其实就是个启动的script），加上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> JAVA_OPTS=-server -Xms1024m -Xmx8192m -XX:PermSize=<span class="number">256</span>m -XX:MaxPermSize=<span class="number">1024</span>m</span><br></pre></td></tr></table></figure></p>
<p>就跟我们加速as/idea的原理差不多，多给点内存，这样就能顺利地打开了（可能会需要比较久的时间）。</p>
<p><img src="http://img.blog.csdn.net/20160209202814031" alt="jadx干完手Q后"></p>
<h3 id="字符串大法">字符串大法</h3><p>为了找到我们的目标，红包，我们首先尝试用字符串搜索大法：在Resources -&gt; resources.arsc -&gt; res -&gt; values -&gt; strings.xml找到口令红包对应的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"qb_hbdetail_command_word"</span>&gt;</span>口令红包<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后Crtl+Shift+F进行Text Search，结果…没找到。</p>
<p>我们再使用资源id大法，直接在resources.arsc找到<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7f0a0e5a (2131365466) = string.qb_hbdetail_command_word: &#21475;&#20196;&#32418;&#21253;</span><br></pre></td></tr></table></figure></p>
<p>再搜，好，你狠。。。还是没有。是在下输了。</p>
<h3 id="类/函数名大法">类/函数名大法</h3><p>我们再祭出第二大杀器，类/函数/变量名大法搜索大法。</p>
<p>通常类名符合的范围更小，所以先只使用Class。<br>试试看红包的英语：RedPacket（类名命名所以R和P大写）<br><img src="http://img.blog.csdn.net/20160209205945134" alt="RedPacket Search"><br>OK，我们找到了十几条，开始逐一排查，第一条<code>RedPacketInfo</code>点进去一看就是个包含了各种field的ui用的vo类，跳过，再看下一个，从包名<code>com.tencent.mobileqq.data</code>看上去，似乎有戏，<code>QQWalletRedPacketMsg</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tencent.mobileqq.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> com.tencent.mobileqq.hotpatch.NotVerifyClass;</span><br><span class="line"><span class="keyword">import</span> cooperation.qzone.util.WiFiDash;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> tencent.im.msg.im_msg_body.QQWalletAioBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* compiled from: ProGuard */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQWalletRedPacketMsg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String authkey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> channelId;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> conftype;</span><br><span class="line">    <span class="keyword">public</span> QQWalletTransferMsgElem elem;</span><br><span class="line">    <span class="keyword">public</span> String envelopeName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> envelopeid;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isOpened;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> msgFrom;</span><br><span class="line">    <span class="keyword">public</span> String redPacketId;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> redtype;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resend;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> templateId;</span><br><span class="line"></span><br><span class="line">	...串行化、读写、构建方法等，可以无视。</span><br></pre></td></tr></table></figure></p>
<p>从field名来看，这里还是比较可疑的，猜测<code>redtype</code>是不是描述红包类型的。</p>
<p>我们再次使用关键词<code>redtype</code>进行搜索，这次选择Code，只进行代码内搜索，结果却发现貌似不对，找到相关的字符串是”查看详情”，貌似是描述红包领取状态的。</p>
<p>不放弃，继续抓住<code>QQWalletRedPacketMsg</code>这个类进行搜索，看看是不是有外面包着这个类的Class，搜索QQWalletRedPacketMsg，范围使用Field，排除掉类本身外，只有唯一的结果：<code>MessageForQQWalletMsg</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageForQQWalletMsg</span> <span class="keyword">extends</span> <span class="title">ChatMessage</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 哦哦？COMMAND_REDPACKET？口令红包</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_COMMAND_REDPACKET = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_COMMON_REDPACKET = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_COMMON_THEME_REDPACKET = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_INDIVIDUAL_REDPACKET = <span class="number">2001</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_LUCY_REDPACKET = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_LUCY_THEME_REDPACKET = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_PUBLIC_ACCOUNT_REDPACKET = <span class="number">2002</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_TRANSFER = <span class="number">1</span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p>
<p>我们找到了一个常量字段，目测就是这个描述了是否是口令红包了。在该类搜索此字段还找到<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCommandRedPacketMsg</span><span class="params">(MessageRecord messageRecord)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (messageRecord != <span class="keyword">null</span> &amp;&amp; (messageRecord <span class="keyword">instanceof</span> MessageForQQWalletMsg) &amp;&amp; ((MessageForQQWalletMsg) messageRecord).messageType == MSG_TYPE_COMMAND_REDPACKET) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>果然，我们再接着分别查找<code>MSG_TYPE_COMMAND_REDPACKET</code>和<code>isCommandRedPacketMsg</code>，结果只在<code>TroopMessageManager</code>里面找到了一段没成功反编译的代码中对方法<code>isCommandRedPacketMsg</code>的引用:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">L_0x0100:</span></span><br><span class="line">    <span class="built_in">r2</span> = <span class="keyword">com</span>.tencent.mobileqq.data.MessageForQQWalletMsg.isCommandRedPacketMsg(<span class="built_in">r25</span>)<span class="comment">;</span></span><br><span class="line">    if (<span class="built_in">r2</span> == <span class="number">0</span>) goto L_0x011e<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>这里如果是口令红包会继续走下去，而如果不是则会跳到L_0x011e。</p>
<p>而从类的名字来看，<code>TroopMessageManager</code>应该是指<code>群消息管理者</code>，应该没错，毕竟红包也是群消息的一种。</p>
<p>于是我们只能耐心地看下去这段神奇的充满goto的代码。晕着看完后大概看到就是各种逻辑判断和调用<code>MsgProxyUtils.java</code>去处理消息处理逻辑和缓存。然后就没了…好，你屌，是在下输了。我再试试别的。</p>
<h3 id="常量大法">常量大法</h3><p>常量大法其实也可以算是字符串搜索的一种，只是不去搜索xml里的，而是使用中文转化为unicode后的字符串去进行查找。自行搜索Unicode编码转化可以找到online convertor。</p>
<p>口令红包对应的是”\u53e3\u4ee4\u7ea2\u5305”：</p>
<p><img src="http://img.blog.csdn.net/20160209224453176" alt="\u53e3\u4ee4\u7ea2\u5305搜索"></p>
<p>找到2个类共3处代码引用。</p>
<p>最后那个类的起名有点耐人寻味，<code>PasswdRedBagManager</code>，密码红包管理器，有点意思：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    ((TroopTipsMsgMgr) <span class="keyword">this</span>.f2203a.getManager(<span class="number">80</span>)).a(str, <span class="string">"\u533f\u540d\u4e0d\u80fd\u62a2\u53e3\u4ee4\u7ea2\u5305\u54e6"</span>, NetConnInfoCenter.getServerTime(), BaseConstants.DEFAULT_QUICK_HEARTBEAT_TIMEOUT, f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这串Unicode转换成中文后是”匿名不能抢口令红包哦”，原来还有这种逻辑，产品经理你真是够了。</p>
<p>这里我们重新从该类的上面看下来，大致扫一扫，发现onDestroy下面有一个方法打的log很神奇:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">long</span>[] m883a(SessionInfo sessionInfo, String str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (QLog.isColorLevel()) &#123;</span><br><span class="line">        QLog.d(f2197a, (<span class="keyword">int</span>) h, <span class="string">"openPasswdRedBagByPassword, passwd = "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span>[] jArr = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (sessionInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> jArr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(str)) &#123;</span><br><span class="line">        <span class="keyword">return</span> jArr;</span><br><span class="line">    &#125;</span><br><span class="line">    c();</span><br><span class="line">    List&lt;String&gt; list = (List) <span class="keyword">this</span>.f2206a.get(str);</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> jArr;</span><br><span class="line">    &#125;</span><br><span class="line">    PasswdRedBagInfo passwdRedBagInfo;</span><br><span class="line">    String str2 = a(sessionInfo.a) + <span class="string">"_"</span> + sessionInfo.f1757a;</span><br><span class="line">    <span class="keyword">for</span> (String str3 : list) &#123;</span><br><span class="line">        HashMap hashMap = (HashMap) <span class="keyword">this</span>.f2209b.get(str3);</span><br><span class="line">        <span class="keyword">if</span> (hashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            passwdRedBagInfo = (PasswdRedBagInfo) hashMap.get(str2);</span><br><span class="line">            <span class="keyword">if</span> (!(passwdRedBagInfo == <span class="keyword">null</span> || a(str3))) &#123;</span><br><span class="line">                jArr[g] = passwdRedBagInfo.a.uint64_creator_uin.get();</span><br><span class="line">                <span class="keyword">if</span> (!b(str3)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!c(str3)) &#123;</span><br><span class="line">                        hashMap.put(str2, passwdRedBagInfo);</span><br><span class="line">                        jArr[f] = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    jArr[f] = <span class="number">3</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    jArr[f] = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    passwdRedBagInfo = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (passwdRedBagInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> jArr;</span><br><span class="line">    &#125;</span><br><span class="line">    b(sessionInfo.a, sessionInfo.f1757a, passwdRedBagInfo.a.string_redbag_id.get().toStringUtf8());</span><br><span class="line">    a(sessionInfo, passwdRedBagInfo);</span><br><span class="line">    <span class="keyword">return</span> jArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>isColorLevel目测是某种debug用的tag，可能某些环境下部分用户会打开，而从log结合我们平时打log习惯来看，这个方法应该就叫<code>openPasswdRedBagByPassword</code>了，第二个参数就是<code>password</code>。终于找到了。看一下逻辑大致是从外面load进来所有红包信息到本类的各种hashmap和list（有一个tag，只会加载第一次，本类多个方法都会调用这个方法），然后根据password从里面找到对应<code>passwdRedBagInfo</code>，设置result tag，然后调用了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b(sessionInfo.a, sessionInfo.f1757a, passwdRedBagInfo.a.string_redbag_id.get().toStringUtf8());</span><br><span class="line">a(sessionInfo, passwdRedBagInfo);</span><br></pre></td></tr></table></figure></p>
<p>我们先不急看这两个方法是做什么的。再往下看下一个方法，直接就有:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">long</span>[] b(SessionInfo sessionInfo, String str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (QLog.isColorLevel()) &#123;</span><br><span class="line">        QLog.d(f2197a, (<span class="keyword">int</span>) h, <span class="string">"openPasswdRedBagById, id = "</span> + str);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p><code>openPasswdRedBagById</code>用id打开红包，猜测该id就是我们最早看到的结构里的<code>redPacketId</code>字段。</p>
<p>而该方法同样调用了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b(sessionInfo.a, sessionInfo.f1757a, str);</span><br><span class="line">a(sessionInfo, passwdRedBagInfo);</span><br></pre></td></tr></table></figure></p>
<p>看看这两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(SessionInfo sessionInfo, PasswdRedBagInfo passwdRedBagInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sessionInfo != <span class="keyword">null</span> &amp;&amp; passwdRedBagInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object obj = (sessionInfo.a == <span class="number">0</span> || sessionInfo.a == h || sessionInfo.a == Action.ACTION_REGISTNEWACCOUNT_COMMITSMS || sessionInfo.a == Action.ACTION_LOGIN) ? g : <span class="keyword">null</span>;</span><br><span class="line">        String str = sessionInfo.f1757a;</span><br><span class="line">        String valueOf = String.valueOf(passwdRedBagInfo.a.uint64_creator_uin.get());</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">            str = valueOf.equals(<span class="keyword">this</span>.f2213d) ? sessionInfo.f1757a : <span class="keyword">this</span>.f2213d;</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject a = QQWalletMsgItemBuilder.a(<span class="keyword">this</span>.f2203a, sessionInfo, passwdRedBagInfo.a.string_redbag_id.get().toStringUtf8(), passwdRedBagInfo.a.string_authkey.get().toStringUtf8(), str, <span class="string">"appid#1344242394|bargainor_id#1000030201|channel#msg"</span>, <span class="string">"graphb"</span>, <span class="keyword">null</span>);</span><br><span class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">        bundle.putString(<span class="string">"json"</span>, a.toString());</span><br><span class="line">        bundle.putString(<span class="string">"callbackSn"</span>, jbi.a);</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>.f2200a, PayBridgeActivity.class);</span><br><span class="line">        intent.putExtras(bundle);</span><br><span class="line">        intent.addFlags(<span class="number">268435456</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"pay_requestcode"</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">this</span>.f2200a.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(<span class="keyword">int</span> i, String str, String str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(str2)) &#123;</span><br><span class="line">        HashMap hashMap = (HashMap) <span class="keyword">this</span>.f2209b.get(str2);</span><br><span class="line">        <span class="keyword">if</span> (hashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PasswdRedBagInfo passwdRedBagInfo = (PasswdRedBagInfo) hashMap.get(a(i) + <span class="string">"_"</span> + str);</span><br><span class="line">            <span class="keyword">if</span> (passwdRedBagInfo != <span class="keyword">null</span> &amp;&amp; !passwdRedBagInfo.f4810a) &#123;</span><br><span class="line">                passwdRedBagInfo.f4810a = <span class="keyword">true</span>;</span><br><span class="line">                ThreadManager.a(<span class="keyword">new</span> kmr(<span class="keyword">this</span>, str2), h, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>发现第一个方法似乎就直接发请求了，看来只要调用到这里，就是可以领红包了。那最初又是如何来这里的呢？我们搜索对<code>PasswdRedBagManager</code>内这两个方法的引用找到<code>BaseChatPie.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">public</span> PasswdRedBagManager f25190a;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnterForSend</span> <span class="keyword">implements</span> <span class="title">OnKeyListener</span>, <span class="title">OnEditorActionListener</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 这里从方法名判断是每次输入点击发送后调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onEditorAction</span><span class="params">(TextView textView, <span class="keyword">int</span> i, KeyEvent keyEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i != BaseChatPie.dr) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String obj = <span class="keyword">this</span>.a.f25220a.getText().toString();</span><br><span class="line">        <span class="keyword">if</span> (obj.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用了外部类的下述方法</span></span><br><span class="line">            <span class="keyword">long</span>[] a = <span class="keyword">this</span>.a.a(obj);</span><br><span class="line">            <span class="comment">// 再进行消息发送</span></span><br><span class="line">            SendMsgParams sendMsgParams = <span class="keyword">new</span> SendMsgParams();</span><br><span class="line">            sendMsgParams.b = <span class="keyword">this</span>.a.dL;</span><br><span class="line">            sendMsgParams.a = <span class="keyword">this</span>.a.dJ;</span><br><span class="line">            sendMsgParams.c = <span class="keyword">this</span>.a.dN;</span><br><span class="line">            sendMsgParams.f26863c = <span class="keyword">this</span>.a.dL;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里调用了那2个openPasswdRedBagxxx方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">long</span>[] m5613a(String str) &#123;</span><br><span class="line">    <span class="keyword">long</span>[] jArr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 非匿名模式才会继续尝试匹配口令红包，原来里里外外都做了判断</span></span><br><span class="line">    <span class="keyword">if</span> (!AnonymousChatHelper.a().a(<span class="keyword">this</span>.f25174a.a)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(<span class="keyword">this</span>.f25269d) || !str.equals(<span class="keyword">this</span>.f25278e)) &#123;</span><br><span class="line">            <span class="comment">// 使用密码打开</span></span><br><span class="line">            jArr = <span class="keyword">this</span>.f25190a.a(<span class="keyword">this</span>.f25174a, str);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 使用redPacketId直接打开</span></span><br><span class="line">            jArr = <span class="keyword">this</span>.f25190a.b(<span class="keyword">this</span>.f25174a, <span class="keyword">this</span>.f25269d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无意义的打log打点啥的，华丽丽地无视吧</span></span><br><span class="line">        <span class="keyword">if</span> (jArr != <span class="keyword">null</span> &amp;&amp; jArr[s] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.f25269d = QunUppUploadTask.QunUppAppId;</span><br><span class="line">            <span class="keyword">this</span>.f25278e = QunUppUploadTask.QunUppAppId;</span><br><span class="line">            <span class="keyword">this</span>.f25228a.sendEmptyMessage(dz);</span><br><span class="line">            <span class="keyword">if</span> (QLog.isColorLevel()) &#123;</span><br><span class="line">                QLog.d(PasswdRedBagManager.a, u, <span class="string">"passwdredbags result[0]="</span> + jArr[s] + <span class="string">",result[1]="</span> + jArr[t] + <span class="string">",send str="</span> + str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QLog.isColorLevel()) &#123;</span><br><span class="line">        QLog.d(PasswdRedBagManager.a, u, <span class="string">"current is in Anonymous, dont search passwdredbags"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可见每次我们输入消息发送时，都发生了判断，会去查询是不是红包口令，如果是则直接发请求拿红包然后继续，否则直接当做普通消息继续发送。所以如果想要做自动抢红包的话，其实只要直接在收到消息时，调用<code>PasswdRedBagManager</code>的open方法即可，连模拟UI、生成请求、发送消息都不用了，我们再也不用昧着良心说口令了。顺便我们还看到了手机QQ确实喜欢用Activity，这里的红包弹框也是一个单独的Activity，而且请求是发送到手Q红包那边去的，看来还分业务线。</p>
<p>到此为止我们的目的告一段落，其实继续下去，还可以尝试dump当前Activity，用Activity名字去查找，或者用hierarchy view看看view id试试。</p>
<h1 id="总结和下期预告">总结和下期预告</h1><p>经过上文的折腾，我们成功反编译了手机QQ，并追溯到手机QQ红包的数据结构和判断流程。期间经历过数次无用功，但逆向工程正是这么一回事，尤其是静态分析，如果不及时找其他的路，而一路钻牛角尖从一个线索一路去看，很可能会越陷越深，本文的跟踪流程正是不断在坑还小的时候钻出来，然后去找其他的路径，最后才快速地找到了想看的东西。</p>
<p>至于下一期，可能是smali，可能是怎么修改Apktool，也可能是jadx的源码分析，看心情吧，哈哈。</p>
<hr>
<p>参考资料：<br><a href="http://www.mak-blog.com/tencent-shell-crack.html" target="_blank" rel="external">http://www.mak-blog.com/tencent-shell-crack.html</a><br><a href="http://www.kanxue.com/bbs/showthread.php?p=1390763&amp;langid=3" target="_blank" rel="external">http://www.kanxue.com/bbs/showthread.php?p=1390763&amp;langid=3</a></p>
<p>原文：<a href="http://blog.zhaiyifan.cn/2016/02/09/android-reverse-1/">http://blog.zhaiyifan.cn/2016/02/09/android-reverse-1/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android安全学习(1) - Android的安全设计]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/08/android-security-1/</url>
      <content type="html"><![CDATA[<p>WORKING</p>
<h1 id="前言">前言</h1><p>本系列将会</p>
<h1 id="了解Android架构">了解Android架构</h1><p>Android系统经常会被理解为”运行在Linux上的Java”，但这种说法并不能体现出Android平台的复杂性。为了对</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发学前端之Vue.js(1) Hello World]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/06/learn-vue-js-1/</url>
      <content type="html"><![CDATA[<p>大家好，我是doge。噢不，我是markzhai。</p>
<p>其实一直对前端很好奇，在学校念书的时候，曾在各种项目里用过诸如PHP/RoR/Spring等Web框架搭过大小网站，但一方面很烦写css，另一方面js也就是写写很简单的东西（比如ajax和jquery刷新刷新东西），更多的还是在写业务逻辑，所以这两年看着推陈出新的前端技术和酷炫的效果，有一种自己从没学过的感觉。</p>
<p>在React Native出现后，更加让我觉得有必要再系统性学习一下js的新技术。而我的良师益友 - 大头鬼则屡次安利我Vue.js(发音 /vjuː/，类似 view)，同时阿里内部在推的weex也是基于Vue.js做的一套跨平台方案。于是决定，不管以后能不能用上weex，先学习一下Vue.js吧。</p>
<p>本系列的源码都在：<a href="https://github.com/markzhai/HelloVue" target="_blank" rel="external">HelloVue</a>，虽然其实大部分是官网上的例子，哈哈，不要鄙视我。</p>
<p>本系列的受众是对移动开发和基本的HTML知识有一定了解的童鞋。</p>
<h1 id="例子">例子</h1><p>简单来说，html描述页面信息，css是style，而JavaScript则操作页面上的element。当然，因为我们要学的是Vue.js，所以不会接触到css。</p>
<p>先看<code>hello-world.html</code>的html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-model</span>=<span class="value">"newTodo"</span> <span class="attribute">v-on:keyup.enter</span>=<span class="value">"addTodo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">v-for</span>=<span class="value">"todo in todos"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">span</span>&gt;</span>&#123;&#123; todo.text &#125;&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span> <span class="attribute">v-on:click</span>=<span class="value">"removeTodo($index)"</span>&gt;</span>X<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>除了熟悉的各个html标签外，我们看到了<code></code>, <code>v-model</code>, <code>v-on:keyup.enter</code>等东西，这些便是Vue.js的了。<br>顾名思义猜测一下，<code>v-model</code>应该是data-binding， <code>v-on:keyup.enter</code>应该是键盘按下回车键时触发的函数，<code>v-for</code>估计是遍历，<code></code>则是注入model的字符串，<code>v-on:click</code>嘛肯定是点击事件的函数啦。</p>
<p>然后我们来看看JavaScript部分：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="xml"><span class="comment">&lt;!-- 嗯...作用域？就是html里的id --&gt;</span></span><br><span class="line">  el: '#app',</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- data，包含了一个object和一个list？ --&gt;</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    newTodo: '',</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; text: 'Add some todos' &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 那些触发的函数就在这里啦 --&gt;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">&lt;!-- addToDo从newToDo拿到trim后的字符串然后加到todo，清空input框 --&gt;</span></span><br><span class="line">    addTodo: function () &#123;</span><br><span class="line">      var text = this.newTodo.trim()</span><br><span class="line">      if (text) &#123;</span><br><span class="line">        this.todos.push(&#123; text: text &#125;)</span><br><span class="line">        this.newTodo = ''</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">&lt;!-- 根据传入的index删除todo列表的对应项，为啥Java的for不能直接拿到当前index呢 --&gt;</span></span><br><span class="line">    removeTodo: function (index) &#123;</span><br><span class="line">      this.todos.splice(index, 1)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span></span><br></pre></td></tr></table></figure></p>
<h1 id="水水的结束前">水水的结束前</h1><p>是不是感受到js的简洁了…然后似乎也都能看懂！还有data-binding哦，还是双向的，想想我们输入的内容自动被设置到了newToDo，而更新后的todos则自动刷新了页面上的列表。而Android上如果想做到这个…我们得写多少东西。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Deep Link是什么]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/</url>
      <content type="html"><![CDATA[<p>今天在看Google关于Android Studio 2.0的视频的时候，提到了一个feature：支持Deep Link提示。笔者在去年上半年时候略微接触了一下，之后8月又看到全家桶出了一个山寨版叫AppLink。但是似乎在国内不太看到有这方面的介绍，在微博搜了一下，也没有正式介绍Deep Link的文章，所以产生了写本文的念头。</p>
<h1 id="Deep_Link是什么">Deep Link是什么</h1><p>Deep Link，又叫deep linking，中文翻译作深层链接。全家桶搜索的话你会发现第一个结果是AppLink。呵呵。</p>
<p>说回正题。</p>
<p>简单地从用户体验来讲，Deep Link，就是可以让你在手机的浏览器/Google Search上点击搜索的结果，便能直接跳转到已安装的应用中的某一个页面的技术。如果你想体验的话，可以在Android 4.1以上设备安装IMDB，然后在Google上搜索一部IMDB的影片，你就会发现点击后直接跳转到了App里的该电影介绍页面。</p>
<p>当然在这简简单单的操作背后，却隐藏着很多工作。</p>
<p>先让我们看看现在移动端的搜索体验问题：</p>
<h2 id="搜索">搜索</h2><p>就因为我司没有做Web版的页面，所以搜索引擎就没法找到我们提供的内容。</p>
<p>搜索结果是不是可以做得更好呢。对于爬虫，在我们的印象中都是去爬网站的数据。但是现在作为一个巨大内容载体的移动平台却被忽略了，”似乎”只能自己提供一个H5版本去让搜索引擎爬数据索引？就像把自己的网站加入robots协议一样，app是不是也能直接这么做呢？</p>
<h2 id="排名">排名</h2><p>我的App这么火爆，为什么搜索出来的结果都是别人的引用？！</p>
<p>本科在学校时候做过<a href="https://zh.wikipedia.org/zh-sg/PageRank" target="_blank" rel="external">PageRank</a>的实践，简单来说就是一个带权的树形有向图，用通俗的话来讲，大V关注了你，可以让你的价值提升。而在App的世界里，我们也经常会体验到在应用之间跳转的体验（尽管有些应用时灵时不灵的），这种跳转难道不也能拿来作为PageRank的有向边吗？</p>
<p>做个例子来说（绝不是广告）：手Q、QQ空间、QQ音乐都在应用里的某页面引用了腾讯新闻的某一条新闻的页面，而手Q、QQ空间、QQ音乐这三个应用的该页面本身在算法里排名就很靠前，那么我们就认为腾讯新闻的该页面是有价值的，在相同结果的页面中应该排在更前面。</p>
<p>搜索引擎应该对移动端的app也支持排名和链接关系解析。</p>
<h2 id="移动化">移动化</h2><p>每次在百度搜好吃的，搜到点评的结果后，怎么就不能直接跳到app里呢。</p>
<p>我们知道，现在从全家桶、Google搜索关于我们自己app的内容，往往只能搜到一些相关介绍和下载的链接，然后我们就中断了。而在Web世界，搜索后我们可以直接打开网页查看内容，相比起来体验实在是差了太多。难道我们就不能直接点击跳到手机上已经安装的app上吗？或者干脆直接跳到某个页面？</p>
<p>其实这种体验也是一种个性化搜索：个性化这个词比较宽泛，早期来说，搜索引擎会根据IP所在地区的不同返回有差别的结果。后来在引入账号系统后，会让用户可以设置语言和地域，恩…还有safe search，你懂的，会让我们看不到一些日文的内容。<br><img src="http://blog.zhaiyifan.cn/images/deeplink-2.png" alt="deeplink-2"><br><img src="http://blog.zhaiyifan.cn/images/deeplink-3.png" alt="deeplink-3"></p>
<p>而对移动端来说，个性化则是移动化，不同于返回网页，搜索引擎会返回支持Deep Link的应用内部页面的链接，比如我们找一部电影，可以直接跳到IMDB应用里这部电影的详情页面，体验是不是比看网页好多了呢（明明我安装了应用，为什么要让我看H5呢）。</p>
<h2 id="After_Deep_Linked">After Deep Linked</h2><p>而Deep Link则会解决以上的问题，搜索引擎可以直接用爬虫检索App的内容，对App也列入PageRank排名，安装了App的设备点击后，则可以直接跳到应用内的对应页面！！Cool！</p>
<p>既然这么酷炫，那我们要怎么才能让自家的应用支持Deep Link呢？</p>
<h1 id="使用">使用</h1><p>乍一看，Deep Link不就是scheme么？不错，或者我们该说，目前app的scheme，就是Deep Link的一种雏形（仅仅是跳转，且没有标准化的体验，见下文”首次点击自由”体验）。且有的app处理scheme并不是各个activity去注册自己的path，而会去通过一个中心activity去集成处理比如鉴权、解出各种参数，并美其名曰Navigator。</p>
<p>废话不多说了，看看正确的姿势吧。下文以Android接入为例，iOS可以查看<a href="https://developers.google.com/app-indexing/ios/app" target="_blank" rel="external">App Indexing on iOS9</a></p>
<h2 id="支持Deeplink">支持Deeplink</h2><p>参考内容：<br><a href="http://search-codelabs.appspot.com/codelabs/android-deep-linking#1" target="_blank" rel="external">启用指向你app的Deep Linking</a>。<br><a href="https://developers.google.com/app-indexing/app-only" target="_blank" rel="external">为纯app内容创建索引</a></p>
<p>以Google给的demo为例：<a href="https://github.com/google/search-samples.git" target="_blank" rel="external">search-samples</a></p>
<p>我们需要添加Intent Filter到manifest：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">"com.recipe_app.client.RecipeActivity"</span></span><br><span class="line">          <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span> <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.BROWSABLE"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 接受以"http://recipe-app.com/recipe"开头的URI --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:scheme</span>=<span class="value">"http"</span></span><br><span class="line">              <span class="attribute">android:host</span>=<span class="value">"recipe-app.com"</span></span><br><span class="line">              <span class="attribute">android:pathPrefix</span>=<span class="value">"/recipe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后为该intent filter添加处理代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_recipe);</span><br><span class="line">    onNewIntent(getIntent());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 检验该intent是否是deep link的intent。如果是则从intent数据从接触recipe的URI并调用</span><br><span class="line"> * showRecipe()来展示菜谱。</span><br><span class="line"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    String action = intent.getAction();</span><br><span class="line">    String data = intent.getDataString();</span><br><span class="line">    <span class="keyword">if</span> (Intent.ACTION_VIEW.equals(action) &amp;&amp; data != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String recipeId = data.substring(data.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">        Uri contentUri = RecipeContentProvider.CONTENT_URI.buildUpon()</span><br><span class="line">                .appendPath(recipeId).build();</span><br><span class="line">        showRecipe(contentUri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<pre><code>重要：通过deep link打开的<span class="keyword">app</span>必须提供给用户<span class="string">"首次点击自由(First Click Free)"</span>的体验。
这也就是说在第一次访问你的<span class="keyword">app</span>的时候，用户必须能直接进入相关页面，而不是被插播式广告比如
提示、登陆、闪屏等打断。你可以提醒用户在该次点击之后再进行动作。

即便该应用未曾被启动过或者用户未曾登陆，也必须提供这种体验。
</code></pre><p>常见问题：<a href="http://stackoverflow.com/a/25997627" target="_blank" rel="external">如何避免通过deep link打开多个应用实例</a></p>
<h2 id="测试该intent_filter">测试该intent filter</h2><p>上述demo运行后，在adb输入以下命令来trigger一个deep link:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start <span class="operator">-a</span> android.intent.action.VIEW \</span><br><span class="line"><span class="operator">-d</span> <span class="string">"http://recipe-app.com/recipe/pierogi-poutine"</span> com.recipe_app</span><br></pre></td></tr></table></figure></p>
<p>可以再替换以上url来打开其他菜谱<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://recipe-app.com/recipe/grilled-potato-salad</span><br><span class="line">http://recipe-app.com/recipe/haloumi-salad</span><br><span class="line">http://recipe-app.com/recipe/wedge-salad</span><br></pre></td></tr></table></figure></p>
<p>常见问题：</p>
<ul>
<li><a href="http://stackoverflow.com/a/24850504" target="_blank" rel="external">为什么提示”Error: Activity not started, unable to resolve Intent”?</a></li>
<li><a href="https://support.google.com/googleplay/android-developer/answer/6041489" target="_blank" rel="external">怎么让我的deep link在搜索结果中出现</a></li>
</ul>
<h2 id="获得来源">获得来源</h2><p>从Google的应用中点击了指向你的应用的链接，你的应用的那个页面将会收到特定的intent extra：</p>
<pre><code>应用引用站点 — android-<span class="string">app:</span><span class="comment">//{package_id}/{scheme}/{host_path}</span>
Web 引用站点 — <span class="string">https:</span><span class="comment">//{host_path}</span>
</code></pre><p>比如从Google应用点击到你的应用，则会有<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android-<span class="string">app:</span><span class="comment">//com.google.android.googlequicksearchbox/https/www.google.com</span></span><br></pre></td></tr></table></figure></p>
<p>App能在页面启动时获得引用站点的信息，具体如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.android.gms.appindexing.AndroidAppUri;</span><br><span class="line"><span class="keyword">import</span> android.net.ParseException;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 返回启动该Activity的引用者. */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">getReferrer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getReferrer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getReferrerCompatible();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 在低于SDK 22版本时使用该方法获得引用者 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Uri <span class="title">getReferrerCompatible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">this</span>.getIntent();</span><br><span class="line">        Uri referrerUri = intent.getParcelableExtra(Intent.EXTRA_REFERRER);</span><br><span class="line">        <span class="keyword">if</span> (referrerUri != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> referrerUri;</span><br><span class="line">        &#125;</span><br><span class="line">        String referrer = intent.getStringExtra(<span class="string">"android.intent.extra.REFERRER_NAME"</span>);</span><br><span class="line">        <span class="keyword">if</span> (referrer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 尝试parse引用者URL</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Uri.parse(referrer);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        Intent intent = <span class="keyword">this</span>.getIntent();</span><br><span class="line">        Uri referrerUri = <span class="keyword">this</span>.getReferrer();</span><br><span class="line">        <span class="keyword">if</span> (referrerUri != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (referrerUri.getScheme().equals(<span class="string">"http"</span>) || referrerUri.getScheme().equals(<span class="string">"https"</span>)) &#123;</span><br><span class="line">                <span class="comment">// App从浏览器打开</span></span><br><span class="line">                String host = referrerUri.getHost();</span><br><span class="line">                <span class="comment">// host会包含host路径 (比如www.google.com)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 在这里增加分析的代码以记录从Web搜索点击进来的流量</span></span><br><span class="line"></span><br><span class="line">                ...</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (referrerUri.getScheme().equals(<span class="string">"android-app"</span>)) &#123;</span><br><span class="line">                <span class="comment">// App从另一个app被打开</span></span><br><span class="line">                AndroidAppUri appUri = AndroidAppUri.newAndroidAppUri(referrerUri);</span><br><span class="line">                String referrerPackage = appUri.getPackageName();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"com.google.android.googlequicksearchbox"</span>.equals(referrerPackage)) &#123;</span><br><span class="line">                    <span class="comment">// App从Google app被打开</span></span><br><span class="line">                    String host = appUri.getDeepLinkUri().getHost();</span><br><span class="line">                    <span class="comment">// host会包含host路径 (比如www.google.com)</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 在这里增加分析的代码以记录从Google app点击进来的流量</span></span><br><span class="line"></span><br><span class="line">                    ...</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"com.google.appcrawler"</span>.equals(referrerPackage)) &#123;</span><br><span class="line">                    <span class="comment">// Google的爬虫来着，别把这个算作app使用了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="商业价值">商业价值</h1><p>对搜索引擎提供上来说：广告，你懂的。百毒会不会把一些钓鱼app的页面放到最前面呢？呵呵。</p>
<p>对App来说则一方面可以解决目前移动应用的孤岛局面，另一方面可以通过搜索分析报告来了解通过搜索引擎导流的点击次数、查询次数，以及最受欢迎的页面。</p>
<p>各全家桶app企业也能就此机会更加紧密地抱团在一起，由大公司投资的各创业公司则能就此机会表忠心或者抱大腿。</p>
<h1 id="最后">最后</h1><p>上文大多是从Google的Deeplink展开的，如果你的应用主打本土市场，且考虑到目前Google仍然未回归，可以参考全家桶的Applink，大都是雷同的，只需要换一下前缀罢了（我猜是这样的 哈哈)。</p>
<p>目前App本身和搜索还是没有结合起来，国内只有豌豆荚和全家桶开始了这种体验的尝试，App的体验仍然是一个个信息孤岛，远不如在Web上搜到哪儿去哪儿，希望Deep Link的逐渐推广和应用，可以帮助app们达到和网页一样的体验。</p>
<p>以后App也能和网页一样，不需要自己提供搜索功能，让搜索引擎去做一切索引，直接在手机浏览器里打开app页面。甚至可以像现在使用site指定搜索目标一样，去指定要搜索的app。</p>
<p>试想我能直接社工搜索到女神的信息，然后直接跳到微博app里的feed详情页。另外，现在这种听一首歌要装3个app还要一个个去搜想听的到底在哪家的情况是不是也能解决呢？</p>
<hr>
<p>原文：<a href="http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/">http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发模式 S2 EP1 - Snackbar, 合适的打断]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/03/AndroidDevelopmentPatternsS2EP1/</url>
      <content type="html"><![CDATA[<p>视频见：<a href="https://www.youtube.com/watch?v=puhfMX8jb9c" target="_blank" rel="external">https://www.youtube.com/watch?v=puhfMX8jb9c</a><br>视频很短，但是这个主题还是很有价值的，能帮助我们开发者理解应用设计的一些模式规范。</p>
<p>在我看来，作为一个前端开发者，我们不仅仅是去执行产品设计下发下来的东西，更多的是要去思考什么样的设计/交互是好的，什么样的需求是合理的，成为一个有独立思考的开发者。</p>
<p>本篇是该系列第二季的第一集，介绍了Snackbar的使用场景（相信现在大部分的开发者使用的还只是Toast和Alert吧）。</p>
<h2 id="正文">正文</h2><p>在你的应用中，交互信息的一个细节在于使用屏幕上的提示。但是，当那个信息很重要或者需要用户做决定的时候，你可能想要使用对话框(Alert)。</p>
<p>在过去，你有2种方式：</p>
<ol>
<li>对话框。可以展示信息给用户，并让他们对其进行操作。<br>但是对话框是中断性的（强制用户停下正在做的，来处理你的对话框）。想想，你享受被打断的滋味吗？你喜欢那种去确认你想做的操作的感觉吗？还是喜欢弹出对话框？<br><img src="/images/android-development-patterns-s2-ep1-1.png" alt="android-development-patterns-s2-ep1-1"></li>
</ol>
<p>这种交互很让人烦躁，不是么？<br>所以，对话框需要尽可能保守地去使用，这就让我们来到了第二种方式。</p>
<ol>
<li>Toast<br>Toast可以确认用户做的事情确实发生了。</li>
</ol>
<p>但如果这个操作是破坏性的呢，比如删除？<br>你的用户可能不想去那么做，而现在他们惊慌地在找怎么撤销，并对你在他删除那张美女图片前不进行再次确认而感到无语。卧槽，这是要干啥。</p>
<p>Snackbar就是为此而生的。</p>
<p>Snackbar和Toast类似，但它更强大，因为它是可交互的（比如提供你的用户正在找的撤销操作）。<br><img src="/images/android-development-patterns-s2-ep1-2.png" alt="android-development-patterns-s2-ep1-2"></p>
<p>Snackbar从屏幕底部浮起，用户可以将它划走，或者无视它（过一会自动消失，就像Toast那样）。Snackbar包含了一条短的信息，并能提供一个单一操作，比如撤销。</p>
<p>所以你现在有3种组件来帮助你使用最完美的方式来打断用户。</p>
<ul>
<li>对话框：当用户的反应对你的app流程来说很重要，在这种时候你需要破坏性的干扰。</li>
<li>Toast：给用户一个不会改变任何东西的小提示。</li>
<li>Snackbar：前两者之间的区间内，Snackbar是你最好的朋友。</li>
</ul>
<h2 id="小结">小结</h2><p>对话框（Alerts）对于和用户交互来说是<strong>很重</strong>的一个操作，但它确实帮助你了解什么是恰当的，从而你的用户不会讨厌你。幸运的是，现在有了一个简单的回答：使用<a href="http://developer.android.com/reference/android/support/design/widget/Snackbar.html" target="_blank" rel="external">Snackbar!</a>。</p>
<p>有一些微妙的场景，我们不知道如何在Toast和Snackbar之间抉择，那么<a href="http://www.google.com/design/spec/components/snackbars-toasts.html#" target="_blank" rel="external">Google的设计文档</a>包括了你可能需要的所有的详尽细节。如果你仍然希望做错，<a href="http://www.google.com/design/spec/components/dialogs.html#dialogs-behavior" target="_blank" rel="external">Dialog</a>当然也可以使用。但我们相信你能做得更好。所以成为一个更好的开发者，使用更好的选择：Snackbar。</p>
<p>最后牢骚一句，国内一些app退出的时候还要弹个Dialog问你是不是要退出的交互，真是够了/(ㄒoㄒ)/~~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[比你想象得更真实]]></title>
      <url>http://blog.zhaiyifan.cn/2016/02/01/realer-than-you-think/</url>
      <content type="html"><![CDATA[<p>不是技术文章，只是一些闲言闲语罢了。</p>
<h1 id="起">起</h1><p>难得的，我又失眠了。虽然说道又，但究竟上一次是什么时候，却已经记不清了，大抵是15年上半年的时候吧。</p>
<p>不知道为什么，这几天情不自禁地想起些人和事，兴许是见的人多了，兴许是写的代码少了，兴许是周期性的孤独病又犯了。谁知道呢。只是有些难过，有些缅怀，又带着点悲伤。</p>
<h1 id="承">承</h1><p>不知道你在想些什么。</p>
<p>但我其实远比看起来简单得多。我说的，大约都是心中所想的。而我所做的，大抵也都是确实的真实反应。无论是对人、对事，即便那样对自己或许不是最好，我也一直都想做一个真实的人。明明抱着这样的想法，仍然被以为在掩饰什么，也只能是我不善表达的错了吧。</p>
<h1 id="转">转</h1><p>面对认同的人，却又害怕掩饰后的我所不认识的脸。即便那是和别人的说说也好。但于我却好似尖刀。又只能装作什么都不知道，因为不知如何面对。</p>
<p>愿我心如磐石。从此相逢路人。</p>
<p>曾经想做一只猫，现在想来猫也有猫的想法。热带鱼倒是个不错的替代物，7秒后你我不认识彼此，一切又都变成新的。永远不会感到无聊。如此一来，我的逃避病是不是就能治好了。后来我终于发现，逃避是逃避不了的，只是把原来的痛苦埋起来，更浓更醇更痛罢了。索性大家们能幸福，我倒也有一种从环中解脱的感觉。</p>
<h1 id="合">合</h1><p>最后来一段诗经里的话吧</p>
<pre><code>我姑酌彼兕觥，维以不永伤。
</code></pre><p>且行且珍惜。掩起眼泪继续往前行。<br>且看这世界能带给我多痛苦，我也自嘲着继续走下去。</p>
<p>晚安。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android应用架构 (Android Dev Summit 2015)]]></title>
      <url>http://blog.zhaiyifan.cn/2016/01/29/android-app-architecture-2015/</url>
      <content type="html"><![CDATA[<p>视频见：<a href="https://www.youtube.com/watch?v=BlkJzgjzL0c&amp;feature=em-subs_digest" target="_blank" rel="external">https://www.youtube.com/watch?v=BlkJzgjzL0c&amp;feature=em-subs_digest</a><br>印度哥们的发音每次都能让我一阵沉醉。</p>
<h1 id="尽快行动">尽快行动</h1><ul>
<li>早期的设计抉择对app的影响很大</li>
<li>基本架构会让你思考需要解决的问题变得更容易或困难。</li>
</ul>
<h1 id="哪种模式？">哪种模式？</h1><ul>
<li>MVC</li>
<li>MVP</li>
<li>Reactive</li>
<li>Cairngorm</li>
<li>Flux</li>
<li>fdsafdsa</li>
<li>MVVM</li>
<li>CLEAN</li>
</ul>
<h1 id="这不是一个库的调查">这不是一个库的调查</h1><ul>
<li>很多很棒的libraries展示了思考app的不同方式</li>
<li>趋势迅速改变，但一些挑战是永恒的</li>
<li>久而久之<a href="https://en.wikipedia.org/wiki/Lava_flow_(programming" target="_blank" rel="external">“熔岩流”</a>发生了</li>
</ul>
<p>Lava Flow 熔岩流：解释一下，大致就是说一些因为种种状况写得不太好的代码，恩，比如产品/PM/某些开发老大等呵呵呵催进度的时候，被加入到实际生产环境，而其实际仍处于开发中的阶段，导致后期需要维护原先未完成状态的设计的兼容性，比如各种API/命名等。而在这种team里面，随着熔岩流的不断发生，人员的进进出出变动，系统内部各种设计的目的丢失，导致之后的工程师不仅不敢清理这些代码，反而只能继续增加它们的复杂性，把系统弄得越来越混乱。</p>
<p>如果你有一定工作经验，相信对这种状况一定不会陌生。:-D</p>
<h1 id="为了用户体验（UX）的架构">为了用户体验（UX）的架构</h1><p>用户不会关心你系统的架构，他们只在意用户体验。</p>
<p>接着我们看到了一个IM app的例子，用户发送了一个消息，然后就看到菊花转啊转，用户并不知道发生了什么。<br><img src="http://blog.zhaiyifan.cn/images/android-app-architecture-2015-demo-1.png" alt="android-app-architecture-2015-demo-1"></p>
<h2 id="非持久化的提示">非持久化的提示</h2><p>见下图，view发送命令给view controller，然后controller请求网络，并等待网络response再更新view。<br><img src="http://blog.zhaiyifan.cn/images/android-app-architecture-2015-1.png" alt="android-app-architecture-2015-1"></p>
<p>这样就会让用户觉得体验很差劲，如果我们试着再增加一个Model层（存储），如下图，当用户点击后，view controller并不会直接发送请求，而是先更改Model层状态，Model会先把更新后的状态回调给View Controller，更新View的UI，然后才去发送网络请求，并等待response，然后再次更新UI（其实这里的Model就是Repository层了，对上面屏蔽了数据来源，UGC/FEED流的app中这种体验很重要）。</p>
<p><img src="http://blog.zhaiyifan.cn/images/android-app-architecture-2015-2.png" alt="android-app-architecture-2015-2"></p>
<p>这种设计下，我们就很容易可以造一种假feed（比如真实的是黑色，假的是灰色），等到网络response回来了，再变成真feed（黑色）。</p>
<p>这就是<em>非持久化的提示</em>。</p>
<h2 id="缓存">缓存</h2><p>第二个例子，当我们从详情页退出回到列表页，然后再次点击列表项进入刚才的详情页，数据竟然不见了。2秒前我还在这里，为什么当我再次回来的时候数据就没了呢。</p>
<p>因为数据不是持久化的！它只是一个短暂的存储，数据来源是网络。</p>
<p><img src="http://blog.zhaiyifan.cn/images/android-app-architecture-2015-3.png" alt="android-app-architecture-2015-3"></p>
<p>于是我们就得到了上图这样的设计，这样一来我们一进页面就能看到数据，因为数据来自本地，Application Logic会在收到View Controller请求的时候同时请求Persistent Model和Network。</p>
<h2 id="非持久化提示队列">非持久化提示队列</h2><p>再来个神奇的场景，见下图，当用户输入一条信息后，UI展示了假数据，但当他继续输入后，却没有更新新的假数据到界面，这其中发生了什么呢？<br><img src="http://blog.zhaiyifan.cn/images/android-app-architecture-2015-demo-2.png" alt="android-app-architecture-2015-demo-2"></p>
<p>因为我们的架构是基于命令的！见下面的后台处理示意图：<br><img src="http://blog.zhaiyifan.cn/images/android-app-architecture-2015-4.png" alt="android-app-architecture-2015-4"></p>
<p>当我们处理请求的时候，我们同时只能做2件事（想象一个一个max为2的线程池），当我们在一个线程抓取bitmap，另一个线程发送数据到服务器的时候，我们无法处理第三个命令（比如从磁盘读取评论）。这是一种很糟糕的情况，调度的优先级有问题，但设计者很难料到这种情况的发生，因为并不知道每一个命令要花多久，你并不能总是估算出来。</p>
<p>但我们可以分开这些东西。<br><img src="http://blog.zhaiyifan.cn/images/android-app-architecture-2015-5.png" alt="android-app-architecture-2015-5"><br>见上图，我们把队列分为网络和本地队列，这样就不会出现刚才的情形了。就算网络出了问题，用户还是能看到本地的假反馈。</p>
<h2 id="Activity状态机">Activity状态机</h2><p><img src="http://blog.zhaiyifan.cn/images/android-app-architecture-2015-6.png" alt="android-app-architecture-2015-6"></p>
<h2 id="小结">小结</h2><ol>
<li>为了离线设计（为了更好的UX不能责怪网络）</li>
</ol>
<ul>
<li>UI是基于model的</li>
<li>App Logic负责同步model和服务器</li>
<li>这两者不互相依赖（在必要的时候使用events和callbacks通知状态改变）</li>
</ul>
<h2 id="Application_Logic_-_应用逻辑">Application Logic - 应用逻辑</h2><ol>
<li>解耦</li>
</ol>
<ul>
<li>如果有用的话，使用依赖注入（use it if it helps)</li>
<li>了解副作用（这不是那么容易的事，尤其是当你在只在自己桌上测试的时候，当你坐在那儿的时候一切都是在最佳状态）</li>
<li>为了更好的性能，避免反射（笔者看过一些项目在命令中心大肆使用反射，这真的很让我无语）</li>
</ul>
<p>很多依赖注入框架有一个很重的运行期组件或者编译期组件。</p>
<p>比如Dagger2在编译期做这些事，从而达到更好的性能。所以要仔细看看这些库，权衡它们的优劣。</p>
<h2 id="网络">网络</h2><ol>
<li>API设计</li>
</ol>
<ul>
<li>为了你的用户设计后台（想到了一些后台API为了自己内部的解耦让app一个页面请求十几个接口）</li>
<li>在服务器尽量处理更多</li>
<li>传递metadata给客户端</li>
</ul>
<p>比如有一张很大很大的图片：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">user</span>":<span class="value">&#123;</span><br><span class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"MarkZhai"</span></span>,</span><br><span class="line">    "<span class="attribute">photoUrl</span>": <span class="value"><span class="string">"https://blog.zhaiyifan.cn/..."</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果只是传这些数据给客户端，那就意味着客户端需要自己处理很多逻辑，比如图片宽/高，processor等等：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">user</span>":<span class="value">&#123;</span><br><span class="line">    "<span class="attribute">name</span>": <span class="value"><span class="string">"MarkZhai"</span></span>,</span><br><span class="line">    "<span class="attribute">photoUrl</span>": <span class="value">&#123;</span><br><span class="line">      "<span class="attribute">width</span>" : <span class="value"><span class="number">300</span></span>,</span><br><span class="line">      "<span class="attribute">height</span>" : <span class="value"><span class="number">500</span></span>,</span><br><span class="line">      "<span class="attribute">url</span>" : <span class="value"><span class="string">"https://blog.zhaiyifan.cn/..."</span></span>,</span><br><span class="line">      "<span class="attribute">palette</span>" : <span class="value">&#123;&#125;</span><br><span class="line">    </span>&#125;</span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样就灵活很多。</p>
<ol>
<li>电池和数据</li>
</ol>
<ul>
<li>尽量做批量请求</li>
<li>如果有用的话，使用JobScheduler</li>
</ul>
<p>批量请求会更省电。不想让你的app臭名昭著吧。</p>
<h2 id="Act_locally,_sync_globally!">Act locally, sync globally!</h2><p>为了更好的用户体验。全局只做同步，更多的用户回馈性操作在本地进行。</p>
<h2 id="Activities_和_Fragments">Activities 和 Fragments</h2><p>（又想到了知乎3.0是怎么回事）</p>
<ul>
<li>Q: 我应该使用哪一个？</li>
<li>A: Fragments是activity的封装部件</li>
</ul>
<p>So…Fragment的英译是碎片，所以更多的不要为了Fragment而Fragment，当Activity太大，承载太多不同UI的时候，再去尝试拆分为独立的一个个Fragment。笔者在这里想到了<em>单一职责原则</em>。</p>
<h2 id="Fragments_和_Views">Fragments 和 Views</h2><p>Q: 我应该使用哪一个？</p>
<ul>
<li>Views只是螺母和螺钉，即最基本的组成部分</li>
<li>而Activities和Fragments是有生命周期的结构</li>
<li>使用两者，保持职责清晰</li>
</ul>
<h2 id="内存">内存</h2><ul>
<li>避免在代码热路径上分配对象（如：可以在外面申明的对象去放到循环里重复申明）</li>
<li>对象池 和 复用</li>
</ul>
<p>一切都是为了减少GC。</p>
<p>来看一个例子</p>
<p><code>Rect getBounds()</code> vs. <code>void getBounds(Rect in)</code></p>
<p>显然第一个设计更干净更符合语言习惯，但它会额外创建一个<code>Rect</code>；而第二个方法则会从外面带Rect进来，从而不会做额外的内存分配。</p>
<p>难道我们都得用第二个么？不。我们只需要在一些很热的路径上去考虑这些问题，比如那些会运行很多很多次的布局，比如每秒需要进行60次的绘制。而像是你的那些事件处理，像是点击等，你真的不需要去为此而那样在内部扭曲系统。</p>
<h2 id="性能">性能</h2><ul>
<li>如果丑陋的代码可以帮助你的用户，没问题<br>用户不会去看你的代码，只会看你的UI，如果你的UI很难看，那才是真正影响他们体验的。<br>而且编译后的代码不管怎么都会很难看（笑</li>
<li>大部分的代码都不是性能关键</li>
</ul>
<h1 id="Demo">Demo</h1><p><a href="https://github.com/yigit/dev-summit-architecture-demo" target="_blank" rel="external">Talk is cheap, show me the code</a>.</p>
<h1 id="Q_and_A">Q and A</h1><ol>
<li><p>36min: 自定义view的使用<br>笔者在这想到了facebook发过的那篇feed view优化的文章，QQ空间Android版也有类似的实践。<br>许多人在应该使用Custom View的时候使用了Fragment，应该更多从<em>内聚UI块</em>来看待这个问题。比如有一些事件需要这块UI的某一个部分来响应，那它就更像viewgroup。而如果其中的一部分需要响应应用的其他元素，像是生命周期，做了一些事像是注册事件，那它可能更适合作为一个fragment。但人们在考虑特定子段的时候总会更偏重于fragment。</p>
</li>
<li><p>37:33min：怎么在app死掉的时候处理任务到磁盘的串行化和停止<br>在Demo里直接使用了演讲者自己写的Job Queue，开发者可以对它做简单的串行化，比如使用<code>Tape</code>。</p>
</li>
<li><p>在这个应用里，你会使用sync adapter还是异步REST请求来和服务器沟通？<br>在这个demo里，我们分开了本地和网络任务。对本地任务，我们总是使用同步请求。而对网络任务，我们使用Job Queue。</p>
</li>
<li><p>39min的时候有一个问题，提到了服务器数据问题，这里也有一个很重要的原则：不信任服务器，保持本地model的一致性。<br>在Model保存前，总是去检查是否正确（Null Pattern也是一个很好的实践哦）。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BlockCanary — 轻松找出Android App界面卡顿元凶]]></title>
      <url>http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/</url>
      <content type="html"><![CDATA[<p>BlockCanary是我利用个人时间开发的Android平台上的一个轻量的，非侵入式的性能监控组件，应用只需要简单地加几行，提供一些该组件需要的上下文环境就可以在使用应用的时候检测主线程上的各种卡顿问题，并通过组件提供的各种信息分析出原因并进行修复。</p>
<p>代码可找我(87224330)要。</p>
<h2 id="背景">背景</h2><p>在复杂的项目环境中，由于历史代码庞大，业务复杂，包含各种第三方库，偶尔再来个jni调用，所以在出现了卡顿的时候，我们很难定位到底是哪里出现了问题，即便知道是哪一个Activity/Fragment，也仍然需要进去里面一行一行看，动辄数千行的类再加上跳来跳去调来调去的，结果就是不了了之随它去了，实在不行了再优化吧。于是一拖再拖，最后可能压根就改不动了，客户端越来越卡。</p>
<p>事实上，很多情况下卡顿不是必现的，它们可能与机型、环境、操作等有关，存在偶然性，即使发生了，再去查那如山般的logcat，也不一定能找到卡顿的原因，是我们自己的应用导致的还是其他应用抢占资源导致的？是哪些方法导致的？很难去回朔。有些机型自己修改了api导致的卡顿，还必须拿那台机器才能去调试找原因。</p>
<p>BlockCanary就是来解决这个问题的。告别打点和调试，哪里卡顿，一目了然。</p>
<h2 id="介绍">介绍</h2><p>BlockCanary对主线程操作进行了完全透明的监控，并能输出有效的信息，帮助开发分析、定位到问题所在，迅速优化应用。其特点有：</p>
<ul>
<li>非侵入式，简单的两行就打开监控，不需要到处打点，破坏代码优雅性。</li>
<li>精准，输出的信息可以帮助定位到问题所在（精确到行），不需要像Logcat一样，慢慢去找。</li>
</ul>
<p>目前包括了核心监控输出文件，以及UI显示卡顿信息功能。仅支持Android端。</p>
<h2 id="原理">原理</h2><p>熟悉Message/Looper/Handler系列的同学们一定知道<code>Looper.java</code>中这么一段：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  <span class="comment">// guarded by Looper.class</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Initialize the current thread as a looper, marking it as an</span><br><span class="line"> * application's main looper. The main looper for your application</span><br><span class="line"> * is created by the Android environment, so you should never need</span><br><span class="line"> * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    prepare(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sMainLooper = myLooper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the application's main looper, which lives in the main thread of the application.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> sMainLooper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>即整个应用的主线程，只有这一个looper，不管有多少handler，最后都会回到这里。</p>
<p>如果再细心一点会发现在Looper的loop方法中有这么一段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">        Printer logging = me.mLogging;</span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>是的，就是这个Printer - mLogging，它在每个message处理的前后被调用，而如果主线程卡住了，不就是在dispatchMessage里卡住了吗？</p>
<p>核心流程图：<br><img src="http://blog.zhaiyifan.cn/images/blockcanary_flow.png" alt="flow"></p>
<p>该组件利用了主线程的消息队列处理机制，通过</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Looper.getMainLooper().setMessageLogging(mainLooperPrinter);</span><br></pre></td></tr></table></figure>
<p>并在<code>mainLooperPrinter</code>中判断start和end，来获取主线程dispatch该message的开始和结束时间，并判定该时间超过阈值(如2000毫秒)为主线程卡慢发生，并dump出各种信息，提供开发者分析性能瓶颈。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mStartedPrinting) &#123;</span><br><span class="line">        mStartTimeMillis = System.currentTimeMillis();</span><br><span class="line">        mStartThreadTimeMillis = SystemClock.currentThreadTimeMillis();</span><br><span class="line">        mStartedPrinting = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        mStartedPrinting = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (isBlock(endTime)) &#123;</span><br><span class="line">            notifyBlockEvent(endTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBlock</span><span class="params">(<span class="keyword">long</span> endTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> endTime - mStartTimeMillis &gt; mBlockThresholdMillis;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>说到此处，想到是不是可以用mainLooperPrinter来做更多事情呢？既然主线程都在这里，那只要parse出app包名的第一行，每次打印出来，是不是就不需要打点也能记录出用户操作路径？ 再者，比如想做onClick到页面创建后的耗时统计，是不是也能用这个原理呢？ 之后可以试试看这个思路（目前存在问题是获取线程堆栈是定时3秒取一次的，很可能一些比较快的方法操作一下子完成了没法在stacktrace里面反映出来）。</strong></p>
<h2 id="功能">功能</h2><p>BlockCanary会在发生卡顿（通过MonitorEnv的getConfigBlockThreshold设置）的时候记录各种信息，输出到配置目录下的文件，并弹出消息栏通知（可关闭）。</p>
<p>简单的使用如在开发、测试、Monkey的时候，Debug包启用</p>
<ul>
<li>开发可以通过图形展示界面直接看信息，然后进行修复</li>
<li>测试可以把log丢给开发，也可以通过卡慢详情页右上角的更多按钮，分享到各种聊天软件（不要怀疑，就是抄的LeakCanary）</li>
<li>Monkey生成一堆的log，找个专人慢慢过滤记录下重要的卡慢吧</li>
</ul>
<p>还可以通过Release包用户端定时开启监控并上报log，后台匹配堆栈过滤同类原因，提供给开发更大的样本环境来优化应用。</p>
<p>本项目提供了一个友好的展示界面，供开发测试直接查看卡慢信息（基于LeakCanary的界面修改）。</p>
<p>dump的信息包括：</p>
<ul>
<li>基本信息：安装包标示、机型、api等级、uid、CPU内核数、进程名、内存、版本号等</li>
<li>耗时信息：实际耗时、主线程时钟耗时、卡顿开始时间和结束时间</li>
<li>CPU信息：时间段内CPU是否忙，时间段内的系统CPU/应用CPU占比，I/O占CPU使用率</li>
<li>堆栈信息：发生卡慢前的最近堆栈，可以用来帮助定位卡慢发生的地方和重现路径</li>
</ul>
<p>sample如下图，可以精确定位到代码中哪一个类的哪一行造成了卡慢。<br><img src="http://blog.zhaiyifan.cn/images/blockcanary_log_sample1.png" alt="blockcanary log sample"></p>
<h2 id="总结">总结</h2><p>BlockCanary作为一个Android组件，目前还有局限性，因为其在一个完整的监控系统中只是一个生产者，还需要对应的消费者去分析日志，比如归类排序，以便看出哪些卡慢更有修复价值，需要优先处理；又比如需要过滤机型，有些奇葩机型的问题造成的卡慢，到底要不要去修复是要斟酌的。扯远一点的话，像是埋点除了统计外，完全还能用来做链路监控，比如一个完整的流程是A -&gt; B -&gt; D -&gt; E, 但是某个时间节点突然A -&gt; B -&gt; D后没有到达E，这时候监控平台就可以发出预警，让开发人员及时定位。很多监控方案都需要C/S两端的配合。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于AOP的方法级自动埋点]]></title>
      <url>http://blog.zhaiyifan.cn/2015/12/07/AopBasedMonitor/</url>
      <content type="html"><![CDATA[<h1 id="什么是埋点">什么是埋点</h1><p>埋点（打点）其实就是操作的记录，又细分为本地和在线两种，前者记录在log里供开发分析问题用，后者则直接上传到服务器，会被用到像是BI、PD分析业务趋势上。最常见的像是在activity的部分生命周期记录，或者点击操作的时候上报一下。</p>
<p>虽然其本身只是一两行代码的事，却会对客户端代码的整洁性产生影响，而且本身也不够灵活，需要在各个地方或者基类写代码，很难做一些特例。</p>
<h1 id="AOP">AOP</h1><p>AOP，面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<p>看起来很牛逼的样子，其实简单来说，就是插代码（编译期或者运行期）。</p>
<h1 id="AspectJ">AspectJ</h1><p>也是个有十几年历史的库了。定义了各种连接点集合来实现AOP的概念，网上现在很多资料，这里就不赘述了。</p>
<h1 id="Android_Usage">Android Usage</h1><p>在Gradle中使用：<a href="https://github.com/uPhyca/gradle-android-aspectj-plugin" target="_blank" rel="external">https://github.com/uPhyca/gradle-android-aspectj-plugin</a></p>
<h1 id="生命周期切面定义">生命周期切面定义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有继承自android.app.Activity的类的以on开头的方法</span></span><br><span class="line"><span class="annotation">@Pointcut</span>(<span class="string">"execution(* android.app.Activity+.on*(..)) &amp;&amp; this(activity) "</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logForActivity</span><span class="params">(android.app.Activity activity)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有继承android.support.v4.app.Fragment的类的以on开头的方法</span></span><br><span class="line"><span class="annotation">@Pointcut</span>(<span class="string">"execution(* android.support.v4.app.Fragment+.on*(..)) &amp;&amp; this(fragment) "</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logForFragment</span><span class="params">(android.support.v4.app.Fragment fragment)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Mac 10.11编译最新的Android 6.0]]></title>
      <url>http://blog.zhaiyifan.cn/2015/11/24/BuildAndroid6OnMacElCapitan/</url>
      <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>因为只有一台可怜的256G MBPR，并没有足够的空间去装一个Ubuntu，所以之前在10.10的时候尝试编译5.0未果后（各种版本问题），就无奈放弃了。<br>前几天在看最新的aosp<a href="https://source.android.com/source/initializing.html#branch-60x" target="_blank" rel="external">官网介绍</a>的时候，发现master和6.0.x的编译都使用了or later来描述对Mac OS的版本要求，就抱着试一试的心情开始了新的编译之旅。从下载到最后动车轰轰声中编译结束，也断断续续花了3天时间。</p>
<h1 id="配置">配置</h1><p>OS X EL Capital 10.11.1<br>Java 1.7.0_79<br>Xcode 7.1.1 with command line tool<br>Zsh</p>
<h1 id="过程">过程</h1><p>因为是给我的Nexus6编译image，所以分支上，我选择了6.0.0_r2进行编译，分支选择可以参照<a href="https://source.android.com/source/build-numbers.html#source-code-tags-and-builds" target="_blank" rel="external">Source code tags and builds</a>.</p>
<p>对于aosp被墙，尽管我们也能用vpn连接去下，但是其实国内是有aosp镜像的：<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/aosp" target="_blank" rel="external">科大镜像</a>。<br>速度挺快，同步过程也比较稳定。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实测build完后，需要60多个G，所以其实分配70G也绰绰有余了</span></span><br><span class="line">hdiutil create -type SPARSE -fs <span class="string">'Case-sensitive Journaled HFS+'</span> -size <span class="number">70</span>g ~/android.dmg</span><br><span class="line">hdiutil attach ~/android.dmg.sparseimage -mountpoint /Volumes/android;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /Volumes/android</span><br><span class="line">mkdir <span class="number">6.0</span>.<span class="number">0</span>_r2</span><br><span class="line"><span class="built_in">cd</span> <span class="number">6.0</span>.<span class="number">0</span>_r2</span><br><span class="line"></span><br><span class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-<span class="number">6.0</span>.<span class="number">0</span>_r2</span><br><span class="line">repo sync</span><br></pre></td></tr></table></figure>
<p>然后是漫长的等待，内容会先下载到.repo里面，再解压出来，最后大致是37G左右。接着就可以开始我们的编译之旅了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">lunch</span><br><span class="line"><span class="comment"># 选择要build的target, 可参考 https://source.android.com/source/running.html#picking-and-building-the-configuration-that-matches-a-device, N6是shamu，即19</span></span><br><span class="line"><span class="number">19</span> (aosp_shamu-userdebug)</span><br><span class="line"><span class="comment"># 我是16G的i5 mbpr, 所以选了4，这里可以看机器性能指定不同的线程数</span></span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure>
<p>你会发现报错了！！没错。。就是报错了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Install: out/target/product/hammerhead/root/res/images/charger/battery_scale.png</span><br><span class="line">Install: out/target/product/hammerhead/fake_packages/charger_res_images-timestamp</span><br><span class="line">make: *** No rule to make target `device/lge/hammerhead_fp-kernel/zImage-dtb<span class="string">', needed by `out/target/product/hammerhead/kernel'</span>.  Stop.</span><br></pre></td></tr></table></figure></p>
<p>分析了一下。。发现是kernel的问题，但是官网压根没提到这个。好吧，我们来到<a href="https://developers.google.com/android/nexus/drivers" target="_blank" rel="external">Binaries for Nexus Devices</a>, 选择自己机器和分支对应的driver, 我这里对应的是Nexus 6 (Mobile) binaries for Android 6.0.0 (MRA58N)，3个都下载解压到目录后，分别运行三个extract开头的sh脚本，再次make，就顺利地build成功了。</p>
<p>最后，刷刷刷<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot -w flashall</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[各大热补丁方案分析和比较]]></title>
      <url>http://blog.zhaiyifan.cn/2015/11/20/HotPatchCompare/</url>
      <content type="html"><![CDATA[<p>最近开源界涌现了很多热补丁项目，但从方案上来说，主要包括<a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">Dexposed</a>、<a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a>、<a href="http://bugly.qq.com/blog/?p=781" target="_blank" rel="external">ClassLoader</a>（来源是原QZone，现淘宝的工程师陈钟，在15年年初就已经开始实现）三种。前两个都是阿里巴巴内部的不同团队做的（淘宝和支付宝），后者则来自腾讯的QQ空间团队。</p>
<p>开源界往往一个方案会有好几种实现（比如ClassLoader方案已经有不下三种实现了），但这三种方案的原理却徊然不同，那么让我们来看看它们三者的原理和各自的优缺点吧。</p>
<h1 id="Dexposed">Dexposed</h1><p>基于<a href="https://github.com/rovo89/Xposed" target="_blank" rel="external">Xposed</a>的AOP框架，方法级粒度，可以进行AOP编程、插桩、热补丁、SDK hook等功能。</p>
<p>Xposed需要Root权限，是因为它要修改其他应用、系统的行为，而对单个应用来说，其实不需要root。 Xposed通过修改Android Dalvik运行时的Zygote进程，并使用Xposed Bridge来hook方法并注入自己的代码，实现非侵入式的runtime修改。比如蜻蜓fm和喜马拉雅做的事情，其实就很适合这种场景，别人反编译市场下载的代码是看不到patch的行为的。<a href="https://github.com/rovo89/Xposed/blob/master/libxposed_dalvik.cpp" target="_blank" rel="external">小米</a>(onVmCreated里面还未小米做了资源的处理)也重用了dexposed，去做了很多自定义主题的功能，还有沉浸式状态栏等。</p>
<p>我们知道，应用启动的时候，都会fork zygote进程，装载class和invoke各种初始化方法，Xposed就是在这个过程中，替换了app_process，hook了各种入口级方法（比如handleBindApplication、ServerThread、ActivityThread、ApplicationPackageManager的getResourcesForApplication等），加载XposedBridge.jar提供动态hook基础。</p>
<p>具体到方法，可参见<a href="https://github.com/rovo89/XposedBridge" target="_blank" rel="external">XposedBridge</a>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Intercept every call to the specified method and call a handler function instead.</span><br><span class="line"> * <span class="doctag">@param</span> method The method to intercept</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookMethodNative</span><span class="params">(Member method, Class&lt;?&gt; declaringClass, <span class="keyword">int</span> slot, Object additionalInfo)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>其具体native实现则在<a href="https://github.com/rovo89/Xposed/blob/master/libxposed_common.cpp" target="_blank" rel="external">Xposed的libxposed_common.cpp</a>里面有注册，根据系统版本分发到libxposed_dalvik和libxposed_art里面，以dalvik为例大致来说就是记录下原来的方法信息，并把方法指针指向我们的hookedMethodCallback，从而实现拦截的目的。</p>
<p>方法级的替换是指，可以在方法前、方法后插入代码，或者直接替换方法。只能针对java方法做拦截，不支持C的方法。</p>
<p>来说说硬伤吧，不支持art，不支持art，不支持art。<br>重要的事情要说三遍。尽管在6月，项目网站的roadmap就写了7、8月会支持art，但事实是现在还无法解决art的兼容。</p>
<p>另外，如果线上release版本进行了混淆，那写patch也是一件很痛苦的事情，反射+内部类，可能还有包名和内部类的名字冲突，总而言之就是写得很痛苦。</p>
<h1 id="AndFix">AndFix</h1><p>同样是方法的hook，AndFix不像Dexposed从Method入手，而是以Field为切入点。</p>
<p>先看Java入口，<code>AndFixManager.fix</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * fix</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> file        patch file</span><br><span class="line"> * <span class="doctag">@param</span> classLoader classloader of class that will be fixed</span><br><span class="line"> * <span class="doctag">@param</span> classes     classes will be fixed</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">fix</span><span class="params">(File file, ClassLoader classLoader, List&lt;String&gt; classes)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 省略...判断是否支持，安全检查，读取补丁的dex文件</span></span><br><span class="line"></span><br><span class="line">		ClassLoader patchClassLoader = <span class="keyword">new</span> ClassLoader(classLoader) &#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="keyword">protected</span> Class&lt;?&gt; findClass(String className) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">				Class&lt;?&gt; clazz = dexFile.loadClass(className, <span class="keyword">this</span>);</span><br><span class="line">				<span class="keyword">if</span> (clazz == <span class="keyword">null</span> &amp;&amp; className.startsWith(<span class="string">"com.alipay.euler.andfix"</span>)) &#123;</span><br><span class="line">					<span class="keyword">return</span> Class.forName(className);<span class="comment">// annotation’s class not found</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(className);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> clazz;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		Enumeration&lt;String&gt; entrys = dexFile.entries();</span><br><span class="line">		Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span> (entrys.hasMoreElements()) &#123;</span><br><span class="line">			String entry = entrys.nextElement();</span><br><span class="line">			<span class="keyword">if</span> (classes != <span class="keyword">null</span> &amp;&amp; !classes.contains(entry)) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;<span class="comment">// skip, not need fix</span></span><br><span class="line">			&#125;</span><br><span class="line">      <span class="comment">// 找到了，加载补丁class</span></span><br><span class="line">			clazz = dexFile.loadClass(entry, patchClassLoader);</span><br><span class="line">			<span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">				fixClass(clazz, classLoader);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		Log.e(TAG, <span class="string">"pacth"</span>, e);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看来最终fix是在<code>fixClass方法</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixClass</span><span class="params">(Class&lt;?&gt; clazz, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">  Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">  MethodReplace methodReplace;</span><br><span class="line">  String clz;</span><br><span class="line">  String meth;</span><br><span class="line">  <span class="comment">// 遍历补丁class里的方法，进行一一替换，annotation则是补丁包工具自动加上的</span></span><br><span class="line">  <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    methodReplace = method.getAnnotation(MethodReplace.class);</span><br><span class="line">    <span class="keyword">if</span> (methodReplace == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    clz = methodReplace.clazz();</span><br><span class="line">    meth = methodReplace.method();</span><br><span class="line">    <span class="keyword">if</span> (!isEmpty(clz) &amp;&amp; !isEmpty(meth)) &#123;</span><br><span class="line">      replaceMethod(classLoader, clz, meth, method);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceMethod</span><span class="params">(ClassLoader classLoader, String clz, String meth, Method method)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    String key = clz + <span class="string">"@"</span> + classLoader.toString();</span><br><span class="line">    Class&lt;?&gt; clazz = mFixedClass.get(key);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;<span class="comment">// class not load</span></span><br><span class="line">      <span class="comment">// 要被替换的class</span></span><br><span class="line">      Class&lt;?&gt; clzz = classLoader.loadClass(clz);</span><br><span class="line">      <span class="comment">// 这里也很黑科技，通过C层，改写accessFlags，把需要替换的类的所有方法（Field）改成了public，具体可以看Method结构体</span></span><br><span class="line">      clazz = AndFix.initTargetClass(clzz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;<span class="comment">// initialize class OK</span></span><br><span class="line">      mFixedClass.put(key, clazz);</span><br><span class="line">      <span class="comment">// 需要被替换的函数</span></span><br><span class="line">      Method src = clazz.getDeclaredMethod(meth, method.getParameterTypes());</span><br><span class="line">      <span class="comment">// 这里是调用了jni，art和dalvik分别执行不同的替换逻辑，在cpp进行实现</span></span><br><span class="line">      AndFix.addReplaceMethod(src, method);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    Log.e(TAG, <span class="string">"replaceMethod"</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在dalvik和art上，系统的调用不同，但是原理类似，这里我们尝个鲜，以6.0为例<code>art_method_replace_6_0</code>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进行方法的替换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replace_6_0</span><span class="params">(JNIEnv* env, jobject src, jobject dest)</span> </span>&#123;</span><br><span class="line">	art::mirror::ArtMethod* smeth = (art::mirror::ArtMethod*) env-&gt;FromReflectedMethod(src);</span><br><span class="line">	art::mirror::ArtMethod* dmeth = (art::mirror::ArtMethod*) env-&gt;FromReflectedMethod(dest);</span><br><span class="line"></span><br><span class="line">	dmeth-&gt;declaring_class_-&gt;class_loader_ =</span><br><span class="line">			smeth-&gt;declaring_class_-&gt;class_loader_; <span class="comment">//for plugin classloader</span></span><br><span class="line">	dmeth-&gt;declaring_class_-&gt;clinit_thread_id_ =</span><br><span class="line">			smeth-&gt;declaring_class_-&gt;clinit_thread_id_;</span><br><span class="line">	dmeth-&gt;declaring_class_-&gt;status_ = smeth-&gt;declaring_class_-&gt;status_-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把原方法的各种属性都改成补丁方法的</span></span><br><span class="line">	smeth-&gt;declaring_class_ = dmeth-&gt;declaring_class_;</span><br><span class="line">	smeth-&gt;dex_cache_resolved_types_ = dmeth-&gt;dex_cache_resolved_types_;</span><br><span class="line">	smeth-&gt;access_flags_ = dmeth-&gt;access_flags_;</span><br><span class="line">	smeth-&gt;dex_cache_resolved_methods_ = dmeth-&gt;dex_cache_resolved_methods_;</span><br><span class="line">	smeth-&gt;dex_code_item_offset_ = dmeth-&gt;dex_code_item_offset_;</span><br><span class="line">	smeth-&gt;method_index_ = dmeth-&gt;method_index_;</span><br><span class="line">	smeth-&gt;dex_method_index_ = dmeth-&gt;dex_method_index_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现的指针也替换为新的</span></span><br><span class="line">	smeth-&gt;ptr_sized_fields_.entry_point_from_interpreter_ =</span><br><span class="line">			dmeth-&gt;ptr_sized_fields_.entry_point_from_interpreter_;</span><br><span class="line">	smeth-&gt;ptr_sized_fields_.entry_point_from_jni_ =</span><br><span class="line">			dmeth-&gt;ptr_sized_fields_.entry_point_from_jni_;</span><br><span class="line">	smeth-&gt;ptr_sized_fields_.entry_point_from_quick_compiled_code_ =</span><br><span class="line">			dmeth-&gt;ptr_sized_fields_.entry_point_from_quick_compiled_code_;</span><br><span class="line"></span><br><span class="line">	LOGD(<span class="string">"replace_6_0: %d , %d"</span>,</span><br><span class="line">			smeth-&gt;ptr_sized_fields_.entry_point_from_quick_compiled_code_,</span><br><span class="line">			dmeth-&gt;ptr_sized_fields_.entry_point_from_quick_compiled_code_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这就是上面提到的，把方法都改成public的，所以说了解一下jni还是很有必要的，java世界在c世界是有映射关系的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFieldFlag_6_0</span><span class="params">(JNIEnv* env, jobject field)</span> </span>&#123;</span><br><span class="line">	art::mirror::ArtField* artField =</span><br><span class="line">			(art::mirror::ArtField*) env-&gt;FromReflectedField(field);</span><br><span class="line">	artField-&gt;access_flags_ = artField-&gt;access_flags_ &amp; (~<span class="number">0x0002</span>) | <span class="number">0x0001</span>;</span><br><span class="line">	LOGD(<span class="string">"setFieldFlag_6_0: %d "</span>, artField-&gt;access_flags_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在dalvik上的实现略有不同，是通过jni bridge来指向补丁的方法。</p>
<p>使用上，直接写一个新的类，会由补丁工具会生成注解，描述其与要打补丁的类和方法的对应关系。</p>
<h1 id="ClassLoader">ClassLoader</h1><p>原腾讯空间Android工程师，也是我的启蒙老师的陈钟发明的热补丁方案，是他在看源码的时候偶然发现的切入点。</p>
<p>我们知道，multidex方案的实现，其实就是把多个dex放进app的classloader之中，从而使得所有dex的类都能被找到。而实际上findClass的过程中，如果出现了重复的类，参照下面的类加载的实现，是会使用第一个找到的类的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name, List&lt;Throwable&gt; suppressed)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Element element : dexElements) &#123;  <span class="comment">//每个Element就是一个dex文件</span></span><br><span class="line">        DexFile dex = element.dexFile;</span><br><span class="line">        <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dexElementsSuppressedExceptions != <span class="keyword">null</span>) &#123;  </span><br><span class="line">        suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该热补丁方案就是从这一点出发，只要把有问题的类修复后，放到一个单独的dex，通过反射插入到dexElements数组的最前面，不就可以让虚拟机加载到打完补丁的class了吗。</p>
<p>说到此处，似乎已经是一个完整的方案了，但在实践中，会发现运行加载类的时候报preverified错误，原来在<code>DexPrepare.cpp</code>，将dex转化成odex的过程中，会在<code>DexVerify.cpp</code>进行校验，验证如果直接引用到的类和clazz是否在同一个dex，如果是，则会打上CLASS_ISPREVERIFIED标志。通过在所有类（Application除外，当时还没加载自定义类的代码）的构造函数插入一个对在单独的dex的类的引用，就可以解决这个问题。空间使用了javaassist进行编译时字节码插入。</p>
<p>开源实现有<a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">Nuwa</a>, <a href="https://github.com/dodola/HotFix" target="_blank" rel="external">HotFix</a>, <a href="https://github.com/bunnyblue/DroidFix" target="_blank" rel="external">DroidFix</a>。</p>
<h1 id="比较">比较</h1><p>Dexposed不支持Art模式（5.0+），且写补丁有点困难，需要反射写混淆后的代码，粒度太细，要替换的方法多的话，工作量会比较大。</p>
<p>AndFix支持2.3-6.0，但是不清楚是否有一些机型的坑在里面，毕竟jni层不像java曾一样标准，从实现来说，方法类似Dexposed，都是通过jni来替换方法，但是实现上更简洁直接，应用patch不需要重启。但由于从实现上直接跳过了类初始化，设置为初始化完毕，所以像是静态函数、静态成员、构造函数都会出现问题，复杂点的类Class.forname很可能直接就会挂掉。</p>
<p>ClassLoader方案支持2.3-6.0，会对启动速度略微有影响，只能在下一次应用启动时生效，在空间中已经有了较长时间的线上应用，如果可以接受在下次启动才应用补丁，是很好的选择。</p>
<p>总的来说，在兼容性稳定性上，<strong>ClassLoader方案很可靠</strong>，如果需要应用<strong>不重启就能修复</strong>，而且方法足够简单，可以使用<strong>AndFix</strong>，而<strong>Dexposed由于还不能支持art</strong>，所以只能暂时放弃，希望开发者们可以改进使它能支持art模式，毕竟xposed的种种能力还是很吸引人的（比如hook别人app的方法拿到解密后的数据，嘿嘿），还有比如无痕埋点啊线上追踪问题之类的，随时可以下掉。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[新的换肤思路]]></title>
      <url>http://blog.zhaiyifan.cn/2015/11/20/new-skin-toggle-way/</url>
      <content type="html"><![CDATA[<h1 id="新的换肤思路">新的换肤思路</h1><p>前文见<a href="http://blog.zhaiyifan.cn/2015/09/10/Android%E6%8D%A2%E8%82%A4%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/">Android换肤技术总结</a></p>
<h2 id="资源注入">资源注入</h2><p>把资源放在另一个apk，类似android.jar一样作为基础资源，然后使用aapt联合编译，就可以让主工程像引用android资源一样，引用另一个apk的资源，不过如此一来，需要自己去做资源分区，否则可能会有id冲突。</p>
<p>比如我们平时会直接@android:drawable，@android:anim去直接引用anrdoid资源，现在我们可以加了一个叫做skin的包，那么就可以使用@skin:drawable来引用skin包的资源。要激活其他皮肤的时候，只要换一下包就行了。</p>
<p>相比其他方案，这种改动很小，没有那些各种hack的黑科技。希望有空能自己实现一下。</p>
<h2 id="aapt">aapt</h2><p>关于aapt的修改，可以看看携程的DynamacAPK。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[init]]></title>
      <url>http://blog.zhaiyifan.cn/2015/10/04/init/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/markzhai/init" target="_blank" rel="external">Github Page</a></p>
<h1 id="Init">Init <a href="https://maven-badges.herokuapp.com/maven-central/cn.zhaiyifan/init" target="_blank" rel="external"><img src="https://maven-badges.herokuapp.com/maven-central/cn.zhaiyifan/init/badge.svg?style=flat" alt="Maven Central"></a></h1><p>Init帮助Android应用调度复杂的任务流（如应用初始化流程），如下一节图示的那种任务流，处理类型、优先级、多进程（像是每个进程都会执行application的onCreate），任务依赖，提高应用启动效率。</p>
<p>尽管Init设计的初衷是为了应用(application)初始化，但并不局限于此，它可以于应用在任何复杂的初始化流程。</p>
<p>Init不依赖于任何第三方库，使用Java concurrent并部分依赖于Android SDK(Context, Log)，所以理论上也可以在简单修改后直接用于Java工程。</p>
<h1 id="How">How</h1><p>初始化流程被抽象为flow、wave和task。</p>
<p><img src="https://raw.githubusercontent.com/markzhai/init/master/art/flow.png" alt="flow" title="how it works"></p>
<p>flow是一个粗粒度概念，通常一个应用只有一个flow，但某些情况下我们可能拥有多个flow，像是patch flow，broadcast flow，fake UI flow等等，可以把它们都交给Init处理。</p>
<p>每个wave只有在上一wave的所有阻塞task完成后才能开始，而所有属于该wave的task会一起开始执行（除非被赋予了delay）。</p>
<p>至于task，在本库中属于原子性操作，他们可以被分为2大类型</p>
<ol>
<li>阻塞task，即图中的蓝色任务。</li>
<li>异步task，又可以被分为<ul>
<li>完全异步或者横跨若干个wave后才需要阻塞，像图中的绿色task。</li>
<li>异步链，像图中的红色task。</li>
</ul>
</li>
</ol>
<h1 id="使用">使用</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'cn.zhaiyifan:init:1.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Init需要应用context来获得进程相关信息</span></span><br><span class="line">        Init.init(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 可以使用自定义的log离开输出Init的Log，logProxy需要实现cn.zhaiyifan.appinit.ILog接口</span></span><br><span class="line">        <span class="comment">// Init.init(this, logProxy)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认Task，延迟0，且阻塞下一波task的执行，参数字符串可以用来追踪任务执行状态</span></span><br><span class="line">        Task task1 = <span class="keyword">new</span> Task(<span class="string">"task1"</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                doSomeThing();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 仅在返回true的时候才会在对应进程执行</span></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">runOnProcess</span><span class="params">(String processName)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> processName.equals(<span class="string">"cn.zhaiyifan.demo"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个task，非阻塞，且延时300毫秒执行</span></span><br><span class="line">        Task task2 = <span class="keyword">new</span> Task(<span class="string">"task2"</span>, <span class="keyword">false</span>, <span class="number">300</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                doSomeThing();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类似地，创建更多task，如task3、task4等等</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个有名flow</span></span><br><span class="line">        Flow flow = <span class="keyword">new</span> Flow(<span class="string">"flow"</span>);</span><br><span class="line">        <span class="comment">// 往flow添加刚才创建的task, 第一个参数是wave序号，会从小到大执行每个wave的task</span></span><br><span class="line">        flow.addTask(<span class="number">1</span>, task1).addTask(<span class="number">1</span>, task2).addTask(<span class="number">2</span>, task3).addTask(<span class="number">2</span>, task4);</span><br><span class="line">        <span class="comment">// 启动flow，开始初始化</span></span><br><span class="line">        Init.start(flow);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>看一下log，可以发现原来一个串行执行需要2700毫秒的任务，在我们的安排下，现在只需要1307毫秒就可以结束。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10-04 18:53:54.789 646-666/cn.zhaiyifan.init I/Task: task2 runs 500&#10;10-04 18:53:55.289 646-665/cn.zhaiyifan.init I/Task: task1 runs 1000&#10;10-04 18:53:55.591 646-741/cn.zhaiyifan.init I/Task: task3 runs 300&#10;10-04 18:53:55.592 646-646/cn.zhaiyifan.init I/Flow: flow runs 1307&#10;10-04 18:53:55.990 646-740/cn.zhaiyifan.init I/Task: task4 runs 700&#10;10-04 18:53:56.191 646-783/cn.zhaiyifan.init I/Task: task5 runs 200</span><br></pre></td></tr></table></figure></p>
<p>Useful api:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置线程池大小</span></span><br><span class="line">Init.setThreadPoolSize(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消一个已经开始的flow</span></span><br><span class="line">Init.cancel(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得flow状态</span></span><br><span class="line">Init.getFlowStatus(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得特定的task状态</span></span><br><span class="line">flow.getTaskStatus(taskName)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置超时限制</span></span><br><span class="line">flow.setTimeout(<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line">等等</span><br></pre></td></tr></table></figure></p>
<p>更多详情请见demo工程。</p>
<h1 id="为什么需要Init">为什么需要Init</h1><p>想象一下我们是怎么去初始化一个大型应用像是支付宝、QQ、微信、空间等的，我们会面对像是下面这种代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for multi-dex apps</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// log init</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// eventbus init...</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// global variables init</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// process related</span></span><br><span class="line">        String processName = ...</span><br><span class="line">        <span class="keyword">boolean</span> isMainProcess = ...</span><br><span class="line">        ProcessInit.attachBaseContext(<span class="keyword">this</span>, processName, isMainProcess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// process related</span></span><br><span class="line">        String processName = ...</span><br><span class="line">        <span class="keyword">boolean</span> isMainProcess = ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// CrashHandler, SafeMode, plugin, image manager, database, download, update, etc init</span></span><br><span class="line"></span><br><span class="line">        ProcessInit.onCreate(<span class="keyword">this</span>, processName, isMainProcess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessInit</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Application application, <span class="keyword">boolean</span> isMainProcess, String processName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isMainProcess) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (processName.contains(PUSH_PROCESS_SUFFIX)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (processName.contains(WEB_PROCESS_SUFFIX)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (processName.contains(MUSIC_PROCESS_SUFFIX)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你看到了当一个应用越来越大以后初始化能是一件多么复杂的事情，有些操作必须在另一个之后，而又有一些可以并行执行，又有的操作又需要在一个异步操作完成后才能执行……于是我们就得把每个独立的操作进行修改，有的改成异步，有的则阻塞在另一个操作后，使得代码杂乱且难以维护。</p>
<p>怎么可以使它变得简单呢？Init就是来帮助你做这个事的。</p>
<h1 id="路线图">路线图</h1><ul>
<li>1.0 <em>10月 - 一个实现上述概念的可运行库</em> 已完成</li>
<li>1.1 <strong>2015年内 - 支持更复杂的初始化flow</strong> 进行中</li>
<li>2.0 或许明年 - 从使用本库的代码可以直接逆向出初始化flow的图</li>
</ul>
<h1 id="Contribute">Contribute</h1><p>任何贡献都是受欢迎的，你可以创建一个issue或者直接发一个pull请求。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Try React Native for Android]]></title>
      <url>http://blog.zhaiyifan.cn/2015/09/16/Try-React-Native-for-Android/</url>
      <content type="html"><![CDATA[<h1 id="Overview">Overview</h1><p>Facebook 昨天发布了 React Native for Android，把 Web 和原生平台的 JavaScript 开发技术扩展到了 Google 的流行移动平台。Android开发者们终于也能试试React了。</p>
<p>本文就从 <a href="https://github.com/facebook/react-native" target="_blank" rel="external">https://github.com/facebook/react-native</a> 上的Android Sample来看看react Android是怎么跑起来的。</p>
<h1 id="要求">要求</h1><p>OSX - 目前只支持OS X（Windows泪奔，不过不要弃疗，说不定你就跑成了呢）</p>
<h1 id="Set_up">Set up</h1><p>Refers: <a href="http://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="external">http://facebook.github.io/react-native/docs/getting-started.html</a></p>
<p>首先配置一下一些android和ios通用的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br><span class="line">nvm install node &amp;&amp; nvm <span class="built_in">alias</span> default node</span><br><span class="line">brew install watchman</span><br><span class="line">brew install flow</span><br><span class="line">brew update &amp;&amp; brew upgrade</span><br></pre></td></tr></table></figure></p>
<p>Facebook还是比较友善的，直接把Android工程的gradle配置也上传了，可以直接import react-native目录，里面包含了<code>ReactAndroid</code>以及三个Example模块，都是已经写好的sample，本文选择UIExplorer工程来运行。</p>
<p>发现不能编译，当然了，还没有编译配置React Native for Android。</p>
<p>需要确保这三个安装了</p>
<ul>
<li>Android SDK version 23 (compileSdkVersion in <a href="build.gradle"><code>build.gradle</code></a>)</li>
<li>SDK build tools version 23.0.1 (buildToolsVersion in <a href="build.gradle"><code>build.gradle</code></a>)</li>
<li>Android Support Repository 17 (for Android Support Library)</li>
</ul>
<p>local.properties里面应该要有<br>sdk.dir=absolute_path_to_android_sdk<br>ndk.dir=absolute_path_to_android_ndk<br>即还需要安装ndk。</p>
<h2 id="build_React_Native_for_Android">build React Native for Android</h2><p>然后要在react-native目录下执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">./gradlew :ReactAndroid:assembleDebug</span><br></pre></td></tr></table></figure></p>
<p>就把React Native for Android给编译好了（可能会要挺久的，还要下载一些依赖）</p>
<h2 id="run_demo">run demo</h2><p>然后就可以开始运行例子了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这步其实也可以自己导入as工程然后run</span></span><br><span class="line">./gradlew :Examples:UIExplorer:android:app:installDebug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行后发现提示没有load到js？</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另起一个shell运行（记得在这之前要npm install安装一下各种依赖）</span></span><br><span class="line">./packager/packager.sh</span><br><span class="line"><span class="comment"># 打开安装的应用，点击RELOAD JS，这下应该有东西了</span></span><br></pre></td></tr></table></figure></p>
<p>PS</p>
<ul>
<li>这里我碰到提示说const符号在strict mode下不能用，于是直接暴力把package.js里面的const都换成了var</li>
<li>如果要在实机上运行，需要连接usb后adb reverse tcp:8081 tcp:8081</li>
</ul>
<h1 id="Let’s_cc">Let’s cc</h1><p>先来看几个截图</p>
<p><img src="http://img.blog.csdn.net/20150916120100099" alt="应用首页"></p>
<p><img src="http://img.blog.csdn.net/20150916120115057" alt="ProgressBar Example"></p>
<p><img src="http://img.blog.csdn.net/20150916120122839" alt="抽屉"></p>
<p>划了几下，从抽屉的行为上来看应该是fb自己写的，和DrawerLayout没什么关系（没有左边的EDGE_SIZE触发事件）</p>
<h1 id="How_it_works">How it works</h1><h2 id="XML">XML</h2><p>先看看layout xml…恩…很简单很暴力，直接加了个match_parent的ReactRootView，啥都没了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">tools:context</span>=<span class="value">".UIExplorerApp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">com.facebook.react.ReactRootView</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:id</span>=<span class="value">"@+id/react_root_view"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Java">Java</h2><p>那看来tricky的东西都在activity里面了，看看</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UIExplorerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用builder模式构建一个在ReactRootView上运行JS应用必须的ReactInstanceManager</span></span><br><span class="line">    mReactInstanceManager = ReactInstanceManager.builder()</span><br><span class="line">        .setApplication(getApplication())</span><br><span class="line">        <span class="comment">// 从应用的raw assets去读得JS bundle文件，这个例子里貌似没有实际用处</span></span><br><span class="line">        .setBundleAssetName(<span class="string">"UIExplorerApp.android.bundle"</span>)</span><br><span class="line">        <span class="comment">// JS文件路径，用于在开发时reload js，直接运行时没法读到JS就是因为文件都在这儿</span></span><br><span class="line">        .setJSMainModuleName(<span class="string">"Examples/UIExplorer/UIExplorerApp.android"</span>)</span><br><span class="line">        <span class="comment">// Package defining basic modules and view managers</span></span><br><span class="line">        .addPackage(<span class="keyword">new</span> MainReactPackage())</span><br><span class="line">        .setUseDeveloperSupport(<span class="keyword">true</span>)</span><br><span class="line">        .setInitialLifecycleState(LifecycleState.RESUMED)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把刚才构建的ReactInstanceManager和ReactRootView做了绑定，运行起react application</span></span><br><span class="line">    ((ReactRootView) findViewById(R.id.react_root_view))</span><br><span class="line">        .startReactApplication(mReactInstanceManager, <span class="string">"UIExplorerApp"</span>, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPause();</span><br><span class="line">    <span class="comment">// 把事件传到ReactInstanceManager，会更新Lifecycle和一些对应操作（如pause时候暂停一些监听）</span></span><br><span class="line">    <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">      mReactInstanceManager.onPause();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>React for Android的java sdk代码就在ReactAndroid目录下，可以看到里面还有一个<code>com.facebook.jni</code>包，目测是通过来作中转，C++的源码在ReactAndroid/src/main/jni下。</p>
<h2 id="C++_ships_what">C++ ships what</h2><p>待补</p>
<h2 id="JS">JS</h2><p>再接着看看js吧, UIEXplorer目录下一堆JS，看得头都大了，还是看看activity里面设置的那个入口js吧。</p>
<p><code>UIExplorerApp.android.js</code>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  <span class="comment">// 在Libraries下都可以找到，各种通用的库</span></span><br><span class="line">  AppRegistry,</span><br><span class="line">  BackAndroid,</span><br><span class="line">  Dimensions,</span><br><span class="line">  DrawerLayoutAndroid,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  ToolbarAndroid,</span><br><span class="line">  View,</span><br><span class="line">&#125; = React;</span><br><span class="line"><span class="comment">// 包含了具体的各个例子列表（Image、ProgressBar、ScrollView等），也就是在目录下看到的那一堆js了</span></span><br><span class="line"><span class="keyword">var</span> UIExplorerList = <span class="built_in">require</span>(<span class="string">'./UIExplorerList.android'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DRAWER_WIDTH_LEFT = <span class="number">56</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> UIExplorerApp = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      example: <span class="keyword">this</span>._getUIExplorerHome(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _getUIExplorerHome: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">'UIExplorer'</span>,</span><br><span class="line">      component: <span class="keyword">this</span>._renderHome(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  componentWillMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    BackAndroid.addEventListener(<span class="string">'hardwareBackPress'</span>, <span class="keyword">this</span>._handleBackButtonPress);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染抽屉，这里是不是有点像xml了</span></span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">DrawerLayoutAndroid</span></span><br><span class="line">        <span class="attribute">drawerPosition</span>=<span class="value">&#123;DrawerLayoutAndroid.positions.Left&#125;</span></span><br><span class="line">        <span class="attribute">drawerWidth</span>=<span class="value">&#123;Dimensions.get('window').width</span> <span class="attribute">-</span> <span class="attribute">DRAWER_WIDTH_LEFT</span>&#125;</span><br><span class="line">        <span class="attribute">keyboardDismissMode</span>=<span class="value">"on-drag"</span></span><br><span class="line">        <span class="attribute">ref</span>=<span class="value">&#123;(drawer)</span> =&gt;</span> &#123; this.drawer = drawer; &#125;&#125;</span><br><span class="line">        renderNavigationView=&#123;this._renderNavigationView&#125;&gt;</span><br><span class="line">        &#123;this._renderNavigation()&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="title">DrawerLayoutAndroid</span>&gt;</span></span><br><span class="line">      )</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 抽屉内的列表</span></span><br><span class="line">  _renderNavigationView: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">UIExplorerList</span></span><br><span class="line">        <span class="attribute">onSelectExample</span>=<span class="value">&#123;this.onSelectExample&#125;</span></span><br><span class="line">        <span class="attribute">isInDrawer</span>=<span class="value">&#123;true&#125;</span></span><br><span class="line">      /&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击处理</span></span><br><span class="line">  onSelectExample: <span class="function"><span class="keyword">function</span>(<span class="params">example</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.drawer.closeDrawer();</span><br><span class="line">    <span class="comment">// 返回首页</span></span><br><span class="line">    <span class="keyword">if</span> (example.title === <span class="keyword">this</span>._getUIExplorerHome().title) &#123;</span><br><span class="line">      example = <span class="keyword">this</span>._getUIExplorerHome();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      example: example,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染首页列表</span></span><br><span class="line">  _renderHome: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> onSelectExample = <span class="keyword">this</span>.onSelectExample;</span><br><span class="line">    <span class="keyword">return</span> React.createClass(&#123;</span><br><span class="line">      render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="xml"><span class="tag">&lt;<span class="title">UIExplorerList</span></span><br><span class="line">            <span class="attribute">onSelectExample</span>=<span class="value">&#123;onSelectExample&#125;</span></span><br><span class="line">            <span class="attribute">isInDrawer</span>=<span class="value">&#123;false&#125;</span></span><br><span class="line">          /&gt;</span></span><br><span class="line">        )</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染导航栏</span></span><br><span class="line">  _renderNavigation: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Component = <span class="keyword">this</span>.state.example.component;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="title">View</span> <span class="attribute">style</span>=<span class="value">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ToolbarAndroid</span></span><br><span class="line">          <span class="attribute">logo</span>=<span class="value">&#123;require('image!launcher_icon')&#125;</span></span><br><span class="line">          <span class="attribute">navIcon</span>=<span class="value">&#123;require('image!ic_menu_black_24dp')&#125;</span></span><br><span class="line">          <span class="attribute">onIconClicked</span>=<span class="value">&#123;()</span> =&gt;</span> this.drawer.openDrawer()&#125;</span><br><span class="line">          style=&#123;styles.toolbar&#125;</span><br><span class="line">          title=&#123;this.state.example.title&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="title">Component</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line">    )</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 回退按钮事件处理</span></span><br><span class="line">  _handleBackButtonPress: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 不在首页</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.example.title !== <span class="keyword">this</span>._getUIExplorerHome().title) &#123;</span><br><span class="line">      <span class="keyword">this</span>.onSelectExample(<span class="keyword">this</span>._getUIExplorerHome());</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  toolbar: &#123;</span><br><span class="line">    backgroundColor: <span class="string">'#E9EAED'</span>,</span><br><span class="line">    height: <span class="number">56</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还记得Activity调用的startReactApplication吗，这里就是注册了那里调用的moduleName</span></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'UIExplorerApp'</span>, () =&gt; UIExplorerApp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = UIExplorerApp;</span><br></pre></td></tr></table></figure></p>
<h1 id="Write_our_own_react_app">Write our own react app</h1><p>继续回到react-native目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 安装react-native命令行工具</span><br><span class="line">npm install -g react-native-cli</span><br><span class="line">// 初始化项目，又是一个漫长的等待</span><br><span class="line">react-native init OurSampleApp</span><br></pre></td></tr></table></figure></p>
<p>待续…</p>
<h1 id="总结">总结</h1><p>React native并不能带来1份代码2个平台跑，正如Facebook说的，<code>Learn once, write anywhere</code>，由于组件库和Hybrid API不同，所以一份代码运行在Android/iOS/Web无法通过直接使用react-native实现，可能需要改造和包装。但至少可以规划好，从而使得三个平台的react结构类似（说好的Android/iOS不同设计呢）。</p>
<p>从UI流畅度来看，远远超越了过去的那些hybrid framework像是phonegap。</p>
<p>对现有应用的集成，由于网络/缓存/原应有的复杂业务逻辑，集成可能还是会遇到不少麻烦的。</p>
<p>在打开抽屉后也发现了overdraw的问题，见图<br><img src="http://img.blog.csdn.net/20150916135742418" alt="抽屉Overdraw"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LyricHere]]></title>
      <url>http://blog.zhaiyifan.cn/2015/09/13/LyricHere/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/markzhai/LyricHere" target="_blank" rel="external">Github Page</a><br><a href="https://github.com/markzhai/LyricHere/releases/download/v2.0-beta/lyric-here.apk" target="_blank" rel="external">Demo Apk</a></p>
<p>Material design music and lyric player. Using Android’s new android.media.MediaMetadata series api to implement. (<a href="https://github.com/markzhai/LyricHere/blob/master/README_CN.md" target="_blank" rel="external">中文戳这里</a>)</p>
<h2 id="Pre-requisites">Pre-requisites</h2><ul>
<li>Android SDK v14</li>
</ul>
<h2 id="Features">Features</h2><ul>
<li>Local music browser and player.</li>
<li>Music player widget, notification widget.</li>
<li>Lyric directly refresh on notification, see it whenever you want.</li>
<li>Powerful LyricView which supports scrolling up and down to change offset.</li>
<li>Receive broadcast from popular music players and pop up lyric open notification.</li>
</ul>
<h2 id="TODO(Pull_request_is_welcomed)">TODO(Pull request is welcomed)</h2><ul>
<li>Use Google Design Support UI.</li>
<li>Better implementation for Music player, show lyric directly.</li>
<li>Download lyric from server and upload to server.</li>
<li>Add support lyric file encoding auto-recognize.</li>
</ul>
<h2 id="Tested">Tested</h2><ul>
<li>Nexus 6 (5.1.1)</li>
<li>OnePlus (4.3)</li>
</ul>
<h2 id="Screenshots">Screenshots</h2><p><img src="https://raw.githubusercontent.com/markzhai/LyricHere/master/art/Screenshot_2015-09-12-23-14-37.jpg" alt="Browse local music file" title="Browse local music file"><br><img src="https://raw.githubusercontent.com/markzhai/LyricHere/master/art/Screenshot_2015-09-12-21-13-22.jpg" alt="Fullscreen music player" title="Fullscreen music player"><br><img src="https://raw.githubusercontent.com/markzhai/LyricHere/master/art/Screenshot_2015-09-12-21-13-40.jpg" alt="Lyric explorer" title="Lyric explorer"><br><img src="https://raw.githubusercontent.com/markzhai/LyricHere/master/art/Screenshot_2015-03-20-17-11-09.jpg" alt="Lyric player" title="Lyric player"><br><img src="https://raw.githubusercontent.com/markzhai/LyricHere/master/art/Screenshot_2015-03-20-17-11-28.jpg" alt="Lyric encoding picker" title="Lyric encoding picker"><br><img src="https://raw.githubusercontent.com/markzhai/LyricHere/master/art/Screenshot_2015-09-09-23-12-51.jpg" alt="Notification" title="Notification"><br><img src="https://raw.githubusercontent.com/markzhai/LyricHere/master/art/Screenshot_2015-09-12-22-43-59.jpg" alt="Lock Screen Background" title="Lock Screen Background"></p>
<h2 id="LIBRARY">LIBRARY</h2><ul>
<li>Android Support Library</li>
<li>Butter Knife</li>
<li>DBFlow</li>
<li>IcePick</li>
<li>Mosby</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android换肤技术总结]]></title>
      <url>http://blog.zhaiyifan.cn/2015/09/10/Android%E6%8D%A2%E8%82%A4%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="Android换肤技术总结">Android换肤技术总结</h1><h2 id="背景">背景</h2><p>纵观现在各种Android app，其换肤需求可以归为</p>
<ul>
<li>白天/黑夜主题切换（或者别的名字，通常2套），如同花顺/自选股/天天动听等，UI表现为一个switcher。</li>
<li>多种主题切换，通常为会员特权，如QQ/QQ空间。</li>
</ul>
<p>对于第一种来说，目测应该是直接通过本地theme来做的，即所有图片/颜色的资源都在apk里面打包了。</p>
<p>而对于第二种，则相对复杂一些，由于作为一种线上服务，可能上架新皮肤，且那么多皮肤包放在apk里面实在太占体积了，所以皮肤资源会在选择后再进行下载，也就不能直接使用android的那套theme。</p>
<h2 id="技术方案">技术方案</h2><p>内部资源加载方案和动态下载资源下载两种。</p>
<p>动态下载可以称为一种黑科技了，因为往往需要hack系统的一些方法，所以在部分机型和新的API上有时候可能有坑，但相对好处则很多</p>
<ul>
<li>图片/色值等资源由于是后台下发的，可以随时更新</li>
<li>APK体积减小</li>
<li>对应用开发者来说，换肤几乎是透明的，不需要关心有几套皮肤</li>
<li><strong>可以作为增值服务卖钱！！</strong></li>
</ul>
<h2 id="内部资源加载方案">内部资源加载方案</h2><p>内部资源加载都是通过android本身那套theme来做的，相对业务开发来说工作量更大（需要定义attr和theme），不同方案类似地都是在<code>BaseActivity</code>里面做<code>setTheme</code>，差别主要在解决以下2个问题的策略：</p>
<ul>
<li>setTheme后如何实时刷新，而不用重新创建页面（尤其是listview里面的item）。</li>
<li>哪些view需要刷新，刷新什么（背景？字体颜色？ImageView的src？）。</li>
</ul>
<h3 id="自定义view">自定义view</h3><p><a href="https://github.com/dersoncheng/MultipleTheme" target="_blank" rel="external">MultipleTheme</a><br>做自定义view是为了在setTheme后会去立即刷新，更新页面UI对应资源（如TextView替换背景图和文字颜色），在上述项目中，则是通过对rootView进行遍历，对所有实现了<code>ColorUiInterface</code>的view/viewgroup进行setTheme操作来实现即使刷新的。</p>
<p>显然这样太重了，需要把应用内的各种view/viewgroup进行替换。</p>
<h3 id="手动绑定view和要改变的资源类型">手动绑定view和要改变的资源类型</h3><p><a href="https://github.com/bboyfeiyu/Colorful" target="_blank" rel="external">Colorful</a></p>
<p>这个…我们看看用法吧….<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ViewGroupSetter listViewSetter = <span class="keyword">new</span> ViewGroupSetter(mNewsListView);</span><br><span class="line"><span class="comment">// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性</span></span><br><span class="line">listViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建Colorful对象来绑定View与属性的对象关系</span></span><br><span class="line">mColorful = <span class="keyword">new</span> Colorful.Builder(<span class="keyword">this</span>)</span><br><span class="line">        .backgroundDrawable(R.id.root_view, R.attr.root_view_bg)</span><br><span class="line">        <span class="comment">// 设置view的背景图片</span></span><br><span class="line">        .backgroundColor(R.id.change_btn, R.attr.btn_bg)</span><br><span class="line">        <span class="comment">// 设置背景色</span></span><br><span class="line">        .textColor(R.id.textview, R.attr.text_color)</span><br><span class="line">        .setter(listViewSetter) <span class="comment">// 手动设置setter</span></span><br><span class="line">        .create(); <span class="comment">// 设置文本颜色</span></span><br></pre></td></tr></table></figure></p>
<p>我就是想换个皮肤，还得在activity里自己去设置要改变哪个view的什么属性，对应哪个attribute？是不是成本太高了？而且activity的逻辑也很容易被弄得乱七八糟。</p>
<h2 id="动态资源加载方案">动态资源加载方案</h2><h3 id="resource替换">resource替换</h3><p>覆盖application的getResource方法，实现自己的resource，优先加载本地皮肤包文件夹下的资源包，对于性能问题，可以通过attribute或者资源名称规范(如需要换肤则用skin_开头)来优化，从而不对不换肤的资源进行额外检查开销。</p>
<p>不过由于Android5.1源码里，drawable初始化的时候调用的是loadDrawable，而不是resource.getDrawable，而loadDrawable是私有的方法，无法覆盖，所以虽然很方便，却无法继续使用（不用关心任何皮肤相关的事情，android:color指定颜色就行了，神奇滴会自动换肤）。</p>
<h3 id="自定义LayoutInflator-Factory">自定义LayoutInflator.Factory</h3><p>开源项目可参照<a href="https://github.com/fengjundev/Android-Skin-Loader" target="_blank" rel="external">Android-Skin-Loader</a>。</p>
<p>即setFactory使用自定义的LayoutInflator.Factory，可以重点关注该项目中的<code>SkinInflaterFactory</code>和<code>SkinManager</code>（实现了自己的getColor、getDrawable、getBitmap、getColorStateList等等方法）。</p>
<p>需要自定义一个tag比如app:customStyle，重写所有的style，转成set方法，这样带来的牺牲就是增加了换肤的成本，要写很多style，自己去set，并不完全透明了。</p>
<h3 id="Hack_Resources_internally">Hack Resources internally</h3><p>黑科技方法，直接对Resources进行hack，<code>Resources.java:</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Information about preloaded resources.  Note that they are not</span></span><br><span class="line"><span class="comment">// protected by a lock, because while preloading in zygote we are all</span></span><br><span class="line"><span class="comment">// single-threaded, and after that these are immutable.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LongSparseArray&lt;Drawable.ConstantState&gt;[] sPreloadedDrawables;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LongSparseArray&lt;Drawable.ConstantState&gt; sPreloadedColorDrawables</span><br><span class="line">        = <span class="keyword">new</span> LongSparseArray&lt;Drawable.ConstantState&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LongSparseArray&lt;ColorStateList&gt; sPreloadedColorStateLists</span><br><span class="line">        = <span class="keyword">new</span> LongSparseArray&lt;ColorStateList&gt;();</span><br></pre></td></tr></table></figure></p>
<p>直接对Resources里面的这三个LongSparseArray进行替换，由于apk运行时的资源都是从这三个数组里面加载的，所以只要采用interceptor模式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawablePreloadInterceptor</span> <span class="keyword">extends</span> <span class="title">LongSparseArray</span>&lt;<span class="title">Drawable</span>.<span class="title">ConstantState</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>自己实现一个LongSparseArray，并通过反射set回去，就能实现换肤，具体getDrawable等方法里是怎么取preload数组的，可以自己看<code>Resources</code>的源码。</p>
<p><strong>等等，就这么简单？</strong>，NONO，少年你太天真了，怎么去加载xml，9patch的padding怎么更新，怎么打包/加载自定义的皮肤包，drawable的状态怎么刷新，等等。这些都是你需要考虑的，在存在插件的app中，还需要考虑是否会互相覆盖resource id的问题，进而需要修改apt，把resource id按位放在2个range。</p>
<p>手Q和独立版QQ空间使用的是这种方案，效果挺好。</p>
<h2 id="总结">总结</h2><p>尽管动态加载方案比较黑科技，可能因为系统API的更改而出问题，但相对来所<br><strong>好处有</strong></p>
<ul>
<li>灵活性高，后台可以随时更新皮肤包</li>
<li>相对透明，开发者几乎不用关心有几套皮肤，不用去定义各种theme和attr，甚至连皮肤包的打包都可以交给设计或者专门的同学</li>
<li>apk体积节省<br><strong>存在的问题</strong><br>没有完善的开源项目，如果我们采用动态加载的第二种方案，需要的项目功能包括：</li>
<li>自定义皮肤包结构</li>
<li>换肤引擎，加载皮肤包资源并load，实时刷新。</li>
<li>皮肤包打包工具</li>
<li>对各种rom的兼容</li>
</ul>
<p><strong>如果有这么一个项目的话，就一劳永逸了，有兴趣的同学可以联系一下，大家一起搞一搞。</strong></p>
<p>内部加载方案大同小异，主要解决的都是即时刷新的问题，然而从目前的一些开源项目来看，仍然没有特别简便的方案。让我选的话，我宁愿让界面重新创建，比如重启activity，或者remove所有view再添加回来（或者你可能想遍历rootview，然后一个个检查是否需要换肤然后set…）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Facebook Rebound 弹性动画库 源码分析]]></title>
      <url>http://blog.zhaiyifan.cn/2015/09/10/facebook-rebound-source/</url>
      <content type="html"><![CDATA[<h1 id="Rebound源码分析">Rebound源码分析</h1><p>对于想体验一下rebound的效果，又懒得clone和编译代码的，这里提供一个<a href="http://pan.baidu.com/s/1o6y3qcy" target="_blank" rel="external">demo apk</a>。</p>
<p>今天看到了tumblr发布了基于<a href="https://github.com/facebook/rebound" target="_blank" rel="external">rebound</a>的<a href="https://github.com/tumblr/Backboard" target="_blank" rel="external">Backboard</a>，本想直接分析一下Backboard对rebound做了些什么，不过考虑到rebound还没有仔细分析过，所以这里做一下源码分析。</p>
<p>对外部来说，首先接触的就是<code>SpringSystem</code>了，但在说它之前，先让我们看看<code>Spring</code>是什么。</p>
<h2 id="Spring">Spring</h2><p>Spring通过可设置的摩擦力(Friction)和张力(tension)实现了<a href="http://baike.baidu.com/view/127907.htm" target="_blank" rel="external">胡克定律</a>，通过代码模拟了物理场景：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PhysicsState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> position;</span><br><span class="line">  <span class="keyword">double</span> velocity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PhysicsState mCurrentState = <span class="keyword">new</span> PhysicsState();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PhysicsState mPreviousState = <span class="keyword">new</span> PhysicsState();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PhysicsState mTempState = <span class="keyword">new</span> PhysicsState();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> mStartValue;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> mEndValue;</span><br></pre></td></tr></table></figure></p>
<p>每个spring从<code>mStartValue</code>到<code>mEndValue</code>进行运动，内部维护了当前状态、前值状态，以及临时状态，每个状态由通过位置和速度来描述，而运动的推进逻辑则在<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">advance</span><span class="params">(<span class="keyword">double</span> realDeltaTime)</span></span></span><br></pre></td></tr></table></figure></p>
<p><code>advance</code>方法中，SpringSystem会遍历由其管理的所有Spring实例，对它们进行<code>advance</code>。</p>
<h2 id="SpringListener">SpringListener</h2><p>每个<code>Spring</code>内部都维护着一个<code>SpringListener</code>数组，这也是我们经常会需要去实现的一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringListener</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onSpringUpdate</span><span class="params">(Spring spring)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onSpringAtRest</span><span class="params">(Spring spring)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onSpringActivate</span><span class="params">(Spring spring)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onSpringEndStateChange</span><span class="params">(Spring spring)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>按照先后顺序：</p>
<ul>
<li>onSpringActivate在首次开始运动时候调用。</li>
<li>onSpringUpdate在advance后调用，表示状态更新。</li>
<li>onSpringAtRest在进入rest状态后调用。</li>
<li>onSpringEndStateChange则略有不同，仅在<code>setEndValue</code>中被调用，且该<code>Spring</code>需要在运动中且新的endValue不等于原endValue。</li>
</ul>
<h2 id="SpringSystem">SpringSystem</h2><p><code>SpringSystem</code>继承了<code>BaseSpringSystem</code>，对外提供了一个静态create方法，并屏蔽了Construtor：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SpringSystem <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SpringSystem(AndroidSpringLooperFactory.createSpringLooper());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SpringSystem</span><span class="params">(SpringLooper springLooper)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(springLooper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到create方法里面默认给了一个<code>SpringLooper</code>的工厂类创建实例（内部根据系统版本是否&gt;=3.0返回了不同的子类实例），而<code>SpringLooper</code>顾名思义是一个Looper，做的就是不断地更新<code>SpringSystem</code>的状态，实际调用了<code>BaseSpringSystem</code>的<code>loop</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * loop the system until idle</span><br><span class="line"> * <span class="doctag">@param</span> elapsedMillis elapsed milliseconds</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">(<span class="keyword">double</span> elapsedMillis)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (SpringSystemListener listener : mListeners) &#123;</span><br><span class="line">    listener.onBeforeIntegrate(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  advance(elapsedMillis);</span><br><span class="line">  <span class="keyword">if</span> (mActiveSprings.isEmpty()) &#123;</span><br><span class="line">    mIdle = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (SpringSystemListener listener : mListeners) &#123;</span><br><span class="line">    listener.onAfterIntegrate(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (mIdle) &#123;</span><br><span class="line">    mSpringLooper.stop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>即通过每次elapse的时间，来把system往前advance（有点类似游戏里，每一帧的运动，如果不够快就会掉帧，这里对应地，elapsedMillis则可能会很大）。</p>
<p>大部分的逻辑其实在<code>BaseSpringSystem</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseSpringSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Spring&gt; mSpringRegistry = <span class="keyword">new</span> HashMap&lt;String, Spring&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Spring&gt; mActiveSprings = <span class="keyword">new</span> CopyOnWriteArraySet&lt;Spring&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SpringLooper mSpringLooper;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CopyOnWriteArraySet&lt;SpringSystemListener&gt; mListeners = <span class="keyword">new</span> CopyOnWriteArraySet&lt;SpringSystemListener&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> mIdle = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></p>
<p><code>mSpringRegistry</code>保存了所有由该<code>SpringSystem</code>管理的<code>Spring</code>实例，键值String则是Spring内的一个自增id，每个<code>Spring</code>实例的id都会不同。通过<code>createSpring</code>创建的<code>Spring</code>实例都会直接被加到该HashMap。</p>
<p><code>mActiveSprings</code>内放的是被激活的<code>Spring</code>，实际在调用<code>Spring.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Spring <span class="title">setCurrentValue</span><span class="params">(<span class="keyword">double</span> currentValue, <span class="keyword">boolean</span> setAtRest)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Spring <span class="title">setEndValue</span><span class="params">(<span class="keyword">double</span> endValue)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Spring <span class="title">setVelocity</span><span class="params">(<span class="keyword">double</span> velocity)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>三个方法的时候才会进行激活，且在实际loop过程中，也只会对激活的Spring进行advance。</p>
<p><code>mSpringLooper</code>是该<code>SpringSystem</code>绑定的Looper。</p>
<p><code>mListeners</code>是注册在该<code>SpringSystem</code>上的<code>SpringSystemListener</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringSystemListener</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onBeforeIntegrate</span><span class="params">(BaseSpringSystem springSystem)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onAfterIntegrate</span><span class="params">(BaseSpringSystem springSystem)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>会在<code>SpringSystem</code>的<code>loop</code>方法开始和结束时候调用<code>onBeforeIntegrate</code>以及<code>onAfterIntegrate</code>，比如可以在所有Spring loop完之后检查它们的值，并进行速度限制，暂停等操作，相对于绑定到<code>Spring</code>的<code>SpringListener</code>，这个更全局一些。</p>
<h2 id="SpringChain">SpringChain</h2><p>顾名思义，<code>SpringChain</code>就是连锁Spring，由数个<code>Spring</code>结合而成，且两两相连，可以用来做一些连锁的效果，比如数个图片之间的牵引效果。</p>
<p>每个<code>SpringChain</code>都会有一个control spring来作为带头大哥，在链中前后的<code>Spring</code>都会被他们的前任所拉动。比如我们有 1 2 3 4 5五个Spring，选择3作为带头大哥，则3开始运动后，会分别拉动2和4，然后2会拉1，4则去拉动5。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SpringChain</span><span class="params">(</span><br><span class="line">    <span class="keyword">int</span> mainTension,</span><br><span class="line">    <span class="keyword">int</span> mainFriction,</span><br><span class="line">    <span class="keyword">int</span> attachmentTension,</span><br><span class="line">    <span class="keyword">int</span> attachmentFriction)</span> </span>&#123;</span><br><span class="line">  mMainSpringConfig = SpringConfig.fromOrigamiTensionAndFriction(mainTension, mainFriction);</span><br><span class="line">  mAttachmentSpringConfig =</span><br><span class="line">      SpringConfig.fromOrigamiTensionAndFriction(attachmentTension, attachmentFriction);</span><br><span class="line">  registry.addSpringConfig(mMainSpringConfig, <span class="string">"main spring "</span> + id++);</span><br><span class="line">  registry.addSpringConfig(mAttachmentSpringConfig, <span class="string">"attachment spring "</span> + id++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>SpringChain有两个配置：</p>
<ul>
<li>ControlSpring使用<code>mMainSpringConfig</code>。</li>
<li>其他<code>Spring</code>则使用<code>mAttachmentSpringConfig</code>。</li>
</ul>
<p>在什么参数都不带的构造函数中，会默认给出如下参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAIN_TENSION = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAIN_FRICTION = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_ATTACHMENT_TENSION = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_ATTACHMENT_FRICTION = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p>
<p>即ControlSpring摩擦力和张力都会相对小一些。</p>
<p><code>SpringChain</code>本身实现了<code>SpringListener</code>，并使用那些接口来进行整个chain的更新。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpringUpdate</span><span class="params">(Spring spring)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得control spring的索引，并更新前后Spring的endValue，从而触发连锁影响</span></span><br><span class="line">    <span class="keyword">int</span> idx = mSprings.indexOf(spring);</span><br><span class="line">    SpringListener listener = mListeners.get(idx);</span><br><span class="line">    <span class="keyword">int</span> above = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> below = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (idx == mControlSpringIndex) &#123;</span><br><span class="line">        below = idx - <span class="number">1</span>;</span><br><span class="line">        above = idx + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (idx &lt; mControlSpringIndex) &#123;</span><br><span class="line">        below = idx - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (idx &gt; mControlSpringIndex) &#123;</span><br><span class="line">        above = idx + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (above &gt; -<span class="number">1</span> &amp;&amp; above &lt; mSprings.size()) &#123;</span><br><span class="line">        mSprings.get(above).setEndValue(spring.getCurrentValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (below &gt; -<span class="number">1</span> &amp;&amp; below &lt; mSprings.size()) &#123;</span><br><span class="line">        mSprings.get(below).setEndValue(spring.getCurrentValue());</span><br><span class="line">    &#125;</span><br><span class="line">    listener.onSpringUpdate(spring);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpringAtRest</span><span class="params">(Spring spring)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = mSprings.indexOf(spring);</span><br><span class="line">    mListeners.get(idx).onSpringAtRest(spring);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpringActivate</span><span class="params">(Spring spring)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = mSprings.indexOf(spring);</span><br><span class="line">    mListeners.get(idx).onSpringActivate(spring);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpringEndStateChange</span><span class="params">(Spring spring)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = mSprings.indexOf(spring);</span><br><span class="line">    mListeners.get(idx).onSpringEndStateChange(spring);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通常我们想要这个<code>SpringChain</code>进行运动会调用mSpringChain.setControlSpringIndex(0).getControlSpring().setEndValue(1);</p>
<p>ControlSpring便会开始运动，并调用到<code>SpringChain</code>作为<code>SpringListener</code>的那些方法，进而整个系统作为一个链开始运动。</p>
<h2 id="SpringConfiguratorView">SpringConfiguratorView</h2><p><code>SpringConfiguratorView</code>继承了<code>FrameLayout</code>，如果体验过demo apk的同学，应该注意到屏幕底下上拉可以对Spring的参数进行配置，这就是由<code>SpringConfiguratorView</code>做的了。</p>
<h2 id="AnimationQueue">AnimationQueue</h2><p>同样是用来做连锁动画的，不过Backboard没有用到这个，Facebook自己的例子也没有用过该类，以前做动画的时候用过这个，结果貌似是有什么坑，最后改成了SpringChain去实现。</p>
<p>AnimationQueue本身和Rebound没有任何关系，内部定义了接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFrame</span><span class="params">(Double value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原理倒是有点像rebound。由于和rebound本身没关系，这里就不多说了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[intellij老是警告的SparseArray是什么 - HashMap的替代者]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/28/intellij%E8%80%81%E6%98%AF%E8%AD%A6%E5%91%8A%E7%9A%84SparseArray%E6%98%AF%E4%BB%80%E4%B9%88-HashMap%E7%9A%84%E6%9B%BF%E4%BB%A3%E8%80%85/</url>
      <content type="html"><![CDATA[<p>如果只想看比较和结论，可以直接跳到最后</p>
<h1 id="序言">序言</h1><p>身为一个有代码洁癖的程序员，在写Android应用的时候，我总是会去注意</p>
<ul>
<li>代码规范（Google Android Guideline）</li>
<li>能一行搞定的代码，绝不写两行</li>
<li>决不让编译器（intellij, as）右边滚动条有黄色</li>
<li>不重复自己</li>
</ul>
<p>当然了，实际开发中，编译器报的warning有些不太好避免，比如有些空指针，编译器从android源码来看，觉得不会出现空指针，但是实际情况下….你懂得，部分rom手贱改坏了源码，结果就crash了，所以我们能做的，就是尽量减少warning。</p>
<p>扯了这么多，说回主题，有时候在HashMap申明那行，intellij会报warning，说用SparseArray更好，那么SparseArray究竟是什么东西，为什么更好，为什么提示说更省内存呢？</p>
<p><strong>本文以api 21的源码为准</strong></p>
<h1 id="SparseArray源码分析">SparseArray源码分析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// E对应HashMap的Value</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用来优化删除性能，标记已经删除的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object DELETED = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">// 用来优化删除性能，标记是否需要垃圾回收</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mGarbage = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储索引，整数索引从小到大被映射在该数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mKeys;</span><br><span class="line">    <span class="comment">// 存储对象</span></span><br><span class="line">    <span class="keyword">private</span> Object[] mValues;</span><br><span class="line">    <span class="comment">// 实际大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSize;</span><br></pre></td></tr></table></figure>
<p>构造函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SparseArray</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="comment">// EmptyArray是一个不需要数组分配的轻量级表示。</span></span><br><span class="line">        mKeys = EmptyArray.INT;</span><br><span class="line">        mValues = EmptyArray.OBJECT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mValues = ArrayUtils.newUnpaddedObjectArray(initialCapacity);</span><br><span class="line">        mKeys = <span class="keyword">new</span> <span class="keyword">int</span>[mValues.length];</span><br><span class="line">    &#125;</span><br><span class="line">    mSize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里也充分节约了内存。newUnpaddedObjectArray最后指向了VMRuntime的一个native方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 返回一个至少长minLength的数组，但可能更大。增长的大小来自于避免数组后的任何padding。padding的大小依赖于componentType和内存分配器的实现</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title">newUnpaddedArray</span><span class="params">(Class&lt;?&gt; componentType, <span class="keyword">int</span> minLength)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>Get方法使用了二分查找<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 获得指定key的映射对象，或者null如果没有该映射。</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(key, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> key, E valueIfKeyNotFound)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 二分查找</span></span><br><span class="line">    <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line">	<span class="comment">// 如果没找到或者该value已经被标记删除</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || mValues[i] == DELETED) &#123;</span><br><span class="line">        <span class="keyword">return</span> valueIfKeyNotFound;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (E) mValues[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对应的二分查找实现这里就不赘述了，大致就是一个对有序数组一分为二比较中间值和目标值的循环查找。</p>
<p>其中比较巧妙的一点是在没有找到的时候会返回一个~low的index，其有两个作用：</p>
<ul>
<li>告诉调用者没有找到</li>
<li>调用者可以直接用~result获得该元素应该插入的位置(-(insertion point) - 1)。</li>
</ul>
<p>对应的put方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 添加一个指定key到指定object的映射，如果之前有一个指定key的映射则直接替换掉原映射object。</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, E value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 该key原来有了，替换掉</span></span><br><span class="line">        mValues[i] = value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 做一个负运算，获得应该插入的index</span></span><br><span class="line">        i = ~i;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// size足够且原value已经被标记为删除</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; mSize &amp;&amp; mValues[i] == DELETED) &#123;</span><br><span class="line">            mKeys[i] = key;</span><br><span class="line">            mValues[i] = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 走到这里就说么i超出了size，或者对应元素是有效的</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 被标记为需要垃圾回收且SparseArray大小不小于keys数组长度</span></span><br><span class="line">        <span class="keyword">if</span> (mGarbage &amp;&amp; mSize &gt;= mKeys.length) &#123;</span><br><span class="line">            <span class="comment">// 压缩空间（这里源码有点逗，竟然还有Log.e的注释留在那里，看来Android源码工程师也是要调试的），会压缩数组，把无效的值都去掉，保证连续有效值</span></span><br><span class="line">            gc();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 再次查找因为索引可能改变</span></span><br><span class="line">            i = ~ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 插入，如果size不够则会重新分配更大的数组，然后拷贝过去并插入；size足够则用System.arraycopy把插入位置开始的value都后移然后插入</span></span><br><span class="line">        mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);</span><br><span class="line">        mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);</span><br><span class="line">        <span class="comment">// 实际大小加1</span></span><br><span class="line">        mSize++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在看看remove(del)方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 如果有的话，删除对应key的映射</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 又是二分查找</span></span><br><span class="line">    <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line">	<span class="comment">// 存在则标记对应value为DELETED，且置位mGarbage</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mValues[i] != DELETED) &#123;</span><br><span class="line">            mValues[i] = DELETED;</span><br><span class="line">            mGarbage = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * &#123;<span class="doctag">@link</span> #delete(int)&#125;的别名.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    delete(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 删除指定索引的映射（这个有点暴力啊，用的应该比较少吧，直接指定位置了）</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 就是delete里面那段方法，如此说来为什么delete不调用removeAt而要重复这段代码呢</span></span><br><span class="line">    <span class="keyword">if</span> (mValues[index] != DELETED) &#123;</span><br><span class="line">        mValues[index] = DELETED;</span><br><span class="line">        mGarbage = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>大致看了crud的这几个方法，应该有个一个初步了解了吧，SparseArray因为key是一个纯粹的整数数组，避免了auto-boxing key和额外的数据结构去映射K/V关系，从而节省了内存。</p>
<p>当然了，这里也有一个tradeoff，由于key数组需要有序，所以每次都会相对简单的写操作更花费时间，要去二分查找，要在数组删除/插入元素。所以对应地为了优化，因为了mGarbage和DELETED，将可能的多次gc合并为一次，延迟到必须的时候执行。</p>
<p>源码注释里也提到了，该类不适合用于大数据量，上百个entry的时候差别在50%以内，尚可以接受，毕竟在移动端我们缺的，往往是内存，而不是CPU。</p>
<h1 id="HashMap源码分析">HashMap源码分析</h1><p>相较SparseArray，HashMap的实现就复杂一点了，因为其支持多种key（甚至null），还要实现Iterator。这里我们主要看看基本操作实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * transient关键字表示不需要序列化。</span><br><span class="line"> * Hash表，null key的在下面。</span><br><span class="line"> * HashMapEntry定义了K/V映射，hash值，以及next元素</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">transient</span> HashMapEntry&lt;K, V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 该entry代表null key, 或者不存在该映射.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">transient</span> HashMapEntry&lt;K, V&gt; entryForNullKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * hash map的映射数量.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 结构修改的时候自增，来做（最大努力的）并发修改检测</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * hash表会在大小超过该阙值的时候做rehash。通常该值为0.75 * capacity, 除非容量为0，即上面的EMPTY_TABLE声明。</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Capacity: "</span> + capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (capacity == <span class="number">0</span>) &#123;</span><br><span class="line">	    <span class="comment">// 和SparseArray类似，所有空的实例共享同一个EMPTY表示</span></span><br><span class="line">        HashMapEntry&lt;K, V&gt;[] tab = (HashMapEntry&lt;K, V&gt;[]) EMPTY_TABLE;</span><br><span class="line">        table = tab;</span><br><span class="line">        <span class="comment">// 强制先put()来替换EMPTY_TABLE</span></span><br><span class="line">        threshold = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (capacity &lt; MINIMUM_CAPACITY) &#123;</span><br><span class="line">        capacity = MINIMUM_CAPACITY;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (capacity &gt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        capacity = MAXIMUM_CAPACITY;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 难道是为了内存padding</span></span><br><span class="line">        capacity = Collections.roundUpToPowerOfTwo(capacity);</span><br><span class="line">    &#125;</span><br><span class="line">    makeTable(capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 根据给定容量分配一个hash表，并设置对应阙值。</span><br><span class="line"> * <span class="doctag">@param</span> newCapacity 必须是2的次数，因为要内存对齐</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> HashMapEntry&lt;K, V&gt;[] makeTable(<span class="keyword">int</span> newCapacity) &#123;</span><br><span class="line"><span class="comment">// 这么做难道是为了同步性考虑</span></span><br><span class="line">HashMapEntry&lt;K, V&gt;[] newTable</span><br><span class="line">            = (HashMapEntry&lt;K, V&gt;[]) <span class="keyword">new</span> HashMapEntry[newCapacity];</span><br><span class="line">    table = newTable;</span><br><span class="line">    threshold = (newCapacity &gt;&gt; <span class="number">1</span>) + (newCapacity &gt;&gt; <span class="number">2</span>); <span class="comment">// 3/4 capacity</span></span><br><span class="line">    <span class="keyword">return</span> newTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后是插入的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 映射指定key到指定value，如果有原对应mapping返回其value，否则返回null。</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">	    <span class="comment">// key为空直接去putValueForNullKey方法</span></span><br><span class="line">        <span class="keyword">return</span> putValueForNullKey(value);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 计算该key的hash值，根据key本身的hashCode做二次hash</span></span><br><span class="line">    <span class="keyword">int</span> hash = Collections.secondaryHash(key);</span><br><span class="line">    HashMapEntry&lt;K, V&gt;[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> index = hash &amp; (tab.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (HashMapEntry&lt;K, V&gt; e = tab[index]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">	    <span class="comment">// 原来有对应entry了，直接修改value，然后返回oldValue</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; key.equals(e.key)) &#123;</span><br><span class="line">            preModify(e);</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有现存的entry，创建一个</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// size超出阙值，double容量，重新计算index</span></span><br><span class="line">    <span class="keyword">if</span> (size++ &gt; threshold) &#123;</span><br><span class="line">        tab = doubleCapacity();</span><br><span class="line">        index = hash &amp; (tab.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在table的index位置插入一个新的HashMapEntry，其next是自己</span></span><br><span class="line">    addNewEntry(key, value, hash, index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putValueForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">    HashMapEntry&lt;K, V&gt; entry = entryForNullKey;</span><br><span class="line">    <span class="comment">// 和上面类似的逻辑，如果存在则替换，否则创建该HashMapEntry</span></span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        addNewEntryForNullKey(value);</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        preModify(entry);</span><br><span class="line">        V oldValue = entry.value;</span><br><span class="line">        entry.value = value;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>姑且说到这里，大致可以清楚，HashMap是一个以hash为中心的实现，在size上，也只有double的逻辑，而没有remove后是否缩小capacity的逻辑。时间复杂度O(1)的代价就是耗费大量内存来存储数据。</p>
<h1 id="比较">比较</h1><p>HashMap -&gt; 快，浪费内存<br>SparseArray -&gt; 会有性能损耗, 节约内存</p>
<p>我们做一个简单的性能测试，不带参数初始化HashMap和SparseArray，同样存储Integer-&gt;String的映射</p>
<p>用:符号来分割HashMap和SparseArray的耗时（毫秒）</p>
<table><br>    <tr><br>        <td>实验</td><br>        <td>第一次</td><br>        <td>第二次</td><br>        <td>第三次</td><br>        <td>第四次</td><br>    </tr><br>    <tr><br>        <td>依次put 10000个数</td><br>        <td>13:7</td><br>        <td>12:6</td><br>        <td>76:4</td><br>        <td>14:6</td><br>    </tr><br>    <tr><br>        <td>随机put 10000个数</td><br>        <td>16:83</td><br>        <td>18:85</td><br>        <td>15:76</td><br>        <td>17:78</td><br>    </tr><br></table>

<p>4次测试结果相近（有一个噪音数据76/4有待研究），HashMap在有序的key时候，更耗时，而在无需key的时候则是SparseArray更耗时，而HashMap则没有太大的性能差别。</p>
<p>再对随机put后的结果做了10000次get后，获得了7:3，7:3，8:3的结果，可见get操作上，SparseArray性能更好，但即便在10000个entry的时候，差别其实也并不大。</p>
<p><strong>在内存上，看到SparseArray在Allocation Tracker中为32，而HashMap则达到了69632这个可怕的数字。。。。。。</strong></p>
<h1 id="结论">结论</h1><p>在key为整数的情况下，考虑到移动端往往K/V对不会太大，所以用SparseArray能更节省内存，且性能损耗在可接受的范围。</p>
<p>从试验结果看，SparseArray相较于HashMap，大大节省了内存，对移动端实在是不二的选择。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java和Android中，代码块、static静态代码块的执行顺序]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/28/Java%E5%92%8CAndroid%E4%B8%AD%EF%BC%8C%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81static%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>Java和Android中，代码块、static静态代码块的执行顺序有没有什么区别呢。</p>
<h2 id="Java">Java</h2><p>先来个简单的例子</p>
<p><code>Main.java:</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出为</p>
<blockquote>
<p>1<br>Hello World!<br>2</p>
</blockquote>
<p>尝试交换static变量声明和static代码块后，编译报错”非法前向引用”。<br>交互两个代码块位置后输出</p>
<blockquote>
<p>2<br>Hello World!<br>2</p>
</blockquote>
<p><strong>可见static修饰的，是从上向下，依次执行的。static变量和代码块优先执行 </strong></p>
<p>我们再来做一个更复杂的实验</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">        Yo.test();</span><br><span class="line">        Yo yooo = <span class="keyword">new</span> Yo();</span><br><span class="line">        yooo.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String name = <span class="string">"mark"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Yo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>1<br>Hello World!<br>mark<br>hello mark<br>constructor<br>hello mark</p>
</blockquote>
<p><strong>Yo的执行符合上面的结论，执行了static代码块和静态方法test，构造Yo实例后，没有重复执行static代码块。</strong></p>
<h2 id="Android">Android</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> <span class="keyword">extends</span> <span class="title">BaseApplication</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Log.d(<span class="string">"test"</span>, <span class="string">"Application 1123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Log.d(<span class="string">"test"</span>, <span class="string">"Application "</span> + a);</span><br><span class="line">        HomeActivity.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"test"</span>, <span class="string">"Application hello "</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Log.d(<span class="string">"test"</span>, <span class="string">"SplashActivity static code block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Log.d(<span class="string">"test"</span>, <span class="string">"SplashActivity "</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"test"</span>, <span class="string">"SplashActivity onCreate "</span> + a);</span><br><span class="line">        <span class="comment">// 省略，会去start HomeActivity</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"HomeActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Log.d(<span class="string">"test"</span>, <span class="string">"HomeActivity 1123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"test"</span>, <span class="string">"HomeActivity"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<blockquote>
<p>D/test﹕ Application 1123<br>D/test﹕ Application 1<br>D/test﹕ HomeActivity 1123<br>D/test﹕ HomeActivity<br>D/test﹕ Application hello 2<br>D/test﹕ SplashActivity static code block<br>D/test﹕ SplashActivity 1<br>D/test﹕ SplashActivity onCreate 2</p>
</blockquote>
<p><strong>从结果上看java并没有什么区别</strong></p>
<p>同样是先执行依次static，入口外其他类的static初始化在类被JVM加载（从结果来看，是在类被使用的时候才会加载）的时候执行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[说说耦合]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/27/talk-about-coupling/</url>
      <content type="html"><![CDATA[<p>coupling, 即两个东西之间的一种连接，使他们彼此关联。</p>
<p>以前大学里学软件工程和面向对象的时候，就时常听到解耦和低耦合，所以现在在做开发的时候，也往往会去想，怎么降低耦合度呢。</p>
<p>软件工程书籍中，这么写道，高内聚及低耦合可以给我们软件开发人员带来可读性、复用性、可维护性和易变更性。</p>
<h2 id="耦合天成">耦合天成</h2><p>软件开发过程中，耦合是不可避免的，除非做出来一个超级巨大，包含一切功能的类/模块，都放在里面做（这显然并不是高内聚，只是把乱七八糟的揉在一起），否则模块与模块之间必然存在一定的耦合。</p>
<p>既然耦合不可避免，那高耦合和低耦合，又会对开发和维护产生什么影响呢？</p>
<p>高耦合，也就意味着两者之间存在强的关联，比如强持有、双向依赖、多个变量/常量的互相访问，如此也就造成其中一个需要更改的时候，另一个类也需要大量更改，而在Runtime的领域，则可能发生其中一个导致另一个不能释放。尤其实际生产过程中，往往不只是两个类有耦合关系，会有更多的类，从而产生一条耦合链。</p>
<p>低耦合，即两者之间关联较弱，比如广播，dataflow架构，单向单依赖等等。组合优于继承这个说法，也是从业务模型的角度，组合有时候相对于继承降低了耦合。</p>
<h2 id="耦合的代价">耦合的代价</h2><p>高耦合的代价，从开发人员角度来说，会导致</p>
<ul>
<li>维护困难：因为各种逻辑揉在一起，互相之间依赖来依赖去，查问题的时候很难定位。</li>
<li>变更困难：由于关联太强，修改一个小需求却要改很多逻辑</li>
<li>难以复用：新开发的功能用到了相同的逻辑，但是只能复制黏贴过去。比较常见的一个例子就是应该在utils里的东西却在业务代码里。</li>
<li>可读性差：过一阵子自己看，或者换了负责人员后，很难读懂原来的逻辑</li>
</ul>
<p>低耦合的代价，则可能会需要付出性能、代码行数、更多的时间去设计和解耦。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android客户端的导航栏]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/25/%E5%85%B3%E4%BA%8Eandroid%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
      <content type="html"><![CDATA[<h2 id="background">background</h2><p>android客户端开发过程中，所有页面都会有的一个元素，也就是导航栏了（标题栏），尽管Google给我们提供了ActionBar和升级版的Toolbar，但是在中国的移动端设计中，我们往往会看到原生的ActionBar/Toolbar的元素不怎么用得上，比如我们需要title居中，而不是贴着左边，比如我们会在中间加一个tab切换的控件。</p>
<h2 id="old_way">old way</h2><p>于是就出现了各种奇技淫巧，比如用一个xml来定义出一个通用的title_bar.xml，内部包含所有在导航栏上出现的元素，按钮、图片、文字、tab切换等等，然后通过在每个activity/fragment中各自去setVisibility来控制显示和隐藏。</p>
<p>结果导致整个xml庞大无比，可能有数百行，掺杂着各种view，而需求的变更则更可能导致同一个位置都有好几个元素，因为他们有一些小小的不同。</p>
<p>然后某个同事看到这个，觉得太重了，于是做了一个title_bar_sub.xml，相对轻量，只包含了左按钮、标题，以及中按钮。于是有些layout include title_bar.xml，另一些则title_bar_sub.xml。</p>
<p>噩梦开始了，有一个，设计改版要求间距调整，字体大小调整，噩梦来了，接到这个需求的新同学发现有好几个titlebar的xml，里面又乱七八糟，有的元素还在用，有的元素又貌似过时了（然后又可能在插件工程里还在引用），如此一般，一个在产品/设计眼中小小的界面调整，变成了一个庞大的体力活，还可能导致一些全局的恶性bug。</p>
<p>这里这种方法还算不错的，笔者还见过在每个layout里各自去写标题栏的，除非团队的设计真的不可能改，否则未来简直是个地狱。</p>
<h2 id="new_way_with_toolbar">new way with toolbar</h2><p>support v7中的toolbar是actionbar的升级版，不同于Actionbar，Toolbar直接继承了ViewGroup，从而可以直接在layout里面进行申明，并在里面添加子view，比如tab，和自定义控件等，更加灵活。</p>
<p>所以，类似地我们也使用一个xml来放Toolbar，但在里面，使用viewstub来对一些不常用的view进行lazyload。而对于原生Toolbar的title位于左侧的问题，我们同样使用自定义子view。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@id/toolbar"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"@dimen/titlebar_height"</span></span><br><span class="line">    <span class="attribute">android:background</span>=<span class="value">"@color/primary_color"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@id/toolbar_title"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"center"</span></span><br><span class="line">        <span class="attribute">android:textColor</span>=<span class="value">"@color/white"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.v7.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>定义中间的TextView后，在BaseActivity或者扩展的ToolbarActivity中定义</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Toolbar mToolbar = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">protected</span> TextView mToolbarTitleTextView = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initializeToolbar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mToolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">    <span class="keyword">if</span> (mToolbar == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Layout is required to include a Toolbar with id toolbar"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setSupportActionBar(mToolbar);</span><br><span class="line">    mToolbarTitleTextView = (TextView) findViewById(R.id.toolbar_title);</span><br><span class="line">    <span class="keyword">if</span> (mToolbarTitleTextView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        getSupportActionBar().setDisplayShowTitleEnabled(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPostCreate(savedInstanceState);</span><br><span class="line">    <span class="keyword">if</span> (!isChild()) &#123;</span><br><span class="line">        onTitleChanged(getTitle(), getTitleColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onTitleChanged</span><span class="params">(CharSequence title, <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onTitleChanged(title, color);</span><br><span class="line">    <span class="keyword">if</span> (mToolbarTitleTextView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mToolbarTitleTextView.setText(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此一来，manifest里的label会直接变成标题栏中间的文字，当然，也可以通过activity的setTitle方法来设置，是不是比findViewById简单方便了很多呢。</p>
<p>而对于各种viewstub的inflate，和一些自定义UI的设置，则有两种方案</p>
<ul>
<li>继承Toolbar实现扩展</li>
<li>在BaseActivity里定义通用的方法<br>而fragment也可以通过getActivity然后转换为BaseActivity来调用到导航栏的设置。</li>
</ul>
<p>究竟是做一个内聚的扩展性自定义Toolbar，还是在BaseActivty里加一系列toolbar相关方法，则见仁见智了。</p>
<p>另，强烈不建议多个xml！！完全可以通过常用元素直接visible，次常用gone，偶用元素viewstub来做。</p>
<h2 id="conclusion">conclusion</h2><p>像导航栏这种全局性的东西，随着项目的发展可能会越变越大，逐渐从不想改到改不了，所以在项目初期趁早使用良好的方案，避免给以后埋下一个炸药，是很有必要的。</p>
<p>笔者强烈推荐使用Toolbar，既能自定义UI，又可以使用google官方支持的那些很不错的效果（比如design support里不少动画都要求Toolbar，抽屉的一些动画也会要求ActionBar或者Toolbar）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Divide做Part time的日子]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/24/days-in-divide/</url>
      <content type="html"><![CDATA[<p>挺久以后，我还是会想起来当初在Divide做Part time的日子。</p>
<p>每天下班前，所有人会需要填写Google doc的记录（看不到别人的），子项有de, qe, cm, cr等等，填写自己一天做了些什么，属于哪一类。</p>
<p>团队内聊天使用hipchat，是一个挺酷的小软件。</p>
<p>版本控制和项目管理使用Git、Jira、Gerrit。</p>
<p>每周五开会大家都会讲一下一周做了些什么，最有意思的是什么，最大的成就是什么，接着则是一个技术分享，可能是终端、后台，也可能运维或者测试等等。</p>
<p>虽然公司开发只有近30个人，但是整个团队氛围很好，工作也挺让人愉快的，只可惜我不会粤语，交流上只能用英语，型号团队里也有些大陆、美国英国、菲律宾来的工程师，所以英语氛围挺好的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EventBus源码分析]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/20/EventBus-source/</url>
      <content type="html"><![CDATA[<h2 id="EventBus简介">EventBus简介</h2><p>本篇基于EventBus 2.4撰写。</p>
<p>Android optimized event bus that simplifies communication between Activities, Fragments, Threads, Services, etc. Less code, better quality.</p>
<p>上面是从官方repo拉来的代码，大致是说简化的组件之间的交流通信，减少代码，提高质量。</p>
<p>其实和EventBus最早是在qzone的代码里认识的，空间内部有一个叫eventcenter的东西，曾经有优化过一些，当时看源码实现的时候发现的原来是根据EventBus改的一个实现。大概就是把annotation的实现改成了接口实现，另外去掉了根据Event类型来找订阅者的模式，完全通过Event的TYPE类型常量来判断，register的时候直接指定对哪种TYPE感兴趣，辅助的判断则有事件发送者引用。这种实现见仁见智吧，虽然直接通过接口肯定是能提高性能的。这里要吐槽的是实现修改的时候，直接把很多对外的接口名字改掉了，何必呢。</p>
<p>EventBus的好处是显而易见的，完全解耦了请求链之间的关系，避免了请求者被长持有，又比广播更轻量，比LocalBroadcast则更强大，接口也简单实用。缺点的话，像是各种Event的定义是一个工作量。</p>
<h2 id="源码分析_-_注册(register)">源码分析 - 注册(register)</h2><p><code>EventBus.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());</span><br><span class="line">    <span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class="line">        subscribe(subscriber, subscriberMethod, sticky, priority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>register的时候，大致就是去subscriber里面首先找到那些onEvent方法（目前实现仍然是根据onEvent这个前缀），寻找的时候会去判断后缀，分为post线程、主线程、background线程，以及异步线程，官方repo提到这里之后在3.0可能会换成annotation的实现。</p>
<p>sticky参数是粘性事件概念，postSticky和registerSticky相对应，stickyEvent会记录该EventType对应的最后一次postSticky的事件，这样在registerSticky的时候，会立即检查是否有之前post的事件，从而避免了某些事件去实现自己的缓存。应用场景大概就是某些activity/fragment感兴趣的事件发生在创建前，这样则可以避免必须实现缓存（当然事实上应用场景还是比较少的，因为大部分东西我们还是会在哪里记录一下）</p>
<p><code>SubscriberMethod.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscriberMethod</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Method method;</span><br><span class="line">    <span class="keyword">final</span> ThreadMode threadMode;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; eventType;</span><br><span class="line">    <span class="comment">/** Used for efficient comparison */</span></span><br><span class="line">    String methodString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>SubscriberMethod里面记录了Method引用，线程模式（在findSubscriberMethods里拿到的），eventType，以及用来提高method.equals性能的methodString。</p>
<p>接着再看subscribe方法的实现，在register最后，对找到的所有方法都去执行了一遍subscribe<br><code>EventBus.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Must be called in synchronized block</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Object subscriber, SubscriberMethod subscriberMethod, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; eventType = subscriberMethod.eventType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CopyOnWriteArrayList就是个ImmutableArrayList, add/set等方法会返回一个新的ArrayList</span></span><br><span class="line">    <span class="comment">// subscriptionsByEventType是一个hashmap，key是事件类型，value则是订阅者数组</span></span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Subscription newSubscription = <span class="keyword">new</span> Subscription(subscriber, subscriberMethod, priority);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该eventType在map里还不存在，新建一下对应的subscription数组，放进去map</span></span><br><span class="line">    <span class="keyword">if</span> (subscriptions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscriptions = <span class="keyword">new</span> CopyOnWriteArrayList&lt;Subscription&gt;();</span><br><span class="line">        subscriptionsByEventType.put(eventType, subscriptions);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    	<span class="comment">// 重复注册的时候抛出异常，这里如果应用如果觉得无伤大雅其实可以直接return</span></span><br><span class="line">        <span class="keyword">if</span> (subscriptions.contains(newSubscription)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriber.getClass() + <span class="string">" already registered to event "</span></span><br><span class="line">                    + eventType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据优先级去添加到对应的位置，高优先级在前面也就会先处理</span></span><br><span class="line">    <span class="keyword">int</span> size = subscriptions.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == size || newSubscription.priority &gt; subscriptions.get(i).priority) &#123;</span><br><span class="line">            subscriptions.add(i, newSubscription);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// typesBySubscriber是另一个map，顾名思义是以subscriber为key的一个map，被用在</span></span><br><span class="line">    <span class="comment">// 1) isRegistered(Object subscriber)方法加速判断是否已注册，用空间换时间</span></span><br><span class="line">    <span class="comment">// 2) unregister的时候直接可以拿到subscriber订阅的所有eventType，然后去从map移除，避免需要遍历所有eventType的map</span></span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</span><br><span class="line">    <span class="keyword">if</span> (subscribedEvents == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscribedEvents = <span class="keyword">new</span> ArrayList&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">        typesBySubscriber.put(subscriber, subscribedEvents);</span><br><span class="line">    &#125;</span><br><span class="line">    subscribedEvents.add(eventType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 粘性事件的话，就去立刻找一下是否有之前post过的事件，有则立即post给该subscriber</span></span><br><span class="line">    <span class="keyword">if</span> (sticky) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">            <span class="comment">// Existing sticky events of all subclasses of eventType have to be considered.</span></span><br><span class="line">            <span class="comment">// Note: Iterating over all events may be inefficient with lots of sticky events,</span></span><br><span class="line">            <span class="comment">// thus data structure should be changed to allow a more efficient lookup</span></span><br><span class="line">            <span class="comment">// (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;).</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</span><br><span class="line">                Class&lt;?&gt; candidateEventType = entry.getKey();</span><br><span class="line">                <span class="keyword">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</span><br><span class="line">                    Object stickyEvent = entry.getValue();</span><br><span class="line">                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Object stickyEvent = stickyEvents.get(eventType);</span><br><span class="line">            checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="源码分析_-_发送事件(post)">源码分析 - 发送事件(post)</h3><p>再来看一下对应的post逻辑</p>
<p><code>EventBus.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Posts the given event to the event bus. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获得当前post线程的状态，实现贴在下面了，currentPostingThreadState是ThreadLocal&lt;PostingThreadState&gt;变量，每个线程get和set的都是单独的一份数据</span></span><br><span class="line">    PostingThreadState postingState = currentPostingThreadState.get();</span><br><span class="line">    <span class="comment">// 往事件队列里面添加该event</span></span><br><span class="line">    List&lt;Object&gt; eventQueue = postingState.eventQueue;</span><br><span class="line">    eventQueue.add(event);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前不在posting事件</span></span><br><span class="line">    <span class="keyword">if</span> (!postingState.isPosting) &#123;</span><br><span class="line">    	<span class="comment">// 设置是否在主线程</span></span><br><span class="line">        postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();</span><br><span class="line">        <span class="comment">// 设置当前正在post事件</span></span><br><span class="line">        postingState.isPosting = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// canceled状态，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (postingState.canceled) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Internal error. Abort state was not reset"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	<span class="comment">// 循环post从eventQueue里面拿出来的event</span></span><br><span class="line">            <span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</span><br><span class="line">                postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        	<span class="comment">// 置位回去</span></span><br><span class="line">            postingState.isPosting = <span class="keyword">false</span>;</span><br><span class="line">            postingState.isMainThread = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PostingThreadState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Object&gt; eventQueue = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> isPosting;</span><br><span class="line">    <span class="keyword">boolean</span> isMainThread;</span><br><span class="line">    Subscription subscription;</span><br><span class="line">    Object event;</span><br><span class="line">    <span class="comment">// 可以通过cancelEventDelivery去取消事件传递</span></span><br><span class="line">    <span class="keyword">boolean</span> canceled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个事件的post处理</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postSingleEvent</span><span class="params">(Object event, PostingThreadState postingState)</span> <span class="keyword">throws</span> Error </span>&#123;</span><br><span class="line">    Class&lt;?&gt; eventClass = event.getClass();</span><br><span class="line">    <span class="keyword">boolean</span> subscriptionFound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 继承链处理，比如Event本身的父类的subscriber也会收到，getDefault的时候默认为true。</span></span><br><span class="line">    <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</span><br><span class="line">        <span class="keyword">int</span> countTypes = eventTypes.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = eventTypes.get(h);</span><br><span class="line">            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 竟然没找到，太诡异了</span></span><br><span class="line">    <span class="keyword">if</span> (!subscriptionFound) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logNoSubscriberMessages) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"No subscribers registered for event "</span> + eventClass);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</span><br><span class="line">                eventClass != SubscriberExceptionEvent.class) &#123;</span><br><span class="line">            <span class="comment">// 没想到还有这种逻辑吧，没找到订阅者的，则会发送一个NoSubscriberEvent出去</span></span><br><span class="line">            post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对特定的event去post单个事件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">postSingleEventForEventType</span><span class="params">(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass)</span> </span>&#123;</span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class="line">    <span class="comment">// 找到该事件的所有订阅</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        subscriptions = subscriptionsByEventType.get(eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 遍历所有订阅</span></span><br><span class="line">        <span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">            postingState.event = event;</span><br><span class="line">            postingState.subscription = subscription;</span><br><span class="line">            <span class="keyword">boolean</span> aborted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            	<span class="comment">// 结果实际post还在这个方法内实现</span></span><br><span class="line">                postToSubscription(subscription, event, postingState.isMainThread);</span><br><span class="line">                aborted = postingState.canceled;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postingState.event = <span class="keyword">null</span>;</span><br><span class="line">                postingState.subscription = <span class="keyword">null</span>;</span><br><span class="line">                postingState.canceled = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果cancel了，则不再继续传递事件</span></span><br><span class="line">            <span class="keyword">if</span> (aborted) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体的事件分发</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里就是EventBus的一个很强大的功能了，根据订阅者的订阅方法监听线程去处理</span></span><br><span class="line">    <span class="comment">// 如果post和监听方法在同一个线程则立即invoke对应方法</span></span><br><span class="line">    <span class="comment">// 否则会去入队列到对应线程handler进行处理</span></span><br><span class="line">    <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> PostThread:</span><br><span class="line">            invokeSubscriber(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MainThread:</span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BackgroundThread:</span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                backgroundPoster.enqueue(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Async:</span><br><span class="line">            asyncPoster.enqueue(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="End">End</h2><p>大致就讲了一下register和post这一对比较常用的接口，其他还有一些实现像是EventBusBuilder，SubscriberException，cancelEventDelivery，AsyncExecutor就不在这里进行赘述，之后可能会对AsyncExecutor单独开一篇讲一下，另外也会对otto的实现做一下分析。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[脱宅这回事]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/18/otaku-tatsu/</url>
      <content type="html"><![CDATA[<p>大学时候，我算是个不折不扣的宅男吧。</p>
<p>对现实生活不太感兴趣，只有看动画、玩Galgame、听acg音乐的时候才会有生きてる的实感，其余的，大约也就是写代码的时候会觉得快乐吧。</p>
<p>大二时候学日语，神奇地花了8个月就陆续考出了N2和N1，现在看到一些朋友学日语的经历，倒也真觉得挺神奇的，或许有爱所以当时才能学得那么快吧。</p>
<p>犹记得那些年，拿着PSP玩着eden、星之梦，屡次情不自禁流下泪来，看欢迎来到NHK的时候，也感到好悲伤。动画、游戏、轻小说，这些东西拯救了当时的我，觉得什么都没有意思，活着找不到意义。</p>
<p>工作后，逐渐没有时间和精力去玩galgame，补轻小说，只记得前几个月有一个周末在公司再玩了一次WHITE ALBUM2，平时也就看看感兴趣的一些新番。今天心血来潮，去翻了翻当年看到一半的轻小说，看到如今破落的轻国和泉川，已经大半年上不去的极影，心里有一种说不出来的感受。</p>
<p>路过轻国去看了看友少和光在地球的时候，竟然都完结了。友少的结局真是让我大吃一惊。或许青春就是这么一回事吧，呵呵，有点苦涩。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EventBus, otto, LocalBroadcast的选择]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/17/EventBus:otto:LocalBroadcast%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<h1 id="EventBus,_otto,_LocalBroadcast的选择">EventBus, otto, LocalBroadcast的选择</h1><ul>
<li>greenrobot的EventBus</li>
<li>square的otto</li>
<li>android support包里提供的LocalBroadcast</li>
</ul>
<p>三者都是类似订阅/发布的模式，降低了耦合度。与callback比起来，这种事件总线的模式使得两个类没有直接的依赖关系，对架构来说进行了解耦，把双向依赖变成了单向依赖，在大型项目中尤其显得重要。<br><a id="more"></a></p>
<hr>
<h2 id="Why_publish/subscribe">Why publish/subscribe</h2><p>一方面，callback很容易产生内存泄露，如I/O、网络操作持有了Activity/Fragment的引用，导致不能及时释放，而团队中也很难保证每个成员都足够优秀在写callback的时候能使用弱引用或静态变量。相比起来订阅/发布者模式则比较简单，直接在BaseActivity的onDestroy释放掉，避免了可能的坑。</p>
<p>另外，从可扩展性、可维护性的角度来说，callback也更局限，比如以前某个接口是告诉上层网络数据拉回来了，现在我们希望扩展，这个接口也支持直接告诉上层数据库拉回来了，向上层屏蔽数据来源，如果用callback，则在一次回调结束后，没有办法再次进行回调了。页面必须自己去处理数据来源和拉数据的逻辑。</p>
<p>虽然有些over-architect的嫌疑，但是<a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">Android-CleanArchitecture</a> 确实是一种很clean的architecture，而其也正是通过观察者/订阅者模式来实现了单向依赖。</p>
<hr>
<h2 id="比较">比较</h2><p>EventBus的github上就有其和otto的比较： <a href="https://github.com/greenrobot/EventBus/blob/master/COMPARISON.md" target="_blank" rel="external">EventBus vs Otto</a><br>总的来说，两者功能差的不多，otto多了Event producers (e.g. for coding cached events)，而EventBus则多了各种线程的处理、订阅者继承、sticky event等。<br>但从性能来说，由于otto使用了基于反射的annotation，而和EventBus产生了一定的差距（内部应该还有一些其他问题导致的性能差异，待研究）</p>
<p>三者都不支持跨进程，LocalBroadcast内部其实使用的是Handler，所以其实更像是一个utils类。</p>
<p>如果要做选择的话，LocalBroadcast更轻量，otto相比起api更好用，而EventBus则拥有很棒的线程模型，我投EventBus一票，因为onEvent的各种线程回调真的很方便。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[入手ATEN KVM CS62US]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/10/%E5%85%A5%E6%89%8BATEN-KVM-CS62US/</url>
      <content type="html"><![CDATA[<p>因为实在无法忍受在PC和mac间需要来回换键盘鼠标，最终还是入手了KVM。今天体验了一下，确实物有所值，比smartlink之流好用多了。<br><a id="more"></a></p>
<p>免驱动，直插直用，简直是神器，支持音频/键盘鼠标/显示器的切换，切换的快捷键也可以直接设置。说的设置，还是挺神奇的，</p>
<p>Number Lock按下后，快速按一下 -，然后松掉 -，再送掉Numbem Lock，然后就能看到Caps和Number Lock的灯来回闪，也就说明触发热键设定了。</p>
<p>然后则又有各种神奇设定，可见</p>
<p><img src="http://www.aten.com.cn/data/media_review/2012/0307/86WPZ3U70Y4J_500.jpg" alt="热键一览"></p>
<p>总而言之省了挺大功夫的，物有所值，如果你有一台PC和一台mac，又都需要用的话，是很好的选择。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo粗析]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/09/hexo%E7%B2%97%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>粗…因为我并没有看完官网的doc，只是从文件结构看了看，随便写写。<br><a id="more"></a></p>
<h1 id="scaffolds">scaffolds</h1><p>一些生成用的模板，如draft/page/post，在使用hexo对应命令行new的时候会用这个来生成文件，如<br><code>post.md</code>:<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line"><span class="header">tags:</span><br><span class="line">---</span></span><br></pre></td></tr></table></figure></p>
<p>就是新的文章用的模板，有标题，日期，tag这些填好的东西。</p>
<h1 id="source">source</h1><p>顾名思义，源代码嘛。</p>
<h2 id="_posts">_posts</h2><p>就是写的那些文章了。</p>
<h2 id="categories_&amp;&amp;_tags">categories &amp;&amp; tags</h2><p>并不是hexo自带的，部分主题会申明一些页面，在_config.yml里对id和url进行映射，这里就是对应的url了</p>
<h2 id="images">images</h2><p>上传的图片之类的，其实名字叫什么都可以了，毕竟是自己在markdown里面去引用的。</p>
<h1 id="themes">themes</h1><p>_config.yml，可以视作对hexo项目根目录下得_config.yml的一个补充，因为往往里面的东西都跟主题紧密相关，所以各个主题独立维护。</p>
<h2 id="layout">layout</h2><p>网页ejs模板，_partial中则是如footer/header这样各个页面都会include的东西。</p>
<h2 id="source-1">source</h2><p>css/js/fonts</p>
<h2 id="scripts">scripts</h2><p>js脚本。</p>
<h2 id="languages">languages</h2><p>国际化！做翻译用的！里面用yml定义了各个语言id-&gt;字符串的映射。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的电脑们]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/06/my_computer_history/</url>
      <content type="html"><![CDATA[<h2 id="我的第一台电脑">我的第一台电脑</h2><p>依稀记得是02年的时候，有的第一台电脑，当然…恩，果然还是为了玩游戏吧？应该是赛扬2还是3来着，记不太清了，内存…难道是256MB？总之显示器很厚，哈哈。<br><a id="more"></a></p>
<p>那些年网吧还不叫网吧，叫电脑房。我们也还会为了一本大软、电攻而兴奋，在教室里传阅。</p>
<p>电脑房里有：</p>
<ul>
<li><strong>红警95、98</strong></li>
<li><strong>沙丘</strong></li>
<li><strong>星际</strong></li>
<li><strong>老会被人删存档的仙剑</strong></li>
<li><strong>大富翁4</strong></li>
</ul>
<p>那时候的单机游戏记得有些经典的像是新绝代双骄，流星蝴蝶剑，仙剑奇缘，霹雳奇侠传，轩辕剑天之痕，三国群英传。马路上逐渐多起来摆摊的，卖各种各样的游戏，塑料包着光盘，套着一张纸封面，最兴奋的是找到没有玩过的新RPG游戏，而最沮丧的就是带回去发现装不了或者装上玩不起来。</p>
<p>又过了几年，上了初中。流行起了MMORPG，我的老爷机也很坚强地跑起了石器时代，我的无良表哥帮我选了女号，于是在坚强的拨号上网时代，我玩上了自己的第一个网络游戏。值得一提的是，由于号被表哥拿去骗人了，结果被人删号了。</p>
<p>然后好像是CS，魔兽争霸这些古老的已经沦为历史的东西。当然期间也不断地有新的单机RPG游戏出来，现在想来，当时的自己是不是也是这些游戏的扼杀者之一呢。这些在现在看来，除了画面，远远超过那些手游的东西，就这样被盗版扼杀了。</p>
<h2 id="我的第二台电脑">我的第二台电脑</h2><p>2005 应该是上高中前换的？还是高一来着，然而我也记不太清了。恩，应该是AMD！<br>家里也终于用起了宽带，再也不用过按流量计费，一秒钟5K的速度了。</p>
<p>05年吧应该是，于是开始了网购的日子，虽然都是从dangdang买的书，呵呵。</p>
<p>天堂2，坦克宝贝，街头篮球，WOW。</p>
<p>值得一提的是，08年初的时候！我用上了淘宝！买的第一样东西，是《袁中郎散文》，5块钱。然后，高中的时候学了点C++，虽然现在想来其实不就是学了学语法嘛，但当时还是觉得很好玩的。</p>
<h2 id="我的第三台电脑">我的第三台电脑</h2><p>2008 高三考完后，立马鸟枪换炮，更新换代，迎接在家玩两个月WOW的日子。然而这台电脑的显卡好像有点问题，有时候玩着玩着会突然蓝屏，最后怎么解决的，现在倒也想不起来了，只能记得一些WOW里扮演着亡灵张牙舞爪的模样，还有孜孜不倦地闷棍。</p>
<h2 id="我的第四台电脑">我的第四台电脑</h2><p>2010 上了大学后，作为一个学计算机的人，怎么能不会装电脑呢！</p>
<p>于是第三台电脑光荣退役给了家里，而我则从京东自己买了各种配件，开始了自己的第一次独自装机。其实看着主板上的那些说明，总有一种是人都能知道怎么装的感觉吧。不过有时候一点小疏忽排查起来也是挺蛋疼的，因为只知道没法开机，鬼知道哪里导致的啊。</p>
<h2 id="然后就是不断换部件的岁月了">然后就是不断换部件的岁月了</h2><p>小换换内存换硬盘，大换换CPU换主板。<br>虽然其实机箱也换了一次，用来实践了一下走背线。</p>
<p>随着电脑一台一台换走，却反而越来越觉得没什么游戏好玩的了。<br>却也不知道是自己的心老了，还是现在的游戏不如过去了，游戏人不比以前是为了游戏本身在创作了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[the creation of this site]]></title>
      <url>http://blog.zhaiyifan.cn/2015/08/05/the-creation-of-this-site/</url>
      <content type="html"><![CDATA[<h2 id="序言">序言</h2><p>仅以本篇唠叨地记录一下本站的建立。<br><a id="more"></a></p>
<p>很久以前我在新浪有过博客，后来在wordpress、csdn陆续又有过，但别人的总是很蛋疼，于是后来搬迁到了自己服务器上的wordpress。Everything seems ok, but…</p>
<p>wordpress对外部的依赖实在让我蛋疼，备份一下配这配那的，有一天我的服务器格了，然后一切就悲剧了，我也懒得去google drive上找几个月前的备份了。经过一番查找，觉得静态的hexo很符合我的要求，而且markdown啊！再怎么我还能练练写README.md是不是？</p>
<p>于是下文就是唠唠叨叨的实际建立过程了。</p>
<h2 id="How_am_i_built">How am i built</h2><h3 id="前提">前提</h3><p>已经安装了node, xcode, git<br>配好了github ssh<br>在github建立了username.github.io的repo</p>
<h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装淘宝的npm镜像工具cnpm</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 于是可以直接用cnpm了</span></span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line"><span class="comment"># 安装后去你的开发目录里建文件夹存放blog吧</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">cnpm install</span><br><span class="line">cnpm install hexo-deployer-git --save</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>deploy后上自己的github.io看看，是不是已经可以访问了？</p>
<h3 id="配置">配置</h3><p>下一步就是把自己的域名和github.io绑定了，可以看到<br><a href="http://blog.zhaiyifan.cn">http://blog.zhaiyifan.cn</a> &amp; <a href="http://markzhai.github.io" target="_blank" rel="external">http://markzhai.github.io</a><br>最后都会跳转到我的blog域名下。</p>
<p>这个就是配置的问题了, <code>_config.yml</code>:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># URL&#10;url: http://blog.zhaiyifan.cn</span><br></pre></td></tr></table></figure></p>
<p>url配成自己的域名，然后在域名商的解析中，把自己的域名解析到username.github.io</p>
<p>然后！不要急，在generate和deploy前，hexo还需要CNAME<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span></span><br><span class="line"><span class="built_in">echo</span> blog.zhaiyifan.cn &gt; CNAME</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure></p>
<p>Done，generate和deploy后，大功告成。</p>
<h2 id="主题">主题</h2><p>如果想要点好看的主题怎么办呢？作为一个宅男，我当然想要一个二次元的主题了，下面这两个站点可以看到一些主题，大部分都有demo展示<br><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">https://github.com/hexojs/hexo/wiki/Themes</a><br><a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></p>
<p>于是我就一眼相中了hexadillax<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/XadillaX/hexadillax themes/hexadillax</span><br></pre></td></tr></table></figure></p>
<p>后把hexadillax/_config.sample.yml的内容拷贝到_config.yml，填一下，比如多说的二级域名，然后在source下对应文件夹创建两个文件<br><code>tags/index.md</code>:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: tags</span><br><span class="line"><span class="header">title: tags</span><br><span class="line">---</span></span><br></pre></td></tr></table></figure>
<p><code>categories/index.md</code>:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: categories</span><br><span class="line"><span class="header">title: categories</span><br><span class="line">---</span></span><br></pre></td></tr></table></figure>
<p>Done again, generate, deploy, check it!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[应用MVP模式写出可维护的优美Android应用]]></title>
      <url>http://blog.zhaiyifan.cn/2015/06/01/use-mvp-to-write-nice-code/</url>
      <content type="html"><![CDATA[<p>在Android开发中，我们常常会动辄写出数千行的Java类，而当一个Activity有4、5千行的时候，想找一个逻辑在哪儿就会显得异常痛苦了。比如想在数据加载错误的时候，显示一个提示信息，上上下下得找很久。</p>
<p>最近用了MVP模式后，我觉得找到了一个不错的框架级解决方法。</p>
<p>首先看看</p>
<h2 id="MVP是什么">MVP是什么</h2><p>MVP是MVC模式的一个衍生物，可以简单看下图。在MVP模式中，V层完全和M层（在Android中可能是Model、DAO、或者通用的business logic）分开。在中间用P层分隔，从而把数据有关和UI有关完全分离开。</p>
<p><img src="http://img.blog.csdn.net/20150627173920530" alt="mvp vs mvc"><br><a id="more"></a></p>
<h2 id="主流的MVP又有两种实现方式">主流的MVP又有两种实现方式</h2><p>１）Activity、Fragment、View直接作为V层。Presenter通过继承被视图层实例化或者通过注入得到。这样Presenter在理想状态下可以完全和Android分离，也剥离了activity的那些生命周期。</p>
<p>2）Activity和Fragment作为P层，另外单独创建一个V层类，持有Activity里面的各种view，并提供接口让Activity调用来更新界面。</p>
<p>为了让V层和P层解耦，通常P层对V层的持有是通过interface的。</p>
<p>一个完整的mvp事件流可以是<br><img src="http://img.blog.csdn.net/20150627174025122" alt="mvp workflow"></p>
<h2 id="sample">sample</h2><p>这里用第一种实现方式来做个例子。</p>
<p>每个Activity继承的基类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * A &#123;<span class="doctag">@link</span> BaseActivity&#125; that uses an &#123;<span class="doctag">@link</span> MvpPresenter&#125; to implement a MVP Architecture.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MvpActivity</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">MvpPresenter</span>&gt; <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">MvpView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> P presenter;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        presenter = createPresenter();</span><br><span class="line">        <span class="keyword">if</span> (presenter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Presenter is null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        presenter.attachView(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        presenter.detachView(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Instantiate a presenter instance</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> The &#123;<span class="doctag">@link</span> MvpPresenter&#125; for this view</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> P <span class="title">createPresenter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>暴露给Presenter的View层接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * The root view interface for every mvp view</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MvpView</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> Presenter层，告别了繁琐的activity周期，只有创建和销毁两个状态接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * The base interface for each mvp presenter</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MvpPresenter</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">MvpView</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Set or attach the view to this presenter</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attachView</span><span class="params">(V view)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Will be called if the view has been destroyed. Typically this method will be invoked from</span><br><span class="line">     * &lt;code&gt;Activity.detachView()&lt;/code&gt; or &lt;code&gt;Fragment.onDestroyView()&lt;/code&gt;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">detachView</span><span class="params">(<span class="keyword">boolean</span> retainInstance)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>比如这次做新的留言板需求，我就写了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QZoneLeaveMessageActivity</span> <span class="keyword">extends</span> <span class="title">MvpActivity</span>&lt;<span class="title">LeaveMessagePresenter</span>&gt; <span class="keyword">implements</span> <span class="title">LeaveMessageView</span>, <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Lce就是Load Content Error，通用的load数据View接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MvpLceView</span>&lt;<span class="title">M</span>&gt; <span class="keyword">extends</span> <span class="title">MvpView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span><span class="params">(<span class="keyword">boolean</span> pullToRefresh)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showContent</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showError</span><span class="params">(Throwable e, <span class="keyword">boolean</span> pullToRefresh)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(M data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadData</span><span class="params">(<span class="keyword">boolean</span> pullToRefresh)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LeaveMessageView</span> <span class="keyword">extends</span> <span class="title">MvpLceView</span>&lt;<span class="title">List</span>&lt;<span class="title">TemplateData</span>&gt;&gt; </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveMessagePresenter</span> <span class="keyword">extends</span> <span class="title">MvpBasePresenter</span>&lt;<span class="title">LeaveMessageView</span>&gt; <span class="keyword">implements</span> <span class="title">QZoneServiceCallback</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这么些类来应用了MVP模式，个人觉得是比以前清晰了不少。</p>
<h2 id="个人心得">个人心得</h2><ul>
<li>不要把presenter当做OnClickListener，View才是来处理用户输入和给予反馈的，presenter不应该知道view内部的逻辑来判断点击某个按钮后做出什么相应。一个简单的判断某个逻辑是否属于presenter的方法是，如果view层不是android，而是java桌面应用，那你的presenter层是不是还能不做更改地work。</li>
<li>view层只做presenter层让你做的，比如上图view层用户点了一个按钮，View调用了presenter.loadUsers，presenter一边在background thread去getUsers，一边调用了view.showLoading()，view层不该自说自话地showLoading。不过如何showLoading，比如展示怎么样的动画，那就是view层的内部矛盾了。</li>
<li>一个很大的好处，就是通过MVP，异步变得很清晰，view层的东西完全是主线程的，只需要等着presenter调就行了。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[接入LeakCanary检测内存泄露]]></title>
      <url>http://blog.zhaiyifan.cn/2015/05/21/import-leakcanary/</url>
      <content type="html"><![CDATA[<p>接入LeakCanary检测内存泄露</p>
<p>前几天square在Github上发布了他们的内存泄漏检测库，LeakCanary，短短几天star已经接近3000，研究了一下后，发现其对我们的应用也很有价值。<br><a id="more"></a></p>
<p>原来我们看到一个toast弹出内存泄露，但是也看不出什么相关信息，所以只能直接忽略。一个内存泄露既需要测试同学dump HPROF再用MAT和Finder分析提单，开发同学接到单后又要在去分析HPROF看是哪里HOLD住了对象导致内存泄露，对之前没接触过这方面工作的人还是需要一定学习成本，且比较浪费时间成本。很多潜在的问题可能没有覆盖到，而一直藏在那里消耗内存。</p>
<p>通过LeakCanary，我们可以降低测试和修复成本，并发现更多的潜在内存泄露。</p>
<p>这里不多介绍接入细节，我们简单看下原理和效果。</p>
<p>【原理】<br>LeakCanary通过square自家的HAHA来自动化分析Android heap dumps，内部基于MAT, vshor/mat，AndroMAT来做Java和Android特定的heap分析，亮点则是其将需要人工分析的事情做到了完全自动化，并给出能帮助快速定位修复内存泄露的信息。</p>
<p>在Application中使用LeakCanary.install(this)后，LeakCanary就会自动install一个ActivityRefWatcher来自动化检测activity是否在onDestroy后有泄露。具体步骤大致是</p>
<ol>
<li>自动把activity加入到KeyedWeakReference</li>
<li>在background线程中，检查onDestroy后reference是否被清除，且没有触发gc</li>
<li>如果reference没有被清除，则dump heap到一个hprof文件并保存到app文件系统中</li>
<li>在一个单独进程中启动HeapAnalyzerService，HeapAnalyzer使用HAHA来分析heap dump。</li>
<li>HeapAnalyzer在heap dump中根据reference key找到KeyedWeakReference。</li>
<li>HeapAnalyzer计算出到GC Roots的最短强引用路径来判断是否存在泄露，然后build出造成这个泄露的引用链。</li>
<li>结果被传回来app进程的DisplayLeakService，并展示一个泄露的notification。</li>
</ol>
<p>square称从用了LeakCanary后，发现并修复了很多他们app中的内存泄露，而且找到了一些Android SDK中的泄露，最终减少了94%因为OOM错误导致的crash。</p>
<p>【可深入的点】<br>由于该工具是基于Activity、Fragment的onDestroy触发的，且有些泄露并不是必现的，所以考虑可以基于自动化测试来做完整的覆盖，并批量输出内存泄露的信息，借助其输出的log，也可以方便定位出泄露的原因。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DrawerLayout使用心得、踩坑经验以及定制化]]></title>
      <url>http://blog.zhaiyifan.cn/2015/03/26/DrawerLayout%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%E3%80%81%E8%B8%A9%E5%9D%91%E7%BB%8F%E9%AA%8C%E4%BB%A5%E5%8F%8A%E5%AE%9A%E5%88%B6%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="基础使用">基础使用</h2><p>这里要介绍的是google的DrawerLayout，行为可见google官方应用如gmail；而手Q的抽屉则是根据android-undergarment项目来定制的一个控件。<br><a id="more"></a></p>
<p><a href="http://www.google.com/design/spec/layout/structure.html#structure-system-bars" target="_blank" rel="external">Google Desgin GuildLines内的介绍</a></p>
<p>官方教程：<a href="https://developer.android.com/training/implementing-navigation/nav-drawer.html" target="_blank" rel="external">Creating a Navigation Drawer</a></p>
<p>DrawerLayout添加在主内容区的上层，作为parent，下面的第一个child是主内容区域，第二个child则可以是其他任何东西，需要作为抽屉的view则需要声明android:layout_gravity。</p>
<p>DrawerLayout的setScrimColor可以设置抽屉拉出时右侧主内容剩余区域上面盖的颜色（默认0x99000000）。</p>
<h2 id="高级应用">高级应用</h2><p>DrawerLayout默认只有在边缘的一个edge能够触发抽屉拉取的动作，而这个是通过ViewDragHelper这个类来实现的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_SIZE = <span class="number">20</span>; <span class="comment">// dp  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_SETTLE_DURATION = <span class="number">256</span>; <span class="comment">// ms  </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SETTLE_DURATION = <span class="number">600</span>; <span class="comment">// ms</span></span><br></pre></td></tr></table></figure>
<p>EDGE_SIZE是触发区域，默认20dp，而BASE_SETTLE_DURATION和MAX_SETTLE_DURATION则是控制抽屉从打开到关闭之间的这个间隔。由于是私有静态常量，可以通过</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDrawerLeftEdgeSize</span><span class="params">(DrawerLayout drawerLayout, <span class="keyword">float</span> dp)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (drawerLayout == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">// find ViewDragHelper and set it accessible  </span></span><br><span class="line">        Field leftDraggerField = drawerLayout.getClass().getDeclaredField(<span class="string">"mLeftDragger"</span>);  </span><br><span class="line">        leftDraggerField.setAccessible(<span class="keyword">true</span>);  </span><br><span class="line">        ViewDragHelper leftDragger = (ViewDragHelper) leftDraggerField.get(drawerLayout);  </span><br><span class="line">        <span class="comment">// find edgesize and set is accessible  </span></span><br><span class="line">        Field edgeSizeField = leftDragger.getClass().getDeclaredField(<span class="string">"mEdgeSize"</span>);  </span><br><span class="line">        edgeSizeField.setAccessible(<span class="keyword">true</span>);  </span><br><span class="line">        <span class="keyword">int</span> edgeSize = edgeSizeField.getInt(leftDragger);  </span><br><span class="line">        edgeSizeField.setInt(leftDragger, Math.max(edgeSize, ViewUtils.dpToPx(dp)));  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;  </span><br><span class="line">        <span class="comment">// ignore  </span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;  </span><br><span class="line">        <span class="comment">// ignore  </span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;  </span><br><span class="line">        <span class="comment">// ignore  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 来反射设置左侧的触发区域，类似地可以修改右侧触发区域以及打开动画的间隔（当然你也可以直接去ViewDragHelper里面修改）。</p>
<p>不建议自己处理onTouch，会导致抽屉不能平滑跟手，比如stackoverflow上有给出以下这种方案的，简直坑爹：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">// ======================== 触摸事件处理 ===================================  </span><br><span class="line">private float startX, startY;  </span><br><span class="line"></span><br><span class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;  </span><br><span class="line">    boolean handled = false;  </span><br><span class="line">    int action = ev.getAction();  </span><br><span class="line">    switch (action) &#123;  </span><br><span class="line">        case MotionEvent.ACTION_DOWN:  </span><br><span class="line">            startX = ev.getX();  </span><br><span class="line">            startY = ev.getY();  </span><br><span class="line">            break;  </span><br><span class="line">        case MotionEvent.ACTION_MOVE:  </span><br><span class="line">        case MotionEvent.ACTION_UP:  </span><br><span class="line">            float endX = ev.getX();  </span><br><span class="line">            float endY = ev.getY();  </span><br><span class="line"></span><br><span class="line">            if (startX &gt; HOT_FIELD || Math.abs(endY - startY) &gt; SENSIBILITY_Y) &#123;  </span><br><span class="line">                break;  </span><br><span class="line">            &#125;  </span><br><span class="line">            // From left to right  </span><br><span class="line">            if (endX - startX &gt;= SENSIBILITY_X) &#123;  </span><br><span class="line">                handled = openDrawer();  </span><br><span class="line">            &#125;  </span><br><span class="line">            // From right to left  </span><br><span class="line">            if (startX - endX &gt;= SENSIBILITY_X) &#123;  </span><br><span class="line">                handled = closeDrawer();  </span><br><span class="line">            &#125;  </span><br><span class="line">            break;  </span><br><span class="line">    &#125;  </span><br><span class="line">    if (handled) &#123;  </span><br><span class="line">        mDrawerLayout.cancelChildViewTouch();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return handled;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 坑爹的bug们</span><br><span class="line">### 初始化LayoutParam时可能出错</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Override  </span><br><span class="line">public ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs) &#123;  </span><br><span class="line">    LayoutParams layoutParams = null;  </span><br><span class="line">    try &#123;  </span><br><span class="line">        // 出现异常时，用默认值  </span><br><span class="line">        layoutParams = new LayoutParams(getContext(), attrs);  </span><br><span class="line">    &#125; catch (Throwable e) &#123;  </span><br><span class="line">        layoutParams = null;  </span><br><span class="line">    &#125;  </span><br><span class="line">    if (layoutParams == null) &#123;  </span><br><span class="line">        layoutParams = new LayoutParams(-1, -1);  </span><br><span class="line">        layoutParams.gravity = Gravity.NO_GRAVITY;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return layoutParams;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多点触摸的时候DrawerLayout抛出ArrayIndexOutOfBoundsException">多点触摸的时候DrawerLayout抛出ArrayIndexOutOfBoundsException</h3><p>这是由于多点触摸时候requestDisallowInterceptTouchEvent和DrawerLayout的innerViews问题。自己在外面继承DrawerLayout然后改一下行为。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeDrawerLayout</span> <span class="keyword">extends</span> <span class="title">DrawerLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SafeDrawerLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SafeDrawerLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SafeDrawerLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsDisallowIntercept = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDisallowInterceptTouchEvent</span><span class="params">(<span class="keyword">boolean</span> disallowIntercept)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// keep the info about if the innerViews do requestDisallowInterceptTouchEvent</span></span><br><span class="line">        mIsDisallowIntercept = disallowIntercept;</span><br><span class="line">        <span class="keyword">super</span>.requestDisallowInterceptTouchEvent(disallowIntercept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// the incorrect array size will only happen in the multi-touch scenario.</span></span><br><span class="line">        <span class="keyword">if</span> (ev.getPointerCount() &gt; <span class="number">1</span> &amp;&amp; mIsDisallowIntercept) &#123;</span><br><span class="line">            requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">boolean</span> handled = <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">            requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> handled;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="有时候手动拉出抽屉时候，抽屉会卡在那里，拉不出来">有时候手动拉出抽屉时候，抽屉会卡在那里，拉不出来</h3><p>这也是极其坑爹的一个bug，原因是触摸EDGE的时候，事件触发到抽屉出现有一个延时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Length of time to delay before peeking the drawer.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PEEK_DELAY = <span class="number">160</span>; <span class="comment">// ms</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeTouched</span><span class="params">(<span class="keyword">int</span> edgeFlags, <span class="keyword">int</span> pointerId)</span> </span>&#123;</span><br><span class="line">        postDelayed(mPeekRunnable, PEEK_DELAY);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p> 抽屉有STATE_IDLE, STATE_DRAGGING和STATE_SETTLING三种状态，而这个偶然状况下，已经处于STATE_DRAGGING，而这个动作打开了抽屉20dp并试图再次置回STATE_DRAGGING，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkNewEdgeDrag</span><span class="params">(<span class="keyword">float</span> delta, <span class="keyword">float</span> odelta, <span class="keyword">int</span> pointerId, <span class="keyword">int</span> edge)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> absDelta = Math.abs(delta);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> absODelta = Math.abs(odelta);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((mInitialEdgesTouched[pointerId] &amp; edge) != edge  || (mTrackingEdges &amp; edge) == <span class="number">0</span> ||</span><br><span class="line">            (mEdgeDragsLocked[pointerId] &amp; edge) == edge ||</span><br><span class="line">            (mEdgeDragsInProgress[pointerId] &amp; edge) == edge ||</span><br><span class="line">            (absDelta &lt;= mTouchSlop &amp;&amp; absODelta &lt;= mTouchSlop)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (absDelta &lt; absODelta * <span class="number">0.5f</span> &amp;&amp; mCallback.onEdgeLock(edge)) &#123;</span><br><span class="line">        mEdgeDragsLocked[pointerId] |= edge;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (mEdgeDragsInProgress[pointerId] &amp; edge) == <span class="number">0</span> &amp;&amp; absDelta &gt; mTouchSlop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 但这里由于mEdgeDragsInProgress[pointerId] &amp; edge) == edge所以阻止了DrawerLayout回到STATE_DRAGGING。</p>
<p>解决方案是把DrawerLayout的ViewDragCallback中的mPeekRunnable进行修改，简单粗暴。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable mPeekRunnable = <span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//peekDrawer();  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[让动画不再僵硬：Facebook Rebound Android动画库介绍]]></title>
      <url>http://blog.zhaiyifan.cn/2015/03/13/facebook-rebound-intro/</url>
      <content type="html"><![CDATA[<h2 id="introduction">introduction</h2><p>official site：<a href="http://facebook.github.io/rebound" target="_blank" rel="external">http://facebook.github.io/rebound</a><br>github : <a href="https://github.com/facebook/rebound" target="_blank" rel="external">https://github.com/facebook/rebound</a><br>Rebound是facebook推出的一个弹性动画库，可以让动画看起来真实自然，像真实世界的物理运动，带有力的效果，使用的参数则是facebook的origami中使用的。<br>官网上有一个简单的JS版本来做demo，如果说到evernote、LinkedIn、flow等应用也在使用这个动画库，是不是会显得更厉害些呢。</p>
<p>具体效果，可以看看QQ空间 Android独立版客户端中，抽屉打开的icon效果，以及底部加号点开后的icon效果，是我当年在的时候做的。</p>
<h2 id="usage">usage</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Spring spring = mSpringSystem</span><br><span class="line">        .createSpring()</span><br><span class="line">        .setSpringConfig(SpringConfig.fromOrigamiTensionAndFriction(<span class="number">86</span>, <span class="number">7</span>))</span><br><span class="line">        .addListener(<span class="keyword">new</span> SimpleSpringListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpringUpdate</span><span class="params">(Spring spring)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">float</span> value = (<span class="keyword">float</span>) spring.getCurrentValue();</span><br><span class="line">                ViewHelper.setTranslationX(view, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p> 上面的短短代码就可以给一个view加上自然的从左向右进入回弹效果。</p>
<p>类似地</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Spring spring = mSpringSystem</span><br><span class="line">        .createSpring()</span><br><span class="line">        .setSpringConfig(SpringConfig.fromOrigamiTensionAndFriction(<span class="number">86</span>, <span class="number">7</span>))</span><br><span class="line">        .addListener(<span class="keyword">new</span> SimpleSpringListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpringUpdate</span><span class="params">(Spring spring)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">float</span> value = (<span class="keyword">float</span>) spring.getCurrentValue();</span><br><span class="line">                <span class="keyword">float</span> scale = <span class="number">1f</span> - value;</span><br><span class="line">                ViewHelper.setScaleX(mItemIconViewList.get(index), scale);</span><br><span class="line">                ViewHelper.setScaleY(mItemIconViewList.get(index), scale);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p> 就可以给view加上一个从小变大然后略有回弹的效果。</p>
<p>如果想要做很多view的连锁动画怎么办？Rebound也提供了SpringChain这个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewCount; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> View view = <span class="keyword">new</span> View(context);</span><br><span class="line">    view.setLayoutParams(</span><br><span class="line">            <span class="keyword">new</span> TableLayout.LayoutParams(</span><br><span class="line">                    ViewGroup.LayoutParams.MATCH_PARENT,</span><br><span class="line">                    ViewGroup.LayoutParams.WRAP_CONTENT,</span><br><span class="line">                    <span class="number">1f</span>));</span><br><span class="line">    mSpringChain.addSpring(<span class="keyword">new</span> SimpleSpringListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpringUpdate</span><span class="params">(Spring spring)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">float</span> value = (<span class="keyword">float</span>) spring.getCurrentValue();</span><br><span class="line">            view.setTranslationX(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">int</span> color = (Integer) evaluator.evaluate((<span class="keyword">float</span>) i / (<span class="keyword">float</span>) viewCount, startColor, endColor);</span><br><span class="line">    view.setBackgroundColor(color);</span><br><span class="line">    view.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> handleRowTouch(v, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mViews.add(view);</span><br><span class="line">    rootView.addView(view);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">        List&lt;Spring&gt; springs = mSpringChain.getAllSprings();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; springs.size(); i++) &#123;</span><br><span class="line">            springs.get(i).setCurrentValue(-mViews.get(i).getWidth());</span><br><span class="line">        &#125;</span><br><span class="line">        postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mSpringChain</span><br><span class="line">                        .setControlSpringIndex(<span class="number">0</span>)</span><br><span class="line">                        .getControlSpring()</span><br><span class="line">                        .setEndValue(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p> 就做出了一个view和view的牵引位移动画效果。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[沉浸式状态栏技术方案及其中的一些坑]]></title>
      <url>http://blog.zhaiyifan.cn/2015/02/25/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E5%8F%8A%E5%85%B6%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="沉浸式状态栏">沉浸式状态栏</h2><p>沉浸式状态栏是android 4.4开始支持的一个feature，在软件打开的时候通知栏和软件顶部颜色融为一体，这样不仅可以使软件和系统本身更加融为一体，而且让用户注意力更加集中在内容上。</p>
<p>在ios上这是一个很早就支持的功能，但在android上则一直只能看到黑色的状态栏。google mail在抽屉上成功展示了沉浸式状态栏，可见想要把内容显示在状态栏肯定是能做的。</p>
<p><img src="http://img.blog.csdn.net/20150627180614078" alt="Gmail effect"><br><a id="more"></a></p>
<h2 id="技术方案">技术方案</h2><p>虽然google官方文档和网上那些技术文章中，都轻描淡写地用</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">item</span> <span class="attribute">name</span>=<span class="value">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">	Window window = getWindow();</span><br><span class="line">	window.setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION, WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</span><br><span class="line">	window.setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但设置后，则会把状态栏当做应用可用区域的一部分，而导致应用标题栏的图标/文字显示到状态栏上，和原有时间等区域重合。而设置android:fitsSystemWindows=”true”则只是把整个window的背景色延展到了状态栏，实则是伪沉浸式。<br><img src="http://img.blog.csdn.net/20150627180323646" alt="qzone effect"></p>
<p>所以这里要做的是如何在做好沉浸式的同时不让状态栏本身内容被影响。</p>
<h2 id="大致实现">大致实现</h2><ul>
<li>升级API LEVEL到19（不需要修改targetSdkVersion，只需要编译使用新的sdk）</li>
<li>对应用和activity的theme在values-v19的style.xml里重写，设置android:windowTranslucentStatus为true</li>
<li>对title bar的xml做一些简单修改，比如min height都做到dimens.xml里面，root layout上加一个paddingTop，分别在values/dimens和values-v19/dimens设置为0dp和25dp（android默认的状态栏高度）。</li>
<li>把所有对标题栏相关的不规范padding/margin引用都纠正为使用dimens内的。</li>
<li>自定义标题栏组件，避免在layout里面的冗余导致以后修改困难，以及在所有activity重复初始化标题栏。</li>
</ul>
<h2 id="遇到和解决的一些坑">遇到和解决的一些坑</h2><ul>
<li><p>很多rom把渐变阴影给去了（CM、miui、Flyme OS等等）<br>大部分应用了沉浸式状态栏的应用都没有考虑到这点，如腾讯地图，导致在那些rom上打开应用后状态栏一片白乎乎的看不清。<br>尽管google的原生4.4 rom中，在设置了沉浸式状态栏后，会对状态栏区域加上一条渐变的背景，来防止亮色导致状态栏图标/字看不清，但实际应用中发现其实很多rom把渐变阴影给去了，所以在状态栏组件中，加上了绘制阴影的选项（包括5.0半透明黑条和4.4渐变阴影两种选项），会在4.4机器开启了沉浸式状态栏时，绘制阴影。</p>
</li>
<li><p>状态栏高度不一致<br>部分rom（如miui和Flyme等）修改了状态栏高度，miui改高了，而meizu上的flyme则改矮了，所以不能直接写作25dp。在CustomTitleBar组件中通过重写getPaddingTop方法来兼容所有状态栏高度。</p>
</li>
<li><p>插件和没有标题栏的activity<br>插件和一些没有标题栏的activity的layout都因为沉浸式状态栏而乱了。如果不需要标题栏的话，可以直接通过在layout root上加上android:fitsSystemWindows=”true”来自适应，否则同样需要做重写style样式（因为目前插件还不能直接引用主工程资源）</p>
</li>
<li><p>既知的页面resize bug<br>一个已知的在设置沉浸式状态栏后的bug：<a href="https://code.google.com/p/android/issues/detail?id=63777。导致在软键盘弹出后页面没有resize，内容被键盘遮住，adjustPan不起作用，如写说说、写日志这些界面。直接在需要relayout的子view上添加fitsSystemWindows属性。" target="_blank" rel="external">https://code.google.com/p/android/issues/detail?id=63777。导致在软键盘弹出后页面没有resize，内容被键盘遮住，adjustPan不起作用，如写说说、写日志这些界面。直接在需要relayout的子view上添加fitsSystemWindows属性。</a></p>
</li>
</ul>
<h2 id="待完善点">待完善点</h2><ul>
<li>目前统一在4.4上添加了渐变阴影，而在5.0则维持系统原样（会有一条半透明黑色bar），后期可以看看是否通过白名单在部分没有修改原生状态栏行为（保留了渐变阴影）的rom上不进行重复的阴影绘制，需要有很多机器可以确认。</li>
<li>小米的miui上，部分原生应用有把状态栏字体图标改变颜色的行为，研究了一下是rom原生带有普通模式和dark模式两种的状态栏字体颜色，而不是标准的android api，可以通过反射修改：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatusBarDarkMode</span><span class="params">(<span class="keyword">boolean</span> darkmode, Activity activity)</span> </span>&#123;  </span><br><span class="line">    Class&lt;? extends Window&gt; clazz = activity.getWindow().getClass();  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        Class&lt;?&gt; layoutParams = Class.forName(<span class="string">"android.view.MiuiWindowManager$LayoutParams"</span>);  </span><br><span class="line">        Field field = layoutParams.getField(<span class="string">"EXTRA_FLAG_STATUS_BAR_DARK_MODE"</span>);  </span><br><span class="line">        <span class="keyword">int</span> darkModeFlag = field.getInt(layoutParams);  </span><br><span class="line">        Method extraFlagField = clazz.getMethod(<span class="string">"setExtraFlags"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);  </span><br><span class="line">        extraFlagField.invoke(activity.getWindow(), darkmode ? darkModeFlag : <span class="number">0</span>, darkModeFlag);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实现Tumblr的标题栏跟滑动渐变颜色（在2个色值之间）的动画]]></title>
      <url>http://blog.zhaiyifan.cn/2015/01/18/tumblr-like-titlebar-anim/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/markzhai/InterestingTitleBar" target="_blank" rel="external">InterestingTitleBar源码</a></p>
<p>轻博客应用Tumblr中，在看他人的主页时候，可以看到顶部title bar的一个很酷炫的体验，当在最顶端，整个title bar的背景是透明的，而上面的字体和图标是白色的，随着逐渐滑下来，背景逐渐不透明变白，而图标及字体则渐渐灰起来。如下图<br><img src="http://img.blog.csdn.net/20150627182454484" alt="Tumblr scroll effect"><br>整个滑动的效果很好。</p>
<p>那么这个效果是怎么实现的呢。秘密自然都在listview的onScroll上。根据firstVisibleItem来判断是否需要对事件进行对应处理，如果滑到了下面，cover不可见了，自然没有必要再去处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (firstVisibleItem &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        View v = view.getChildAt(<span class="number">0</span>);  </span><br><span class="line">        <span class="comment">// 可见区域顶部的top，原始0，滚动到下面后为负数  </span></span><br><span class="line">        <span class="keyword">int</span> top = (v == <span class="keyword">null</span>) ? <span class="number">0</span> : v.getTop();  </span><br><span class="line">        <span class="keyword">if</span> (mCompleteFadePosition &lt;= <span class="number">0</span>) &#123;  </span><br><span class="line">            mFadeDuration = CoverSettings.getCoverVisibleHeight() / <span class="number">2</span>;  </span><br><span class="line">            mCompleteFadePosition = (mHeaderView.findViewById(R.id.user_info_header_panel).getBottom()  </span><br><span class="line">                    + CoverSettings.getCoverPadding() - ViewUtils.dpToPx(getResources().getDimension(R.dimen.title_bar_main_content_height)));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 当前页面顶端和结束Fade区域的距离  </span></span><br><span class="line">        <span class="keyword">int</span> delta = top + mCompleteFadePosition;  </span><br><span class="line">        mTitleBarAlpha = interpolate(delta);  </span><br><span class="line">        setTitleBarTranslate(mTitleBarAlpha);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>interpolate函数根据当前滑动到的位置，来计算需要对应处理的alpha值，setTitleBarTranslate来做具体的ui修改。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Specify an alpha value for the title bar. 0 means fully transparent, and</span><br><span class="line"> * 255 means fully opaque.</span><br><span class="line"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitleBarTranslate</span><span class="params">(<span class="keyword">int</span> alpha)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (mTitleBarView == <span class="keyword">null</span> || mTitleBarView.getBackground() == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    mTitleBarView.getBackground().setAlpha(alpha);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mBarTitleText == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (alpha != <span class="number">0</span>) &#123;  </span><br><span class="line">        setTitleBarShadowLayer(<span class="number">0</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        setTitleBarShadowLayer(<span class="number">1f</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (alpha &gt;= MAX_ALPHA) &#123;  </span><br><span class="line">        setTitleBarColor(ORIGIN_COLOR);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        setTitleBarColor(ColorUtil.interpolateColor(Color.WHITE, mOriginBarTitleColor.getDefaultColor(), alpha, MAX_ALPHA));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>setTitleBarShadowLayer是给字体加上阴影，防止在最顶部透明时，纯白背景下白色字会看不清。</p>
<p>setTitleBarColor则是大头，对图标以及字体进行颜色修改。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTitleBarColor</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (color == ORIGIN_COLOR) &#123;  </span><br><span class="line">        mBarTitleText.setTextColor(mOriginBarTitleColor);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        mBarTitleText.setTextColor(color);  </span><br><span class="line">    &#125;  </span><br><span class="line">    setViewColor(mBarRightFriendView, color);  </span><br><span class="line">    setViewColor(mBarLeftSettingButton, color);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>分别写textview和button的setViewColor方法，这里颜色的变化是通过万能的ColorFilter来实现的，模式则使用了PorterDuff.Mode.SRC_ATOP。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setViewColor</span><span class="params">(Button button, <span class="keyword">int</span> color)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (color == ORIGIN_COLOR) &#123;  </span><br><span class="line">        button.setTextColor(mOriginBarTitleColor);  </span><br><span class="line">        button.getBackground().clearColorFilter();  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        button.setTextColor(color);  </span><br><span class="line">        button.getBackground().setColorFilter(color, PorterDuff.Mode.SRC_ATOP);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setViewColor</span><span class="params">(TextView textView, <span class="keyword">int</span> color)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (color == ORIGIN_COLOR) &#123;  </span><br><span class="line">        textView.setTextColor(mOriginBarTitleColor);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        textView.setTextColor(color);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>险些忘了interpolateColor，会根据位置在原色值和目标最终色值之间根据位置来做映射（任意颜色的图标都能渐变）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">interpolateColor</span><span class="params">(<span class="keyword">int</span> colorFrom, <span class="keyword">int</span> colorTo, <span class="keyword">int</span> posFrom, <span class="keyword">int</span> posTo)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">float</span> delta = posTo - posFrom;  </span><br><span class="line">    <span class="keyword">int</span> red = (<span class="keyword">int</span>)((Color.red(colorFrom) - Color.red(colorTo)) * delta / posTo + Color.red(colorTo));  </span><br><span class="line">    <span class="keyword">int</span> green = (<span class="keyword">int</span>)((Color.green(colorFrom) - Color.green(colorTo)) * delta / posTo + Color.green(colorTo));  </span><br><span class="line">    <span class="keyword">int</span> blue = (<span class="keyword">int</span>)((Color.blue(colorFrom) - Color.blue(colorTo)) * delta / posTo) + Color.blue(colorTo);  </span><br><span class="line">    <span class="keyword">return</span> Color.argb(<span class="number">255</span>, red, green, blue);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
  
  
</search>
